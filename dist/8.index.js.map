{"version":3,"file":"8.index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACncA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACzLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://typescript-action/./node_modules/node-fetch-native/dist/shared/node-fetch-native.b703cef9.mjs","webpack://typescript-action/./node_modules/node-fetch-native/dist/index.mjs","webpack://typescript-action/./node_modules/destr/dist/index.mjs","webpack://typescript-action/./node_modules/ohmyfetch/node_modules/ufo/dist/index.mjs","webpack://typescript-action/./node_modules/ohmyfetch/dist/shared/ohmyfetch.d1948a88.mjs","webpack://typescript-action/./node_modules/ohmyfetch/dist/node.mjs"],"sourcesContent":["import http from 'node:http';\nimport https from 'node:https';\nimport zlib from 'node:zlib';\nimport Stream, { PassThrough, pipeline as pipeline$1 } from 'node:stream';\nimport { Buffer as Buffer$1 } from 'node:buffer';\nimport { types, promisify, deprecate } from 'node:util';\nimport { format } from 'node:url';\nimport { isIP } from 'node:net';\nimport 'node:fs';\nimport 'node:path';\n\n/**\n * Returns a `Buffer` instance from the given data URI `uri`.\n *\n * @param {String} uri Data URI to turn into a Buffer instance\n * @returns {Buffer} Buffer instance from Data URI\n * @api public\n */\nfunction dataUriToBuffer(uri) {\n    if (!/^data:/i.test(uri)) {\n        throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');\n    }\n    // strip newlines\n    uri = uri.replace(/\\r?\\n/g, '');\n    // split the URI up into the \"metadata\" and the \"data\" portions\n    const firstComma = uri.indexOf(',');\n    if (firstComma === -1 || firstComma <= 4) {\n        throw new TypeError('malformed data: URI');\n    }\n    // remove the \"data:\" scheme and parse the metadata\n    const meta = uri.substring(5, firstComma).split(';');\n    let charset = '';\n    let base64 = false;\n    const type = meta[0] || 'text/plain';\n    let typeFull = type;\n    for (let i = 1; i < meta.length; i++) {\n        if (meta[i] === 'base64') {\n            base64 = true;\n        }\n        else {\n            typeFull += `;${meta[i]}`;\n            if (meta[i].indexOf('charset=') === 0) {\n                charset = meta[i].substring(8);\n            }\n        }\n    }\n    // defaults to US-ASCII only if type is not provided\n    if (!meta[0] && !charset.length) {\n        typeFull += ';charset=US-ASCII';\n        charset = 'US-ASCII';\n    }\n    // get the encoded data portion and decode URI-encoded chars\n    const encoding = base64 ? 'base64' : 'ascii';\n    const data = unescape(uri.substring(firstComma + 1));\n    const buffer = Buffer.from(data, encoding);\n    // set `.type` and `.typeFull` properties to MIME type\n    buffer.type = type;\n    buffer.typeFull = typeFull;\n    // set the `.charset` property\n    buffer.charset = charset;\n    return buffer;\n}\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nvar ponyfill_es2018 = {exports: {}};\n\n/**\n * web-streams-polyfill v3.2.1\n */\n\nvar hasRequiredPonyfill_es2018;\n\nfunction requirePonyfill_es2018 () {\n\tif (hasRequiredPonyfill_es2018) return ponyfill_es2018.exports;\n\thasRequiredPonyfill_es2018 = 1;\n\t(function (module, exports) {\n\t\t(function (global, factory) {\n\t\t    factory(exports) ;\n\t\t}(commonjsGlobal, (function (exports) {\n\t\t    /// <reference lib=\"es2015.symbol\" />\n\t\t    const SymbolPolyfill = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ?\n\t\t        Symbol :\n\t\t        description => `Symbol(${description})`;\n\n\t\t    /// <reference lib=\"dom\" />\n\t\t    function noop() {\n\t\t        return undefined;\n\t\t    }\n\t\t    function getGlobals() {\n\t\t        if (typeof self !== 'undefined') {\n\t\t            return self;\n\t\t        }\n\t\t        else if (typeof window !== 'undefined') {\n\t\t            return window;\n\t\t        }\n\t\t        else if (typeof commonjsGlobal !== 'undefined') {\n\t\t            return commonjsGlobal;\n\t\t        }\n\t\t        return undefined;\n\t\t    }\n\t\t    const globals = getGlobals();\n\n\t\t    function typeIsObject(x) {\n\t\t        return (typeof x === 'object' && x !== null) || typeof x === 'function';\n\t\t    }\n\t\t    const rethrowAssertionErrorRejection = noop;\n\n\t\t    const originalPromise = Promise;\n\t\t    const originalPromiseThen = Promise.prototype.then;\n\t\t    const originalPromiseResolve = Promise.resolve.bind(originalPromise);\n\t\t    const originalPromiseReject = Promise.reject.bind(originalPromise);\n\t\t    function newPromise(executor) {\n\t\t        return new originalPromise(executor);\n\t\t    }\n\t\t    function promiseResolvedWith(value) {\n\t\t        return originalPromiseResolve(value);\n\t\t    }\n\t\t    function promiseRejectedWith(reason) {\n\t\t        return originalPromiseReject(reason);\n\t\t    }\n\t\t    function PerformPromiseThen(promise, onFulfilled, onRejected) {\n\t\t        // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\n\t\t        // approximation.\n\t\t        return originalPromiseThen.call(promise, onFulfilled, onRejected);\n\t\t    }\n\t\t    function uponPromise(promise, onFulfilled, onRejected) {\n\t\t        PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), undefined, rethrowAssertionErrorRejection);\n\t\t    }\n\t\t    function uponFulfillment(promise, onFulfilled) {\n\t\t        uponPromise(promise, onFulfilled);\n\t\t    }\n\t\t    function uponRejection(promise, onRejected) {\n\t\t        uponPromise(promise, undefined, onRejected);\n\t\t    }\n\t\t    function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {\n\t\t        return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n\t\t    }\n\t\t    function setPromiseIsHandledToTrue(promise) {\n\t\t        PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n\t\t    }\n\t\t    const queueMicrotask = (() => {\n\t\t        const globalQueueMicrotask = globals && globals.queueMicrotask;\n\t\t        if (typeof globalQueueMicrotask === 'function') {\n\t\t            return globalQueueMicrotask;\n\t\t        }\n\t\t        const resolvedPromise = promiseResolvedWith(undefined);\n\t\t        return (fn) => PerformPromiseThen(resolvedPromise, fn);\n\t\t    })();\n\t\t    function reflectCall(F, V, args) {\n\t\t        if (typeof F !== 'function') {\n\t\t            throw new TypeError('Argument is not a function');\n\t\t        }\n\t\t        return Function.prototype.apply.call(F, V, args);\n\t\t    }\n\t\t    function promiseCall(F, V, args) {\n\t\t        try {\n\t\t            return promiseResolvedWith(reflectCall(F, V, args));\n\t\t        }\n\t\t        catch (value) {\n\t\t            return promiseRejectedWith(value);\n\t\t        }\n\t\t    }\n\n\t\t    // Original from Chromium\n\t\t    // https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\n\t\t    const QUEUE_MAX_ARRAY_SIZE = 16384;\n\t\t    /**\n\t\t     * Simple queue structure.\n\t\t     *\n\t\t     * Avoids scalability issues with using a packed array directly by using\n\t\t     * multiple arrays in a linked list and keeping the array size bounded.\n\t\t     */\n\t\t    class SimpleQueue {\n\t\t        constructor() {\n\t\t            this._cursor = 0;\n\t\t            this._size = 0;\n\t\t            // _front and _back are always defined.\n\t\t            this._front = {\n\t\t                _elements: [],\n\t\t                _next: undefined\n\t\t            };\n\t\t            this._back = this._front;\n\t\t            // The cursor is used to avoid calling Array.shift().\n\t\t            // It contains the index of the front element of the array inside the\n\t\t            // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\n\t\t            this._cursor = 0;\n\t\t            // When there is only one node, size === elements.length - cursor.\n\t\t            this._size = 0;\n\t\t        }\n\t\t        get length() {\n\t\t            return this._size;\n\t\t        }\n\t\t        // For exception safety, this method is structured in order:\n\t\t        // 1. Read state\n\t\t        // 2. Calculate required state mutations\n\t\t        // 3. Perform state mutations\n\t\t        push(element) {\n\t\t            const oldBack = this._back;\n\t\t            let newBack = oldBack;\n\t\t            if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n\t\t                newBack = {\n\t\t                    _elements: [],\n\t\t                    _next: undefined\n\t\t                };\n\t\t            }\n\t\t            // push() is the mutation most likely to throw an exception, so it\n\t\t            // goes first.\n\t\t            oldBack._elements.push(element);\n\t\t            if (newBack !== oldBack) {\n\t\t                this._back = newBack;\n\t\t                oldBack._next = newBack;\n\t\t            }\n\t\t            ++this._size;\n\t\t        }\n\t\t        // Like push(), shift() follows the read -> calculate -> mutate pattern for\n\t\t        // exception safety.\n\t\t        shift() { // must not be called on an empty queue\n\t\t            const oldFront = this._front;\n\t\t            let newFront = oldFront;\n\t\t            const oldCursor = this._cursor;\n\t\t            let newCursor = oldCursor + 1;\n\t\t            const elements = oldFront._elements;\n\t\t            const element = elements[oldCursor];\n\t\t            if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n\t\t                newFront = oldFront._next;\n\t\t                newCursor = 0;\n\t\t            }\n\t\t            // No mutations before this point.\n\t\t            --this._size;\n\t\t            this._cursor = newCursor;\n\t\t            if (oldFront !== newFront) {\n\t\t                this._front = newFront;\n\t\t            }\n\t\t            // Permit shifted element to be garbage collected.\n\t\t            elements[oldCursor] = undefined;\n\t\t            return element;\n\t\t        }\n\t\t        // The tricky thing about forEach() is that it can be called\n\t\t        // re-entrantly. The queue may be mutated inside the callback. It is easy to\n\t\t        // see that push() within the callback has no negative effects since the end\n\t\t        // of the queue is checked for on every iteration. If shift() is called\n\t\t        // repeatedly within the callback then the next iteration may return an\n\t\t        // element that has been removed. In this case the callback will be called\n\t\t        // with undefined values until we either \"catch up\" with elements that still\n\t\t        // exist or reach the back of the queue.\n\t\t        forEach(callback) {\n\t\t            let i = this._cursor;\n\t\t            let node = this._front;\n\t\t            let elements = node._elements;\n\t\t            while (i !== elements.length || node._next !== undefined) {\n\t\t                if (i === elements.length) {\n\t\t                    node = node._next;\n\t\t                    elements = node._elements;\n\t\t                    i = 0;\n\t\t                    if (elements.length === 0) {\n\t\t                        break;\n\t\t                    }\n\t\t                }\n\t\t                callback(elements[i]);\n\t\t                ++i;\n\t\t            }\n\t\t        }\n\t\t        // Return the element that would be returned if shift() was called now,\n\t\t        // without modifying the queue.\n\t\t        peek() { // must not be called on an empty queue\n\t\t            const front = this._front;\n\t\t            const cursor = this._cursor;\n\t\t            return front._elements[cursor];\n\t\t        }\n\t\t    }\n\n\t\t    function ReadableStreamReaderGenericInitialize(reader, stream) {\n\t\t        reader._ownerReadableStream = stream;\n\t\t        stream._reader = reader;\n\t\t        if (stream._state === 'readable') {\n\t\t            defaultReaderClosedPromiseInitialize(reader);\n\t\t        }\n\t\t        else if (stream._state === 'closed') {\n\t\t            defaultReaderClosedPromiseInitializeAsResolved(reader);\n\t\t        }\n\t\t        else {\n\t\t            defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n\t\t        }\n\t\t    }\n\t\t    // A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n\t\t    // check.\n\t\t    function ReadableStreamReaderGenericCancel(reader, reason) {\n\t\t        const stream = reader._ownerReadableStream;\n\t\t        return ReadableStreamCancel(stream, reason);\n\t\t    }\n\t\t    function ReadableStreamReaderGenericRelease(reader) {\n\t\t        if (reader._ownerReadableStream._state === 'readable') {\n\t\t            defaultReaderClosedPromiseReject(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n\t\t        }\n\t\t        else {\n\t\t            defaultReaderClosedPromiseResetToRejected(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n\t\t        }\n\t\t        reader._ownerReadableStream._reader = undefined;\n\t\t        reader._ownerReadableStream = undefined;\n\t\t    }\n\t\t    // Helper functions for the readers.\n\t\t    function readerLockException(name) {\n\t\t        return new TypeError('Cannot ' + name + ' a stream using a released reader');\n\t\t    }\n\t\t    // Helper functions for the ReadableStreamDefaultReader.\n\t\t    function defaultReaderClosedPromiseInitialize(reader) {\n\t\t        reader._closedPromise = newPromise((resolve, reject) => {\n\t\t            reader._closedPromise_resolve = resolve;\n\t\t            reader._closedPromise_reject = reject;\n\t\t        });\n\t\t    }\n\t\t    function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {\n\t\t        defaultReaderClosedPromiseInitialize(reader);\n\t\t        defaultReaderClosedPromiseReject(reader, reason);\n\t\t    }\n\t\t    function defaultReaderClosedPromiseInitializeAsResolved(reader) {\n\t\t        defaultReaderClosedPromiseInitialize(reader);\n\t\t        defaultReaderClosedPromiseResolve(reader);\n\t\t    }\n\t\t    function defaultReaderClosedPromiseReject(reader, reason) {\n\t\t        if (reader._closedPromise_reject === undefined) {\n\t\t            return;\n\t\t        }\n\t\t        setPromiseIsHandledToTrue(reader._closedPromise);\n\t\t        reader._closedPromise_reject(reason);\n\t\t        reader._closedPromise_resolve = undefined;\n\t\t        reader._closedPromise_reject = undefined;\n\t\t    }\n\t\t    function defaultReaderClosedPromiseResetToRejected(reader, reason) {\n\t\t        defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n\t\t    }\n\t\t    function defaultReaderClosedPromiseResolve(reader) {\n\t\t        if (reader._closedPromise_resolve === undefined) {\n\t\t            return;\n\t\t        }\n\t\t        reader._closedPromise_resolve(undefined);\n\t\t        reader._closedPromise_resolve = undefined;\n\t\t        reader._closedPromise_reject = undefined;\n\t\t    }\n\n\t\t    const AbortSteps = SymbolPolyfill('[[AbortSteps]]');\n\t\t    const ErrorSteps = SymbolPolyfill('[[ErrorSteps]]');\n\t\t    const CancelSteps = SymbolPolyfill('[[CancelSteps]]');\n\t\t    const PullSteps = SymbolPolyfill('[[PullSteps]]');\n\n\t\t    /// <reference lib=\"es2015.core\" />\n\t\t    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\n\t\t    const NumberIsFinite = Number.isFinite || function (x) {\n\t\t        return typeof x === 'number' && isFinite(x);\n\t\t    };\n\n\t\t    /// <reference lib=\"es2015.core\" />\n\t\t    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\n\t\t    const MathTrunc = Math.trunc || function (v) {\n\t\t        return v < 0 ? Math.ceil(v) : Math.floor(v);\n\t\t    };\n\n\t\t    // https://heycam.github.io/webidl/#idl-dictionaries\n\t\t    function isDictionary(x) {\n\t\t        return typeof x === 'object' || typeof x === 'function';\n\t\t    }\n\t\t    function assertDictionary(obj, context) {\n\t\t        if (obj !== undefined && !isDictionary(obj)) {\n\t\t            throw new TypeError(`${context} is not an object.`);\n\t\t        }\n\t\t    }\n\t\t    // https://heycam.github.io/webidl/#idl-callback-functions\n\t\t    function assertFunction(x, context) {\n\t\t        if (typeof x !== 'function') {\n\t\t            throw new TypeError(`${context} is not a function.`);\n\t\t        }\n\t\t    }\n\t\t    // https://heycam.github.io/webidl/#idl-object\n\t\t    function isObject(x) {\n\t\t        return (typeof x === 'object' && x !== null) || typeof x === 'function';\n\t\t    }\n\t\t    function assertObject(x, context) {\n\t\t        if (!isObject(x)) {\n\t\t            throw new TypeError(`${context} is not an object.`);\n\t\t        }\n\t\t    }\n\t\t    function assertRequiredArgument(x, position, context) {\n\t\t        if (x === undefined) {\n\t\t            throw new TypeError(`Parameter ${position} is required in '${context}'.`);\n\t\t        }\n\t\t    }\n\t\t    function assertRequiredField(x, field, context) {\n\t\t        if (x === undefined) {\n\t\t            throw new TypeError(`${field} is required in '${context}'.`);\n\t\t        }\n\t\t    }\n\t\t    // https://heycam.github.io/webidl/#idl-unrestricted-double\n\t\t    function convertUnrestrictedDouble(value) {\n\t\t        return Number(value);\n\t\t    }\n\t\t    function censorNegativeZero(x) {\n\t\t        return x === 0 ? 0 : x;\n\t\t    }\n\t\t    function integerPart(x) {\n\t\t        return censorNegativeZero(MathTrunc(x));\n\t\t    }\n\t\t    // https://heycam.github.io/webidl/#idl-unsigned-long-long\n\t\t    function convertUnsignedLongLongWithEnforceRange(value, context) {\n\t\t        const lowerBound = 0;\n\t\t        const upperBound = Number.MAX_SAFE_INTEGER;\n\t\t        let x = Number(value);\n\t\t        x = censorNegativeZero(x);\n\t\t        if (!NumberIsFinite(x)) {\n\t\t            throw new TypeError(`${context} is not a finite number`);\n\t\t        }\n\t\t        x = integerPart(x);\n\t\t        if (x < lowerBound || x > upperBound) {\n\t\t            throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);\n\t\t        }\n\t\t        if (!NumberIsFinite(x) || x === 0) {\n\t\t            return 0;\n\t\t        }\n\t\t        // TODO Use BigInt if supported?\n\t\t        // let xBigInt = BigInt(integerPart(x));\n\t\t        // xBigInt = BigInt.asUintN(64, xBigInt);\n\t\t        // return Number(xBigInt);\n\t\t        return x;\n\t\t    }\n\n\t\t    function assertReadableStream(x, context) {\n\t\t        if (!IsReadableStream(x)) {\n\t\t            throw new TypeError(`${context} is not a ReadableStream.`);\n\t\t        }\n\t\t    }\n\n\t\t    // Abstract operations for the ReadableStream.\n\t\t    function AcquireReadableStreamDefaultReader(stream) {\n\t\t        return new ReadableStreamDefaultReader(stream);\n\t\t    }\n\t\t    // ReadableStream API exposed for controllers.\n\t\t    function ReadableStreamAddReadRequest(stream, readRequest) {\n\t\t        stream._reader._readRequests.push(readRequest);\n\t\t    }\n\t\t    function ReadableStreamFulfillReadRequest(stream, chunk, done) {\n\t\t        const reader = stream._reader;\n\t\t        const readRequest = reader._readRequests.shift();\n\t\t        if (done) {\n\t\t            readRequest._closeSteps();\n\t\t        }\n\t\t        else {\n\t\t            readRequest._chunkSteps(chunk);\n\t\t        }\n\t\t    }\n\t\t    function ReadableStreamGetNumReadRequests(stream) {\n\t\t        return stream._reader._readRequests.length;\n\t\t    }\n\t\t    function ReadableStreamHasDefaultReader(stream) {\n\t\t        const reader = stream._reader;\n\t\t        if (reader === undefined) {\n\t\t            return false;\n\t\t        }\n\t\t        if (!IsReadableStreamDefaultReader(reader)) {\n\t\t            return false;\n\t\t        }\n\t\t        return true;\n\t\t    }\n\t\t    /**\n\t\t     * A default reader vended by a {@link ReadableStream}.\n\t\t     *\n\t\t     * @public\n\t\t     */\n\t\t    class ReadableStreamDefaultReader {\n\t\t        constructor(stream) {\n\t\t            assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');\n\t\t            assertReadableStream(stream, 'First parameter');\n\t\t            if (IsReadableStreamLocked(stream)) {\n\t\t                throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n\t\t            }\n\t\t            ReadableStreamReaderGenericInitialize(this, stream);\n\t\t            this._readRequests = new SimpleQueue();\n\t\t        }\n\t\t        /**\n\t\t         * Returns a promise that will be fulfilled when the stream becomes closed,\n\t\t         * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\n\t\t         */\n\t\t        get closed() {\n\t\t            if (!IsReadableStreamDefaultReader(this)) {\n\t\t                return promiseRejectedWith(defaultReaderBrandCheckException('closed'));\n\t\t            }\n\t\t            return this._closedPromise;\n\t\t        }\n\t\t        /**\n\t\t         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n\t\t         */\n\t\t        cancel(reason = undefined) {\n\t\t            if (!IsReadableStreamDefaultReader(this)) {\n\t\t                return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));\n\t\t            }\n\t\t            if (this._ownerReadableStream === undefined) {\n\t\t                return promiseRejectedWith(readerLockException('cancel'));\n\t\t            }\n\t\t            return ReadableStreamReaderGenericCancel(this, reason);\n\t\t        }\n\t\t        /**\n\t\t         * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\n\t\t         *\n\t\t         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n\t\t         */\n\t\t        read() {\n\t\t            if (!IsReadableStreamDefaultReader(this)) {\n\t\t                return promiseRejectedWith(defaultReaderBrandCheckException('read'));\n\t\t            }\n\t\t            if (this._ownerReadableStream === undefined) {\n\t\t                return promiseRejectedWith(readerLockException('read from'));\n\t\t            }\n\t\t            let resolvePromise;\n\t\t            let rejectPromise;\n\t\t            const promise = newPromise((resolve, reject) => {\n\t\t                resolvePromise = resolve;\n\t\t                rejectPromise = reject;\n\t\t            });\n\t\t            const readRequest = {\n\t\t                _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n\t\t                _closeSteps: () => resolvePromise({ value: undefined, done: true }),\n\t\t                _errorSteps: e => rejectPromise(e)\n\t\t            };\n\t\t            ReadableStreamDefaultReaderRead(this, readRequest);\n\t\t            return promise;\n\t\t        }\n\t\t        /**\n\t\t         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n\t\t         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n\t\t         * from now on; otherwise, the reader will appear closed.\n\t\t         *\n\t\t         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n\t\t         * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\n\t\t         * do so will throw a `TypeError` and leave the reader locked to the stream.\n\t\t         */\n\t\t        releaseLock() {\n\t\t            if (!IsReadableStreamDefaultReader(this)) {\n\t\t                throw defaultReaderBrandCheckException('releaseLock');\n\t\t            }\n\t\t            if (this._ownerReadableStream === undefined) {\n\t\t                return;\n\t\t            }\n\t\t            if (this._readRequests.length > 0) {\n\t\t                throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n\t\t            }\n\t\t            ReadableStreamReaderGenericRelease(this);\n\t\t        }\n\t\t    }\n\t\t    Object.defineProperties(ReadableStreamDefaultReader.prototype, {\n\t\t        cancel: { enumerable: true },\n\t\t        read: { enumerable: true },\n\t\t        releaseLock: { enumerable: true },\n\t\t        closed: { enumerable: true }\n\t\t    });\n\t\t    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n\t\t        Object.defineProperty(ReadableStreamDefaultReader.prototype, SymbolPolyfill.toStringTag, {\n\t\t            value: 'ReadableStreamDefaultReader',\n\t\t            configurable: true\n\t\t        });\n\t\t    }\n\t\t    // Abstract operations for the readers.\n\t\t    function IsReadableStreamDefaultReader(x) {\n\t\t        if (!typeIsObject(x)) {\n\t\t            return false;\n\t\t        }\n\t\t        if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n\t\t            return false;\n\t\t        }\n\t\t        return x instanceof ReadableStreamDefaultReader;\n\t\t    }\n\t\t    function ReadableStreamDefaultReaderRead(reader, readRequest) {\n\t\t        const stream = reader._ownerReadableStream;\n\t\t        stream._disturbed = true;\n\t\t        if (stream._state === 'closed') {\n\t\t            readRequest._closeSteps();\n\t\t        }\n\t\t        else if (stream._state === 'errored') {\n\t\t            readRequest._errorSteps(stream._storedError);\n\t\t        }\n\t\t        else {\n\t\t            stream._readableStreamController[PullSteps](readRequest);\n\t\t        }\n\t\t    }\n\t\t    // Helper functions for the ReadableStreamDefaultReader.\n\t\t    function defaultReaderBrandCheckException(name) {\n\t\t        return new TypeError(`ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\n\t\t    }\n\n\t\t    /// <reference lib=\"es2018.asynciterable\" />\n\t\t    /* eslint-disable @typescript-eslint/no-empty-function */\n\t\t    const AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () { }).prototype);\n\n\t\t    /// <reference lib=\"es2018.asynciterable\" />\n\t\t    class ReadableStreamAsyncIteratorImpl {\n\t\t        constructor(reader, preventCancel) {\n\t\t            this._ongoingPromise = undefined;\n\t\t            this._isFinished = false;\n\t\t            this._reader = reader;\n\t\t            this._preventCancel = preventCancel;\n\t\t        }\n\t\t        next() {\n\t\t            const nextSteps = () => this._nextSteps();\n\t\t            this._ongoingPromise = this._ongoingPromise ?\n\t\t                transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) :\n\t\t                nextSteps();\n\t\t            return this._ongoingPromise;\n\t\t        }\n\t\t        return(value) {\n\t\t            const returnSteps = () => this._returnSteps(value);\n\t\t            return this._ongoingPromise ?\n\t\t                transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) :\n\t\t                returnSteps();\n\t\t        }\n\t\t        _nextSteps() {\n\t\t            if (this._isFinished) {\n\t\t                return Promise.resolve({ value: undefined, done: true });\n\t\t            }\n\t\t            const reader = this._reader;\n\t\t            if (reader._ownerReadableStream === undefined) {\n\t\t                return promiseRejectedWith(readerLockException('iterate'));\n\t\t            }\n\t\t            let resolvePromise;\n\t\t            let rejectPromise;\n\t\t            const promise = newPromise((resolve, reject) => {\n\t\t                resolvePromise = resolve;\n\t\t                rejectPromise = reject;\n\t\t            });\n\t\t            const readRequest = {\n\t\t                _chunkSteps: chunk => {\n\t\t                    this._ongoingPromise = undefined;\n\t\t                    // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\n\t\t                    // FIXME Is this a bug in the specification, or in the test?\n\t\t                    queueMicrotask(() => resolvePromise({ value: chunk, done: false }));\n\t\t                },\n\t\t                _closeSteps: () => {\n\t\t                    this._ongoingPromise = undefined;\n\t\t                    this._isFinished = true;\n\t\t                    ReadableStreamReaderGenericRelease(reader);\n\t\t                    resolvePromise({ value: undefined, done: true });\n\t\t                },\n\t\t                _errorSteps: reason => {\n\t\t                    this._ongoingPromise = undefined;\n\t\t                    this._isFinished = true;\n\t\t                    ReadableStreamReaderGenericRelease(reader);\n\t\t                    rejectPromise(reason);\n\t\t                }\n\t\t            };\n\t\t            ReadableStreamDefaultReaderRead(reader, readRequest);\n\t\t            return promise;\n\t\t        }\n\t\t        _returnSteps(value) {\n\t\t            if (this._isFinished) {\n\t\t                return Promise.resolve({ value, done: true });\n\t\t            }\n\t\t            this._isFinished = true;\n\t\t            const reader = this._reader;\n\t\t            if (reader._ownerReadableStream === undefined) {\n\t\t                return promiseRejectedWith(readerLockException('finish iterating'));\n\t\t            }\n\t\t            if (!this._preventCancel) {\n\t\t                const result = ReadableStreamReaderGenericCancel(reader, value);\n\t\t                ReadableStreamReaderGenericRelease(reader);\n\t\t                return transformPromiseWith(result, () => ({ value, done: true }));\n\t\t            }\n\t\t            ReadableStreamReaderGenericRelease(reader);\n\t\t            return promiseResolvedWith({ value, done: true });\n\t\t        }\n\t\t    }\n\t\t    const ReadableStreamAsyncIteratorPrototype = {\n\t\t        next() {\n\t\t            if (!IsReadableStreamAsyncIterator(this)) {\n\t\t                return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));\n\t\t            }\n\t\t            return this._asyncIteratorImpl.next();\n\t\t        },\n\t\t        return(value) {\n\t\t            if (!IsReadableStreamAsyncIterator(this)) {\n\t\t                return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));\n\t\t            }\n\t\t            return this._asyncIteratorImpl.return(value);\n\t\t        }\n\t\t    };\n\t\t    if (AsyncIteratorPrototype !== undefined) {\n\t\t        Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n\t\t    }\n\t\t    // Abstract operations for the ReadableStream.\n\t\t    function AcquireReadableStreamAsyncIterator(stream, preventCancel) {\n\t\t        const reader = AcquireReadableStreamDefaultReader(stream);\n\t\t        const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n\t\t        const iterator = Object.create(ReadableStreamAsyncIteratorPrototype);\n\t\t        iterator._asyncIteratorImpl = impl;\n\t\t        return iterator;\n\t\t    }\n\t\t    function IsReadableStreamAsyncIterator(x) {\n\t\t        if (!typeIsObject(x)) {\n\t\t            return false;\n\t\t        }\n\t\t        if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {\n\t\t            return false;\n\t\t        }\n\t\t        try {\n\t\t            // noinspection SuspiciousTypeOfGuard\n\t\t            return x._asyncIteratorImpl instanceof\n\t\t                ReadableStreamAsyncIteratorImpl;\n\t\t        }\n\t\t        catch (_a) {\n\t\t            return false;\n\t\t        }\n\t\t    }\n\t\t    // Helper functions for the ReadableStream.\n\t\t    function streamAsyncIteratorBrandCheckException(name) {\n\t\t        return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);\n\t\t    }\n\n\t\t    /// <reference lib=\"es2015.core\" />\n\t\t    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\n\t\t    const NumberIsNaN = Number.isNaN || function (x) {\n\t\t        // eslint-disable-next-line no-self-compare\n\t\t        return x !== x;\n\t\t    };\n\n\t\t    function CreateArrayFromList(elements) {\n\t\t        // We use arrays to represent lists, so this is basically a no-op.\n\t\t        // Do a slice though just in case we happen to depend on the unique-ness.\n\t\t        return elements.slice();\n\t\t    }\n\t\t    function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {\n\t\t        new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n\t\t    }\n\t\t    // Not implemented correctly\n\t\t    function TransferArrayBuffer(O) {\n\t\t        return O;\n\t\t    }\n\t\t    // Not implemented correctly\n\t\t    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\t    function IsDetachedBuffer(O) {\n\t\t        return false;\n\t\t    }\n\t\t    function ArrayBufferSlice(buffer, begin, end) {\n\t\t        // ArrayBuffer.prototype.slice is not available on IE10\n\t\t        // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice\n\t\t        if (buffer.slice) {\n\t\t            return buffer.slice(begin, end);\n\t\t        }\n\t\t        const length = end - begin;\n\t\t        const slice = new ArrayBuffer(length);\n\t\t        CopyDataBlockBytes(slice, 0, buffer, begin, length);\n\t\t        return slice;\n\t\t    }\n\n\t\t    function IsNonNegativeNumber(v) {\n\t\t        if (typeof v !== 'number') {\n\t\t            return false;\n\t\t        }\n\t\t        if (NumberIsNaN(v)) {\n\t\t            return false;\n\t\t        }\n\t\t        if (v < 0) {\n\t\t            return false;\n\t\t        }\n\t\t        return true;\n\t\t    }\n\t\t    function CloneAsUint8Array(O) {\n\t\t        const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\n\t\t        return new Uint8Array(buffer);\n\t\t    }\n\n\t\t    function DequeueValue(container) {\n\t\t        const pair = container._queue.shift();\n\t\t        container._queueTotalSize -= pair.size;\n\t\t        if (container._queueTotalSize < 0) {\n\t\t            container._queueTotalSize = 0;\n\t\t        }\n\t\t        return pair.value;\n\t\t    }\n\t\t    function EnqueueValueWithSize(container, value, size) {\n\t\t        if (!IsNonNegativeNumber(size) || size === Infinity) {\n\t\t            throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n\t\t        }\n\t\t        container._queue.push({ value, size });\n\t\t        container._queueTotalSize += size;\n\t\t    }\n\t\t    function PeekQueueValue(container) {\n\t\t        const pair = container._queue.peek();\n\t\t        return pair.value;\n\t\t    }\n\t\t    function ResetQueue(container) {\n\t\t        container._queue = new SimpleQueue();\n\t\t        container._queueTotalSize = 0;\n\t\t    }\n\n\t\t    /**\n\t\t     * A pull-into request in a {@link ReadableByteStreamController}.\n\t\t     *\n\t\t     * @public\n\t\t     */\n\t\t    class ReadableStreamBYOBRequest {\n\t\t        constructor() {\n\t\t            throw new TypeError('Illegal constructor');\n\t\t        }\n\t\t        /**\n\t\t         * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\n\t\t         */\n\t\t        get view() {\n\t\t            if (!IsReadableStreamBYOBRequest(this)) {\n\t\t                throw byobRequestBrandCheckException('view');\n\t\t            }\n\t\t            return this._view;\n\t\t        }\n\t\t        respond(bytesWritten) {\n\t\t            if (!IsReadableStreamBYOBRequest(this)) {\n\t\t                throw byobRequestBrandCheckException('respond');\n\t\t            }\n\t\t            assertRequiredArgument(bytesWritten, 1, 'respond');\n\t\t            bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');\n\t\t            if (this._associatedReadableByteStreamController === undefined) {\n\t\t                throw new TypeError('This BYOB request has been invalidated');\n\t\t            }\n\t\t            if (IsDetachedBuffer(this._view.buffer)) ;\n\t\t            ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n\t\t        }\n\t\t        respondWithNewView(view) {\n\t\t            if (!IsReadableStreamBYOBRequest(this)) {\n\t\t                throw byobRequestBrandCheckException('respondWithNewView');\n\t\t            }\n\t\t            assertRequiredArgument(view, 1, 'respondWithNewView');\n\t\t            if (!ArrayBuffer.isView(view)) {\n\t\t                throw new TypeError('You can only respond with array buffer views');\n\t\t            }\n\t\t            if (this._associatedReadableByteStreamController === undefined) {\n\t\t                throw new TypeError('This BYOB request has been invalidated');\n\t\t            }\n\t\t            if (IsDetachedBuffer(view.buffer)) ;\n\t\t            ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n\t\t        }\n\t\t    }\n\t\t    Object.defineProperties(ReadableStreamBYOBRequest.prototype, {\n\t\t        respond: { enumerable: true },\n\t\t        respondWithNewView: { enumerable: true },\n\t\t        view: { enumerable: true }\n\t\t    });\n\t\t    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n\t\t        Object.defineProperty(ReadableStreamBYOBRequest.prototype, SymbolPolyfill.toStringTag, {\n\t\t            value: 'ReadableStreamBYOBRequest',\n\t\t            configurable: true\n\t\t        });\n\t\t    }\n\t\t    /**\n\t\t     * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\n\t\t     *\n\t\t     * @public\n\t\t     */\n\t\t    class ReadableByteStreamController {\n\t\t        constructor() {\n\t\t            throw new TypeError('Illegal constructor');\n\t\t        }\n\t\t        /**\n\t\t         * Returns the current BYOB pull request, or `null` if there isn't one.\n\t\t         */\n\t\t        get byobRequest() {\n\t\t            if (!IsReadableByteStreamController(this)) {\n\t\t                throw byteStreamControllerBrandCheckException('byobRequest');\n\t\t            }\n\t\t            return ReadableByteStreamControllerGetBYOBRequest(this);\n\t\t        }\n\t\t        /**\n\t\t         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n\t\t         * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\n\t\t         */\n\t\t        get desiredSize() {\n\t\t            if (!IsReadableByteStreamController(this)) {\n\t\t                throw byteStreamControllerBrandCheckException('desiredSize');\n\t\t            }\n\t\t            return ReadableByteStreamControllerGetDesiredSize(this);\n\t\t        }\n\t\t        /**\n\t\t         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n\t\t         * the stream, but once those are read, the stream will become closed.\n\t\t         */\n\t\t        close() {\n\t\t            if (!IsReadableByteStreamController(this)) {\n\t\t                throw byteStreamControllerBrandCheckException('close');\n\t\t            }\n\t\t            if (this._closeRequested) {\n\t\t                throw new TypeError('The stream has already been closed; do not close it again!');\n\t\t            }\n\t\t            const state = this._controlledReadableByteStream._state;\n\t\t            if (state !== 'readable') {\n\t\t                throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\n\t\t            }\n\t\t            ReadableByteStreamControllerClose(this);\n\t\t        }\n\t\t        enqueue(chunk) {\n\t\t            if (!IsReadableByteStreamController(this)) {\n\t\t                throw byteStreamControllerBrandCheckException('enqueue');\n\t\t            }\n\t\t            assertRequiredArgument(chunk, 1, 'enqueue');\n\t\t            if (!ArrayBuffer.isView(chunk)) {\n\t\t                throw new TypeError('chunk must be an array buffer view');\n\t\t            }\n\t\t            if (chunk.byteLength === 0) {\n\t\t                throw new TypeError('chunk must have non-zero byteLength');\n\t\t            }\n\t\t            if (chunk.buffer.byteLength === 0) {\n\t\t                throw new TypeError(`chunk's buffer must have non-zero byteLength`);\n\t\t            }\n\t\t            if (this._closeRequested) {\n\t\t                throw new TypeError('stream is closed or draining');\n\t\t            }\n\t\t            const state = this._controlledReadableByteStream._state;\n\t\t            if (state !== 'readable') {\n\t\t                throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\n\t\t            }\n\t\t            ReadableByteStreamControllerEnqueue(this, chunk);\n\t\t        }\n\t\t        /**\n\t\t         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n\t\t         */\n\t\t        error(e = undefined) {\n\t\t            if (!IsReadableByteStreamController(this)) {\n\t\t                throw byteStreamControllerBrandCheckException('error');\n\t\t            }\n\t\t            ReadableByteStreamControllerError(this, e);\n\t\t        }\n\t\t        /** @internal */\n\t\t        [CancelSteps](reason) {\n\t\t            ReadableByteStreamControllerClearPendingPullIntos(this);\n\t\t            ResetQueue(this);\n\t\t            const result = this._cancelAlgorithm(reason);\n\t\t            ReadableByteStreamControllerClearAlgorithms(this);\n\t\t            return result;\n\t\t        }\n\t\t        /** @internal */\n\t\t        [PullSteps](readRequest) {\n\t\t            const stream = this._controlledReadableByteStream;\n\t\t            if (this._queueTotalSize > 0) {\n\t\t                const entry = this._queue.shift();\n\t\t                this._queueTotalSize -= entry.byteLength;\n\t\t                ReadableByteStreamControllerHandleQueueDrain(this);\n\t\t                const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n\t\t                readRequest._chunkSteps(view);\n\t\t                return;\n\t\t            }\n\t\t            const autoAllocateChunkSize = this._autoAllocateChunkSize;\n\t\t            if (autoAllocateChunkSize !== undefined) {\n\t\t                let buffer;\n\t\t                try {\n\t\t                    buffer = new ArrayBuffer(autoAllocateChunkSize);\n\t\t                }\n\t\t                catch (bufferE) {\n\t\t                    readRequest._errorSteps(bufferE);\n\t\t                    return;\n\t\t                }\n\t\t                const pullIntoDescriptor = {\n\t\t                    buffer,\n\t\t                    bufferByteLength: autoAllocateChunkSize,\n\t\t                    byteOffset: 0,\n\t\t                    byteLength: autoAllocateChunkSize,\n\t\t                    bytesFilled: 0,\n\t\t                    elementSize: 1,\n\t\t                    viewConstructor: Uint8Array,\n\t\t                    readerType: 'default'\n\t\t                };\n\t\t                this._pendingPullIntos.push(pullIntoDescriptor);\n\t\t            }\n\t\t            ReadableStreamAddReadRequest(stream, readRequest);\n\t\t            ReadableByteStreamControllerCallPullIfNeeded(this);\n\t\t        }\n\t\t    }\n\t\t    Object.defineProperties(ReadableByteStreamController.prototype, {\n\t\t        close: { enumerable: true },\n\t\t        enqueue: { enumerable: true },\n\t\t        error: { enumerable: true },\n\t\t        byobRequest: { enumerable: true },\n\t\t        desiredSize: { enumerable: true }\n\t\t    });\n\t\t    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n\t\t        Object.defineProperty(ReadableByteStreamController.prototype, SymbolPolyfill.toStringTag, {\n\t\t            value: 'ReadableByteStreamController',\n\t\t            configurable: true\n\t\t        });\n\t\t    }\n\t\t    // Abstract operations for the ReadableByteStreamController.\n\t\t    function IsReadableByteStreamController(x) {\n\t\t        if (!typeIsObject(x)) {\n\t\t            return false;\n\t\t        }\n\t\t        if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n\t\t            return false;\n\t\t        }\n\t\t        return x instanceof ReadableByteStreamController;\n\t\t    }\n\t\t    function IsReadableStreamBYOBRequest(x) {\n\t\t        if (!typeIsObject(x)) {\n\t\t            return false;\n\t\t        }\n\t\t        if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n\t\t            return false;\n\t\t        }\n\t\t        return x instanceof ReadableStreamBYOBRequest;\n\t\t    }\n\t\t    function ReadableByteStreamControllerCallPullIfNeeded(controller) {\n\t\t        const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n\t\t        if (!shouldPull) {\n\t\t            return;\n\t\t        }\n\t\t        if (controller._pulling) {\n\t\t            controller._pullAgain = true;\n\t\t            return;\n\t\t        }\n\t\t        controller._pulling = true;\n\t\t        // TODO: Test controller argument\n\t\t        const pullPromise = controller._pullAlgorithm();\n\t\t        uponPromise(pullPromise, () => {\n\t\t            controller._pulling = false;\n\t\t            if (controller._pullAgain) {\n\t\t                controller._pullAgain = false;\n\t\t                ReadableByteStreamControllerCallPullIfNeeded(controller);\n\t\t            }\n\t\t        }, e => {\n\t\t            ReadableByteStreamControllerError(controller, e);\n\t\t        });\n\t\t    }\n\t\t    function ReadableByteStreamControllerClearPendingPullIntos(controller) {\n\t\t        ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n\t\t        controller._pendingPullIntos = new SimpleQueue();\n\t\t    }\n\t\t    function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {\n\t\t        let done = false;\n\t\t        if (stream._state === 'closed') {\n\t\t            done = true;\n\t\t        }\n\t\t        const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n\t\t        if (pullIntoDescriptor.readerType === 'default') {\n\t\t            ReadableStreamFulfillReadRequest(stream, filledView, done);\n\t\t        }\n\t\t        else {\n\t\t            ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n\t\t        }\n\t\t    }\n\t\t    function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {\n\t\t        const bytesFilled = pullIntoDescriptor.bytesFilled;\n\t\t        const elementSize = pullIntoDescriptor.elementSize;\n\t\t        return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);\n\t\t    }\n\t\t    function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {\n\t\t        controller._queue.push({ buffer, byteOffset, byteLength });\n\t\t        controller._queueTotalSize += byteLength;\n\t\t    }\n\t\t    function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {\n\t\t        const elementSize = pullIntoDescriptor.elementSize;\n\t\t        const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n\t\t        const maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n\t\t        const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n\t\t        const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n\t\t        let totalBytesToCopyRemaining = maxBytesToCopy;\n\t\t        let ready = false;\n\t\t        if (maxAlignedBytes > currentAlignedBytes) {\n\t\t            totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n\t\t            ready = true;\n\t\t        }\n\t\t        const queue = controller._queue;\n\t\t        while (totalBytesToCopyRemaining > 0) {\n\t\t            const headOfQueue = queue.peek();\n\t\t            const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n\t\t            const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n\t\t            CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n\t\t            if (headOfQueue.byteLength === bytesToCopy) {\n\t\t                queue.shift();\n\t\t            }\n\t\t            else {\n\t\t                headOfQueue.byteOffset += bytesToCopy;\n\t\t                headOfQueue.byteLength -= bytesToCopy;\n\t\t            }\n\t\t            controller._queueTotalSize -= bytesToCopy;\n\t\t            ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n\t\t            totalBytesToCopyRemaining -= bytesToCopy;\n\t\t        }\n\t\t        return ready;\n\t\t    }\n\t\t    function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {\n\t\t        pullIntoDescriptor.bytesFilled += size;\n\t\t    }\n\t\t    function ReadableByteStreamControllerHandleQueueDrain(controller) {\n\t\t        if (controller._queueTotalSize === 0 && controller._closeRequested) {\n\t\t            ReadableByteStreamControllerClearAlgorithms(controller);\n\t\t            ReadableStreamClose(controller._controlledReadableByteStream);\n\t\t        }\n\t\t        else {\n\t\t            ReadableByteStreamControllerCallPullIfNeeded(controller);\n\t\t        }\n\t\t    }\n\t\t    function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {\n\t\t        if (controller._byobRequest === null) {\n\t\t            return;\n\t\t        }\n\t\t        controller._byobRequest._associatedReadableByteStreamController = undefined;\n\t\t        controller._byobRequest._view = null;\n\t\t        controller._byobRequest = null;\n\t\t    }\n\t\t    function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {\n\t\t        while (controller._pendingPullIntos.length > 0) {\n\t\t            if (controller._queueTotalSize === 0) {\n\t\t                return;\n\t\t            }\n\t\t            const pullIntoDescriptor = controller._pendingPullIntos.peek();\n\t\t            if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n\t\t                ReadableByteStreamControllerShiftPendingPullInto(controller);\n\t\t                ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n\t\t            }\n\t\t        }\n\t\t    }\n\t\t    function ReadableByteStreamControllerPullInto(controller, view, readIntoRequest) {\n\t\t        const stream = controller._controlledReadableByteStream;\n\t\t        let elementSize = 1;\n\t\t        if (view.constructor !== DataView) {\n\t\t            elementSize = view.constructor.BYTES_PER_ELEMENT;\n\t\t        }\n\t\t        const ctor = view.constructor;\n\t\t        // try {\n\t\t        const buffer = TransferArrayBuffer(view.buffer);\n\t\t        // } catch (e) {\n\t\t        //   readIntoRequest._errorSteps(e);\n\t\t        //   return;\n\t\t        // }\n\t\t        const pullIntoDescriptor = {\n\t\t            buffer,\n\t\t            bufferByteLength: buffer.byteLength,\n\t\t            byteOffset: view.byteOffset,\n\t\t            byteLength: view.byteLength,\n\t\t            bytesFilled: 0,\n\t\t            elementSize,\n\t\t            viewConstructor: ctor,\n\t\t            readerType: 'byob'\n\t\t        };\n\t\t        if (controller._pendingPullIntos.length > 0) {\n\t\t            controller._pendingPullIntos.push(pullIntoDescriptor);\n\t\t            // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n\t\t            // - No change happens on desiredSize\n\t\t            // - The source has already been notified of that there's at least 1 pending read(view)\n\t\t            ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n\t\t            return;\n\t\t        }\n\t\t        if (stream._state === 'closed') {\n\t\t            const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n\t\t            readIntoRequest._closeSteps(emptyView);\n\t\t            return;\n\t\t        }\n\t\t        if (controller._queueTotalSize > 0) {\n\t\t            if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n\t\t                const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n\t\t                ReadableByteStreamControllerHandleQueueDrain(controller);\n\t\t                readIntoRequest._chunkSteps(filledView);\n\t\t                return;\n\t\t            }\n\t\t            if (controller._closeRequested) {\n\t\t                const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n\t\t                ReadableByteStreamControllerError(controller, e);\n\t\t                readIntoRequest._errorSteps(e);\n\t\t                return;\n\t\t            }\n\t\t        }\n\t\t        controller._pendingPullIntos.push(pullIntoDescriptor);\n\t\t        ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n\t\t        ReadableByteStreamControllerCallPullIfNeeded(controller);\n\t\t    }\n\t\t    function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {\n\t\t        const stream = controller._controlledReadableByteStream;\n\t\t        if (ReadableStreamHasBYOBReader(stream)) {\n\t\t            while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n\t\t                const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n\t\t                ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n\t\t            }\n\t\t        }\n\t\t    }\n\t\t    function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {\n\t\t        ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n\t\t        if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n\t\t            return;\n\t\t        }\n\t\t        ReadableByteStreamControllerShiftPendingPullInto(controller);\n\t\t        const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n\t\t        if (remainderSize > 0) {\n\t\t            const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n\t\t            const remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);\n\t\t            ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n\t\t        }\n\t\t        pullIntoDescriptor.bytesFilled -= remainderSize;\n\t\t        ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n\t\t        ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n\t\t    }\n\t\t    function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {\n\t\t        const firstDescriptor = controller._pendingPullIntos.peek();\n\t\t        ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n\t\t        const state = controller._controlledReadableByteStream._state;\n\t\t        if (state === 'closed') {\n\t\t            ReadableByteStreamControllerRespondInClosedState(controller);\n\t\t        }\n\t\t        else {\n\t\t            ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n\t\t        }\n\t\t        ReadableByteStreamControllerCallPullIfNeeded(controller);\n\t\t    }\n\t\t    function ReadableByteStreamControllerShiftPendingPullInto(controller) {\n\t\t        const descriptor = controller._pendingPullIntos.shift();\n\t\t        return descriptor;\n\t\t    }\n\t\t    function ReadableByteStreamControllerShouldCallPull(controller) {\n\t\t        const stream = controller._controlledReadableByteStream;\n\t\t        if (stream._state !== 'readable') {\n\t\t            return false;\n\t\t        }\n\t\t        if (controller._closeRequested) {\n\t\t            return false;\n\t\t        }\n\t\t        if (!controller._started) {\n\t\t            return false;\n\t\t        }\n\t\t        if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n\t\t            return true;\n\t\t        }\n\t\t        if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n\t\t            return true;\n\t\t        }\n\t\t        const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n\t\t        if (desiredSize > 0) {\n\t\t            return true;\n\t\t        }\n\t\t        return false;\n\t\t    }\n\t\t    function ReadableByteStreamControllerClearAlgorithms(controller) {\n\t\t        controller._pullAlgorithm = undefined;\n\t\t        controller._cancelAlgorithm = undefined;\n\t\t    }\n\t\t    // A client of ReadableByteStreamController may use these functions directly to bypass state check.\n\t\t    function ReadableByteStreamControllerClose(controller) {\n\t\t        const stream = controller._controlledReadableByteStream;\n\t\t        if (controller._closeRequested || stream._state !== 'readable') {\n\t\t            return;\n\t\t        }\n\t\t        if (controller._queueTotalSize > 0) {\n\t\t            controller._closeRequested = true;\n\t\t            return;\n\t\t        }\n\t\t        if (controller._pendingPullIntos.length > 0) {\n\t\t            const firstPendingPullInto = controller._pendingPullIntos.peek();\n\t\t            if (firstPendingPullInto.bytesFilled > 0) {\n\t\t                const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n\t\t                ReadableByteStreamControllerError(controller, e);\n\t\t                throw e;\n\t\t            }\n\t\t        }\n\t\t        ReadableByteStreamControllerClearAlgorithms(controller);\n\t\t        ReadableStreamClose(stream);\n\t\t    }\n\t\t    function ReadableByteStreamControllerEnqueue(controller, chunk) {\n\t\t        const stream = controller._controlledReadableByteStream;\n\t\t        if (controller._closeRequested || stream._state !== 'readable') {\n\t\t            return;\n\t\t        }\n\t\t        const buffer = chunk.buffer;\n\t\t        const byteOffset = chunk.byteOffset;\n\t\t        const byteLength = chunk.byteLength;\n\t\t        const transferredBuffer = TransferArrayBuffer(buffer);\n\t\t        if (controller._pendingPullIntos.length > 0) {\n\t\t            const firstPendingPullInto = controller._pendingPullIntos.peek();\n\t\t            if (IsDetachedBuffer(firstPendingPullInto.buffer)) ;\n\t\t            firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\n\t\t        }\n\t\t        ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n\t\t        if (ReadableStreamHasDefaultReader(stream)) {\n\t\t            if (ReadableStreamGetNumReadRequests(stream) === 0) {\n\t\t                ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n\t\t            }\n\t\t            else {\n\t\t                if (controller._pendingPullIntos.length > 0) {\n\t\t                    ReadableByteStreamControllerShiftPendingPullInto(controller);\n\t\t                }\n\t\t                const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n\t\t                ReadableStreamFulfillReadRequest(stream, transferredView, false);\n\t\t            }\n\t\t        }\n\t\t        else if (ReadableStreamHasBYOBReader(stream)) {\n\t\t            // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n\t\t            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n\t\t            ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n\t\t        }\n\t\t        else {\n\t\t            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n\t\t        }\n\t\t        ReadableByteStreamControllerCallPullIfNeeded(controller);\n\t\t    }\n\t\t    function ReadableByteStreamControllerError(controller, e) {\n\t\t        const stream = controller._controlledReadableByteStream;\n\t\t        if (stream._state !== 'readable') {\n\t\t            return;\n\t\t        }\n\t\t        ReadableByteStreamControllerClearPendingPullIntos(controller);\n\t\t        ResetQueue(controller);\n\t\t        ReadableByteStreamControllerClearAlgorithms(controller);\n\t\t        ReadableStreamError(stream, e);\n\t\t    }\n\t\t    function ReadableByteStreamControllerGetBYOBRequest(controller) {\n\t\t        if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\n\t\t            const firstDescriptor = controller._pendingPullIntos.peek();\n\t\t            const view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n\t\t            const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n\t\t            SetUpReadableStreamBYOBRequest(byobRequest, controller, view);\n\t\t            controller._byobRequest = byobRequest;\n\t\t        }\n\t\t        return controller._byobRequest;\n\t\t    }\n\t\t    function ReadableByteStreamControllerGetDesiredSize(controller) {\n\t\t        const state = controller._controlledReadableByteStream._state;\n\t\t        if (state === 'errored') {\n\t\t            return null;\n\t\t        }\n\t\t        if (state === 'closed') {\n\t\t            return 0;\n\t\t        }\n\t\t        return controller._strategyHWM - controller._queueTotalSize;\n\t\t    }\n\t\t    function ReadableByteStreamControllerRespond(controller, bytesWritten) {\n\t\t        const firstDescriptor = controller._pendingPullIntos.peek();\n\t\t        const state = controller._controlledReadableByteStream._state;\n\t\t        if (state === 'closed') {\n\t\t            if (bytesWritten !== 0) {\n\t\t                throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n\t\t            }\n\t\t        }\n\t\t        else {\n\t\t            if (bytesWritten === 0) {\n\t\t                throw new TypeError('bytesWritten must be greater than 0 when calling respond() on a readable stream');\n\t\t            }\n\t\t            if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\n\t\t                throw new RangeError('bytesWritten out of range');\n\t\t            }\n\t\t        }\n\t\t        firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n\t\t        ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n\t\t    }\n\t\t    function ReadableByteStreamControllerRespondWithNewView(controller, view) {\n\t\t        const firstDescriptor = controller._pendingPullIntos.peek();\n\t\t        const state = controller._controlledReadableByteStream._state;\n\t\t        if (state === 'closed') {\n\t\t            if (view.byteLength !== 0) {\n\t\t                throw new TypeError('The view\\'s length must be 0 when calling respondWithNewView() on a closed stream');\n\t\t            }\n\t\t        }\n\t\t        else {\n\t\t            if (view.byteLength === 0) {\n\t\t                throw new TypeError('The view\\'s length must be greater than 0 when calling respondWithNewView() on a readable stream');\n\t\t            }\n\t\t        }\n\t\t        if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n\t\t            throw new RangeError('The region specified by view does not match byobRequest');\n\t\t        }\n\t\t        if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\n\t\t            throw new RangeError('The buffer of view has different capacity than byobRequest');\n\t\t        }\n\t\t        if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\n\t\t            throw new RangeError('The region specified by view is larger than byobRequest');\n\t\t        }\n\t\t        const viewByteLength = view.byteLength;\n\t\t        firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\n\t\t        ReadableByteStreamControllerRespondInternal(controller, viewByteLength);\n\t\t    }\n\t\t    function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {\n\t\t        controller._controlledReadableByteStream = stream;\n\t\t        controller._pullAgain = false;\n\t\t        controller._pulling = false;\n\t\t        controller._byobRequest = null;\n\t\t        // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n\t\t        controller._queue = controller._queueTotalSize = undefined;\n\t\t        ResetQueue(controller);\n\t\t        controller._closeRequested = false;\n\t\t        controller._started = false;\n\t\t        controller._strategyHWM = highWaterMark;\n\t\t        controller._pullAlgorithm = pullAlgorithm;\n\t\t        controller._cancelAlgorithm = cancelAlgorithm;\n\t\t        controller._autoAllocateChunkSize = autoAllocateChunkSize;\n\t\t        controller._pendingPullIntos = new SimpleQueue();\n\t\t        stream._readableStreamController = controller;\n\t\t        const startResult = startAlgorithm();\n\t\t        uponPromise(promiseResolvedWith(startResult), () => {\n\t\t            controller._started = true;\n\t\t            ReadableByteStreamControllerCallPullIfNeeded(controller);\n\t\t        }, r => {\n\t\t            ReadableByteStreamControllerError(controller, r);\n\t\t        });\n\t\t    }\n\t\t    function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {\n\t\t        const controller = Object.create(ReadableByteStreamController.prototype);\n\t\t        let startAlgorithm = () => undefined;\n\t\t        let pullAlgorithm = () => promiseResolvedWith(undefined);\n\t\t        let cancelAlgorithm = () => promiseResolvedWith(undefined);\n\t\t        if (underlyingByteSource.start !== undefined) {\n\t\t            startAlgorithm = () => underlyingByteSource.start(controller);\n\t\t        }\n\t\t        if (underlyingByteSource.pull !== undefined) {\n\t\t            pullAlgorithm = () => underlyingByteSource.pull(controller);\n\t\t        }\n\t\t        if (underlyingByteSource.cancel !== undefined) {\n\t\t            cancelAlgorithm = reason => underlyingByteSource.cancel(reason);\n\t\t        }\n\t\t        const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n\t\t        if (autoAllocateChunkSize === 0) {\n\t\t            throw new TypeError('autoAllocateChunkSize must be greater than 0');\n\t\t        }\n\t\t        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);\n\t\t    }\n\t\t    function SetUpReadableStreamBYOBRequest(request, controller, view) {\n\t\t        request._associatedReadableByteStreamController = controller;\n\t\t        request._view = view;\n\t\t    }\n\t\t    // Helper functions for the ReadableStreamBYOBRequest.\n\t\t    function byobRequestBrandCheckException(name) {\n\t\t        return new TypeError(`ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\n\t\t    }\n\t\t    // Helper functions for the ReadableByteStreamController.\n\t\t    function byteStreamControllerBrandCheckException(name) {\n\t\t        return new TypeError(`ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\n\t\t    }\n\n\t\t    // Abstract operations for the ReadableStream.\n\t\t    function AcquireReadableStreamBYOBReader(stream) {\n\t\t        return new ReadableStreamBYOBReader(stream);\n\t\t    }\n\t\t    // ReadableStream API exposed for controllers.\n\t\t    function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {\n\t\t        stream._reader._readIntoRequests.push(readIntoRequest);\n\t\t    }\n\t\t    function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {\n\t\t        const reader = stream._reader;\n\t\t        const readIntoRequest = reader._readIntoRequests.shift();\n\t\t        if (done) {\n\t\t            readIntoRequest._closeSteps(chunk);\n\t\t        }\n\t\t        else {\n\t\t            readIntoRequest._chunkSteps(chunk);\n\t\t        }\n\t\t    }\n\t\t    function ReadableStreamGetNumReadIntoRequests(stream) {\n\t\t        return stream._reader._readIntoRequests.length;\n\t\t    }\n\t\t    function ReadableStreamHasBYOBReader(stream) {\n\t\t        const reader = stream._reader;\n\t\t        if (reader === undefined) {\n\t\t            return false;\n\t\t        }\n\t\t        if (!IsReadableStreamBYOBReader(reader)) {\n\t\t            return false;\n\t\t        }\n\t\t        return true;\n\t\t    }\n\t\t    /**\n\t\t     * A BYOB reader vended by a {@link ReadableStream}.\n\t\t     *\n\t\t     * @public\n\t\t     */\n\t\t    class ReadableStreamBYOBReader {\n\t\t        constructor(stream) {\n\t\t            assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');\n\t\t            assertReadableStream(stream, 'First parameter');\n\t\t            if (IsReadableStreamLocked(stream)) {\n\t\t                throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n\t\t            }\n\t\t            if (!IsReadableByteStreamController(stream._readableStreamController)) {\n\t\t                throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +\n\t\t                    'source');\n\t\t            }\n\t\t            ReadableStreamReaderGenericInitialize(this, stream);\n\t\t            this._readIntoRequests = new SimpleQueue();\n\t\t        }\n\t\t        /**\n\t\t         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n\t\t         * the reader's lock is released before the stream finishes closing.\n\t\t         */\n\t\t        get closed() {\n\t\t            if (!IsReadableStreamBYOBReader(this)) {\n\t\t                return promiseRejectedWith(byobReaderBrandCheckException('closed'));\n\t\t            }\n\t\t            return this._closedPromise;\n\t\t        }\n\t\t        /**\n\t\t         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n\t\t         */\n\t\t        cancel(reason = undefined) {\n\t\t            if (!IsReadableStreamBYOBReader(this)) {\n\t\t                return promiseRejectedWith(byobReaderBrandCheckException('cancel'));\n\t\t            }\n\t\t            if (this._ownerReadableStream === undefined) {\n\t\t                return promiseRejectedWith(readerLockException('cancel'));\n\t\t            }\n\t\t            return ReadableStreamReaderGenericCancel(this, reason);\n\t\t        }\n\t\t        /**\n\t\t         * Attempts to reads bytes into view, and returns a promise resolved with the result.\n\t\t         *\n\t\t         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n\t\t         */\n\t\t        read(view) {\n\t\t            if (!IsReadableStreamBYOBReader(this)) {\n\t\t                return promiseRejectedWith(byobReaderBrandCheckException('read'));\n\t\t            }\n\t\t            if (!ArrayBuffer.isView(view)) {\n\t\t                return promiseRejectedWith(new TypeError('view must be an array buffer view'));\n\t\t            }\n\t\t            if (view.byteLength === 0) {\n\t\t                return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));\n\t\t            }\n\t\t            if (view.buffer.byteLength === 0) {\n\t\t                return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));\n\t\t            }\n\t\t            if (IsDetachedBuffer(view.buffer)) ;\n\t\t            if (this._ownerReadableStream === undefined) {\n\t\t                return promiseRejectedWith(readerLockException('read from'));\n\t\t            }\n\t\t            let resolvePromise;\n\t\t            let rejectPromise;\n\t\t            const promise = newPromise((resolve, reject) => {\n\t\t                resolvePromise = resolve;\n\t\t                rejectPromise = reject;\n\t\t            });\n\t\t            const readIntoRequest = {\n\t\t                _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n\t\t                _closeSteps: chunk => resolvePromise({ value: chunk, done: true }),\n\t\t                _errorSteps: e => rejectPromise(e)\n\t\t            };\n\t\t            ReadableStreamBYOBReaderRead(this, view, readIntoRequest);\n\t\t            return promise;\n\t\t        }\n\t\t        /**\n\t\t         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n\t\t         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n\t\t         * from now on; otherwise, the reader will appear closed.\n\t\t         *\n\t\t         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n\t\t         * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\n\t\t         * do so will throw a `TypeError` and leave the reader locked to the stream.\n\t\t         */\n\t\t        releaseLock() {\n\t\t            if (!IsReadableStreamBYOBReader(this)) {\n\t\t                throw byobReaderBrandCheckException('releaseLock');\n\t\t            }\n\t\t            if (this._ownerReadableStream === undefined) {\n\t\t                return;\n\t\t            }\n\t\t            if (this._readIntoRequests.length > 0) {\n\t\t                throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n\t\t            }\n\t\t            ReadableStreamReaderGenericRelease(this);\n\t\t        }\n\t\t    }\n\t\t    Object.defineProperties(ReadableStreamBYOBReader.prototype, {\n\t\t        cancel: { enumerable: true },\n\t\t        read: { enumerable: true },\n\t\t        releaseLock: { enumerable: true },\n\t\t        closed: { enumerable: true }\n\t\t    });\n\t\t    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n\t\t        Object.defineProperty(ReadableStreamBYOBReader.prototype, SymbolPolyfill.toStringTag, {\n\t\t            value: 'ReadableStreamBYOBReader',\n\t\t            configurable: true\n\t\t        });\n\t\t    }\n\t\t    // Abstract operations for the readers.\n\t\t    function IsReadableStreamBYOBReader(x) {\n\t\t        if (!typeIsObject(x)) {\n\t\t            return false;\n\t\t        }\n\t\t        if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n\t\t            return false;\n\t\t        }\n\t\t        return x instanceof ReadableStreamBYOBReader;\n\t\t    }\n\t\t    function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {\n\t\t        const stream = reader._ownerReadableStream;\n\t\t        stream._disturbed = true;\n\t\t        if (stream._state === 'errored') {\n\t\t            readIntoRequest._errorSteps(stream._storedError);\n\t\t        }\n\t\t        else {\n\t\t            ReadableByteStreamControllerPullInto(stream._readableStreamController, view, readIntoRequest);\n\t\t        }\n\t\t    }\n\t\t    // Helper functions for the ReadableStreamBYOBReader.\n\t\t    function byobReaderBrandCheckException(name) {\n\t\t        return new TypeError(`ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\n\t\t    }\n\n\t\t    function ExtractHighWaterMark(strategy, defaultHWM) {\n\t\t        const { highWaterMark } = strategy;\n\t\t        if (highWaterMark === undefined) {\n\t\t            return defaultHWM;\n\t\t        }\n\t\t        if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n\t\t            throw new RangeError('Invalid highWaterMark');\n\t\t        }\n\t\t        return highWaterMark;\n\t\t    }\n\t\t    function ExtractSizeAlgorithm(strategy) {\n\t\t        const { size } = strategy;\n\t\t        if (!size) {\n\t\t            return () => 1;\n\t\t        }\n\t\t        return size;\n\t\t    }\n\n\t\t    function convertQueuingStrategy(init, context) {\n\t\t        assertDictionary(init, context);\n\t\t        const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n\t\t        const size = init === null || init === void 0 ? void 0 : init.size;\n\t\t        return {\n\t\t            highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n\t\t            size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)\n\t\t        };\n\t\t    }\n\t\t    function convertQueuingStrategySize(fn, context) {\n\t\t        assertFunction(fn, context);\n\t\t        return chunk => convertUnrestrictedDouble(fn(chunk));\n\t\t    }\n\n\t\t    function convertUnderlyingSink(original, context) {\n\t\t        assertDictionary(original, context);\n\t\t        const abort = original === null || original === void 0 ? void 0 : original.abort;\n\t\t        const close = original === null || original === void 0 ? void 0 : original.close;\n\t\t        const start = original === null || original === void 0 ? void 0 : original.start;\n\t\t        const type = original === null || original === void 0 ? void 0 : original.type;\n\t\t        const write = original === null || original === void 0 ? void 0 : original.write;\n\t\t        return {\n\t\t            abort: abort === undefined ?\n\t\t                undefined :\n\t\t                convertUnderlyingSinkAbortCallback(abort, original, `${context} has member 'abort' that`),\n\t\t            close: close === undefined ?\n\t\t                undefined :\n\t\t                convertUnderlyingSinkCloseCallback(close, original, `${context} has member 'close' that`),\n\t\t            start: start === undefined ?\n\t\t                undefined :\n\t\t                convertUnderlyingSinkStartCallback(start, original, `${context} has member 'start' that`),\n\t\t            write: write === undefined ?\n\t\t                undefined :\n\t\t                convertUnderlyingSinkWriteCallback(write, original, `${context} has member 'write' that`),\n\t\t            type\n\t\t        };\n\t\t    }\n\t\t    function convertUnderlyingSinkAbortCallback(fn, original, context) {\n\t\t        assertFunction(fn, context);\n\t\t        return (reason) => promiseCall(fn, original, [reason]);\n\t\t    }\n\t\t    function convertUnderlyingSinkCloseCallback(fn, original, context) {\n\t\t        assertFunction(fn, context);\n\t\t        return () => promiseCall(fn, original, []);\n\t\t    }\n\t\t    function convertUnderlyingSinkStartCallback(fn, original, context) {\n\t\t        assertFunction(fn, context);\n\t\t        return (controller) => reflectCall(fn, original, [controller]);\n\t\t    }\n\t\t    function convertUnderlyingSinkWriteCallback(fn, original, context) {\n\t\t        assertFunction(fn, context);\n\t\t        return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);\n\t\t    }\n\n\t\t    function assertWritableStream(x, context) {\n\t\t        if (!IsWritableStream(x)) {\n\t\t            throw new TypeError(`${context} is not a WritableStream.`);\n\t\t        }\n\t\t    }\n\n\t\t    function isAbortSignal(value) {\n\t\t        if (typeof value !== 'object' || value === null) {\n\t\t            return false;\n\t\t        }\n\t\t        try {\n\t\t            return typeof value.aborted === 'boolean';\n\t\t        }\n\t\t        catch (_a) {\n\t\t            // AbortSignal.prototype.aborted throws if its brand check fails\n\t\t            return false;\n\t\t        }\n\t\t    }\n\t\t    const supportsAbortController = typeof AbortController === 'function';\n\t\t    /**\n\t\t     * Construct a new AbortController, if supported by the platform.\n\t\t     *\n\t\t     * @internal\n\t\t     */\n\t\t    function createAbortController() {\n\t\t        if (supportsAbortController) {\n\t\t            return new AbortController();\n\t\t        }\n\t\t        return undefined;\n\t\t    }\n\n\t\t    /**\n\t\t     * A writable stream represents a destination for data, into which you can write.\n\t\t     *\n\t\t     * @public\n\t\t     */\n\t\t    class WritableStream {\n\t\t        constructor(rawUnderlyingSink = {}, rawStrategy = {}) {\n\t\t            if (rawUnderlyingSink === undefined) {\n\t\t                rawUnderlyingSink = null;\n\t\t            }\n\t\t            else {\n\t\t                assertObject(rawUnderlyingSink, 'First parameter');\n\t\t            }\n\t\t            const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n\t\t            const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');\n\t\t            InitializeWritableStream(this);\n\t\t            const type = underlyingSink.type;\n\t\t            if (type !== undefined) {\n\t\t                throw new RangeError('Invalid type is specified');\n\t\t            }\n\t\t            const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n\t\t            const highWaterMark = ExtractHighWaterMark(strategy, 1);\n\t\t            SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n\t\t        }\n\t\t        /**\n\t\t         * Returns whether or not the writable stream is locked to a writer.\n\t\t         */\n\t\t        get locked() {\n\t\t            if (!IsWritableStream(this)) {\n\t\t                throw streamBrandCheckException$2('locked');\n\t\t            }\n\t\t            return IsWritableStreamLocked(this);\n\t\t        }\n\t\t        /**\n\t\t         * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\n\t\t         * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\n\t\t         * mechanism of the underlying sink.\n\t\t         *\n\t\t         * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\n\t\t         * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\n\t\t         * the stream) if the stream is currently locked.\n\t\t         */\n\t\t        abort(reason = undefined) {\n\t\t            if (!IsWritableStream(this)) {\n\t\t                return promiseRejectedWith(streamBrandCheckException$2('abort'));\n\t\t            }\n\t\t            if (IsWritableStreamLocked(this)) {\n\t\t                return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));\n\t\t            }\n\t\t            return WritableStreamAbort(this, reason);\n\t\t        }\n\t\t        /**\n\t\t         * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\n\t\t         * close behavior. During this time any further attempts to write will fail (without erroring the stream).\n\t\t         *\n\t\t         * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\n\t\t         * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\n\t\t         * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\n\t\t         */\n\t\t        close() {\n\t\t            if (!IsWritableStream(this)) {\n\t\t                return promiseRejectedWith(streamBrandCheckException$2('close'));\n\t\t            }\n\t\t            if (IsWritableStreamLocked(this)) {\n\t\t                return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));\n\t\t            }\n\t\t            if (WritableStreamCloseQueuedOrInFlight(this)) {\n\t\t                return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n\t\t            }\n\t\t            return WritableStreamClose(this);\n\t\t        }\n\t\t        /**\n\t\t         * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\n\t\t         * is locked, no other writer can be acquired until this one is released.\n\t\t         *\n\t\t         * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\n\t\t         * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\n\t\t         * the same time, which would cause the resulting written data to be unpredictable and probably useless.\n\t\t         */\n\t\t        getWriter() {\n\t\t            if (!IsWritableStream(this)) {\n\t\t                throw streamBrandCheckException$2('getWriter');\n\t\t            }\n\t\t            return AcquireWritableStreamDefaultWriter(this);\n\t\t        }\n\t\t    }\n\t\t    Object.defineProperties(WritableStream.prototype, {\n\t\t        abort: { enumerable: true },\n\t\t        close: { enumerable: true },\n\t\t        getWriter: { enumerable: true },\n\t\t        locked: { enumerable: true }\n\t\t    });\n\t\t    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n\t\t        Object.defineProperty(WritableStream.prototype, SymbolPolyfill.toStringTag, {\n\t\t            value: 'WritableStream',\n\t\t            configurable: true\n\t\t        });\n\t\t    }\n\t\t    // Abstract operations for the WritableStream.\n\t\t    function AcquireWritableStreamDefaultWriter(stream) {\n\t\t        return new WritableStreamDefaultWriter(stream);\n\t\t    }\n\t\t    // Throws if and only if startAlgorithm throws.\n\t\t    function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {\n\t\t        const stream = Object.create(WritableStream.prototype);\n\t\t        InitializeWritableStream(stream);\n\t\t        const controller = Object.create(WritableStreamDefaultController.prototype);\n\t\t        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n\t\t        return stream;\n\t\t    }\n\t\t    function InitializeWritableStream(stream) {\n\t\t        stream._state = 'writable';\n\t\t        // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n\t\t        // 'erroring' or 'errored'. May be set to an undefined value.\n\t\t        stream._storedError = undefined;\n\t\t        stream._writer = undefined;\n\t\t        // Initialize to undefined first because the constructor of the controller checks this\n\t\t        // variable to validate the caller.\n\t\t        stream._writableStreamController = undefined;\n\t\t        // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n\t\t        // producer without waiting for the queued writes to finish.\n\t\t        stream._writeRequests = new SimpleQueue();\n\t\t        // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n\t\t        // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n\t\t        stream._inFlightWriteRequest = undefined;\n\t\t        // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n\t\t        // has been detached.\n\t\t        stream._closeRequest = undefined;\n\t\t        // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n\t\t        // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n\t\t        stream._inFlightCloseRequest = undefined;\n\t\t        // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n\t\t        stream._pendingAbortRequest = undefined;\n\t\t        // The backpressure signal set by the controller.\n\t\t        stream._backpressure = false;\n\t\t    }\n\t\t    function IsWritableStream(x) {\n\t\t        if (!typeIsObject(x)) {\n\t\t            return false;\n\t\t        }\n\t\t        if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n\t\t            return false;\n\t\t        }\n\t\t        return x instanceof WritableStream;\n\t\t    }\n\t\t    function IsWritableStreamLocked(stream) {\n\t\t        if (stream._writer === undefined) {\n\t\t            return false;\n\t\t        }\n\t\t        return true;\n\t\t    }\n\t\t    function WritableStreamAbort(stream, reason) {\n\t\t        var _a;\n\t\t        if (stream._state === 'closed' || stream._state === 'errored') {\n\t\t            return promiseResolvedWith(undefined);\n\t\t        }\n\t\t        stream._writableStreamController._abortReason = reason;\n\t\t        (_a = stream._writableStreamController._abortController) === null || _a === void 0 ? void 0 : _a.abort();\n\t\t        // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',\n\t\t        // but it doesn't know that signaling abort runs author code that might have changed the state.\n\t\t        // Widen the type again by casting to WritableStreamState.\n\t\t        const state = stream._state;\n\t\t        if (state === 'closed' || state === 'errored') {\n\t\t            return promiseResolvedWith(undefined);\n\t\t        }\n\t\t        if (stream._pendingAbortRequest !== undefined) {\n\t\t            return stream._pendingAbortRequest._promise;\n\t\t        }\n\t\t        let wasAlreadyErroring = false;\n\t\t        if (state === 'erroring') {\n\t\t            wasAlreadyErroring = true;\n\t\t            // reason will not be used, so don't keep a reference to it.\n\t\t            reason = undefined;\n\t\t        }\n\t\t        const promise = newPromise((resolve, reject) => {\n\t\t            stream._pendingAbortRequest = {\n\t\t                _promise: undefined,\n\t\t                _resolve: resolve,\n\t\t                _reject: reject,\n\t\t                _reason: reason,\n\t\t                _wasAlreadyErroring: wasAlreadyErroring\n\t\t            };\n\t\t        });\n\t\t        stream._pendingAbortRequest._promise = promise;\n\t\t        if (!wasAlreadyErroring) {\n\t\t            WritableStreamStartErroring(stream, reason);\n\t\t        }\n\t\t        return promise;\n\t\t    }\n\t\t    function WritableStreamClose(stream) {\n\t\t        const state = stream._state;\n\t\t        if (state === 'closed' || state === 'errored') {\n\t\t            return promiseRejectedWith(new TypeError(`The stream (in ${state} state) is not in the writable state and cannot be closed`));\n\t\t        }\n\t\t        const promise = newPromise((resolve, reject) => {\n\t\t            const closeRequest = {\n\t\t                _resolve: resolve,\n\t\t                _reject: reject\n\t\t            };\n\t\t            stream._closeRequest = closeRequest;\n\t\t        });\n\t\t        const writer = stream._writer;\n\t\t        if (writer !== undefined && stream._backpressure && state === 'writable') {\n\t\t            defaultWriterReadyPromiseResolve(writer);\n\t\t        }\n\t\t        WritableStreamDefaultControllerClose(stream._writableStreamController);\n\t\t        return promise;\n\t\t    }\n\t\t    // WritableStream API exposed for controllers.\n\t\t    function WritableStreamAddWriteRequest(stream) {\n\t\t        const promise = newPromise((resolve, reject) => {\n\t\t            const writeRequest = {\n\t\t                _resolve: resolve,\n\t\t                _reject: reject\n\t\t            };\n\t\t            stream._writeRequests.push(writeRequest);\n\t\t        });\n\t\t        return promise;\n\t\t    }\n\t\t    function WritableStreamDealWithRejection(stream, error) {\n\t\t        const state = stream._state;\n\t\t        if (state === 'writable') {\n\t\t            WritableStreamStartErroring(stream, error);\n\t\t            return;\n\t\t        }\n\t\t        WritableStreamFinishErroring(stream);\n\t\t    }\n\t\t    function WritableStreamStartErroring(stream, reason) {\n\t\t        const controller = stream._writableStreamController;\n\t\t        stream._state = 'erroring';\n\t\t        stream._storedError = reason;\n\t\t        const writer = stream._writer;\n\t\t        if (writer !== undefined) {\n\t\t            WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n\t\t        }\n\t\t        if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n\t\t            WritableStreamFinishErroring(stream);\n\t\t        }\n\t\t    }\n\t\t    function WritableStreamFinishErroring(stream) {\n\t\t        stream._state = 'errored';\n\t\t        stream._writableStreamController[ErrorSteps]();\n\t\t        const storedError = stream._storedError;\n\t\t        stream._writeRequests.forEach(writeRequest => {\n\t\t            writeRequest._reject(storedError);\n\t\t        });\n\t\t        stream._writeRequests = new SimpleQueue();\n\t\t        if (stream._pendingAbortRequest === undefined) {\n\t\t            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n\t\t            return;\n\t\t        }\n\t\t        const abortRequest = stream._pendingAbortRequest;\n\t\t        stream._pendingAbortRequest = undefined;\n\t\t        if (abortRequest._wasAlreadyErroring) {\n\t\t            abortRequest._reject(storedError);\n\t\t            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n\t\t            return;\n\t\t        }\n\t\t        const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n\t\t        uponPromise(promise, () => {\n\t\t            abortRequest._resolve();\n\t\t            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n\t\t        }, (reason) => {\n\t\t            abortRequest._reject(reason);\n\t\t            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n\t\t        });\n\t\t    }\n\t\t    function WritableStreamFinishInFlightWrite(stream) {\n\t\t        stream._inFlightWriteRequest._resolve(undefined);\n\t\t        stream._inFlightWriteRequest = undefined;\n\t\t    }\n\t\t    function WritableStreamFinishInFlightWriteWithError(stream, error) {\n\t\t        stream._inFlightWriteRequest._reject(error);\n\t\t        stream._inFlightWriteRequest = undefined;\n\t\t        WritableStreamDealWithRejection(stream, error);\n\t\t    }\n\t\t    function WritableStreamFinishInFlightClose(stream) {\n\t\t        stream._inFlightCloseRequest._resolve(undefined);\n\t\t        stream._inFlightCloseRequest = undefined;\n\t\t        const state = stream._state;\n\t\t        if (state === 'erroring') {\n\t\t            // The error was too late to do anything, so it is ignored.\n\t\t            stream._storedError = undefined;\n\t\t            if (stream._pendingAbortRequest !== undefined) {\n\t\t                stream._pendingAbortRequest._resolve();\n\t\t                stream._pendingAbortRequest = undefined;\n\t\t            }\n\t\t        }\n\t\t        stream._state = 'closed';\n\t\t        const writer = stream._writer;\n\t\t        if (writer !== undefined) {\n\t\t            defaultWriterClosedPromiseResolve(writer);\n\t\t        }\n\t\t    }\n\t\t    function WritableStreamFinishInFlightCloseWithError(stream, error) {\n\t\t        stream._inFlightCloseRequest._reject(error);\n\t\t        stream._inFlightCloseRequest = undefined;\n\t\t        // Never execute sink abort() after sink close().\n\t\t        if (stream._pendingAbortRequest !== undefined) {\n\t\t            stream._pendingAbortRequest._reject(error);\n\t\t            stream._pendingAbortRequest = undefined;\n\t\t        }\n\t\t        WritableStreamDealWithRejection(stream, error);\n\t\t    }\n\t\t    // TODO(ricea): Fix alphabetical order.\n\t\t    function WritableStreamCloseQueuedOrInFlight(stream) {\n\t\t        if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n\t\t            return false;\n\t\t        }\n\t\t        return true;\n\t\t    }\n\t\t    function WritableStreamHasOperationMarkedInFlight(stream) {\n\t\t        if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n\t\t            return false;\n\t\t        }\n\t\t        return true;\n\t\t    }\n\t\t    function WritableStreamMarkCloseRequestInFlight(stream) {\n\t\t        stream._inFlightCloseRequest = stream._closeRequest;\n\t\t        stream._closeRequest = undefined;\n\t\t    }\n\t\t    function WritableStreamMarkFirstWriteRequestInFlight(stream) {\n\t\t        stream._inFlightWriteRequest = stream._writeRequests.shift();\n\t\t    }\n\t\t    function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {\n\t\t        if (stream._closeRequest !== undefined) {\n\t\t            stream._closeRequest._reject(stream._storedError);\n\t\t            stream._closeRequest = undefined;\n\t\t        }\n\t\t        const writer = stream._writer;\n\t\t        if (writer !== undefined) {\n\t\t            defaultWriterClosedPromiseReject(writer, stream._storedError);\n\t\t        }\n\t\t    }\n\t\t    function WritableStreamUpdateBackpressure(stream, backpressure) {\n\t\t        const writer = stream._writer;\n\t\t        if (writer !== undefined && backpressure !== stream._backpressure) {\n\t\t            if (backpressure) {\n\t\t                defaultWriterReadyPromiseReset(writer);\n\t\t            }\n\t\t            else {\n\t\t                defaultWriterReadyPromiseResolve(writer);\n\t\t            }\n\t\t        }\n\t\t        stream._backpressure = backpressure;\n\t\t    }\n\t\t    /**\n\t\t     * A default writer vended by a {@link WritableStream}.\n\t\t     *\n\t\t     * @public\n\t\t     */\n\t\t    class WritableStreamDefaultWriter {\n\t\t        constructor(stream) {\n\t\t            assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');\n\t\t            assertWritableStream(stream, 'First parameter');\n\t\t            if (IsWritableStreamLocked(stream)) {\n\t\t                throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n\t\t            }\n\t\t            this._ownerWritableStream = stream;\n\t\t            stream._writer = this;\n\t\t            const state = stream._state;\n\t\t            if (state === 'writable') {\n\t\t                if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n\t\t                    defaultWriterReadyPromiseInitialize(this);\n\t\t                }\n\t\t                else {\n\t\t                    defaultWriterReadyPromiseInitializeAsResolved(this);\n\t\t                }\n\t\t                defaultWriterClosedPromiseInitialize(this);\n\t\t            }\n\t\t            else if (state === 'erroring') {\n\t\t                defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n\t\t                defaultWriterClosedPromiseInitialize(this);\n\t\t            }\n\t\t            else if (state === 'closed') {\n\t\t                defaultWriterReadyPromiseInitializeAsResolved(this);\n\t\t                defaultWriterClosedPromiseInitializeAsResolved(this);\n\t\t            }\n\t\t            else {\n\t\t                const storedError = stream._storedError;\n\t\t                defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n\t\t                defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n\t\t            }\n\t\t        }\n\t\t        /**\n\t\t         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n\t\t         * the writer’s lock is released before the stream finishes closing.\n\t\t         */\n\t\t        get closed() {\n\t\t            if (!IsWritableStreamDefaultWriter(this)) {\n\t\t                return promiseRejectedWith(defaultWriterBrandCheckException('closed'));\n\t\t            }\n\t\t            return this._closedPromise;\n\t\t        }\n\t\t        /**\n\t\t         * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.\n\t\t         * A producer can use this information to determine the right amount of data to write.\n\t\t         *\n\t\t         * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\n\t\t         * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\n\t\t         * the writer’s lock is released.\n\t\t         */\n\t\t        get desiredSize() {\n\t\t            if (!IsWritableStreamDefaultWriter(this)) {\n\t\t                throw defaultWriterBrandCheckException('desiredSize');\n\t\t            }\n\t\t            if (this._ownerWritableStream === undefined) {\n\t\t                throw defaultWriterLockException('desiredSize');\n\t\t            }\n\t\t            return WritableStreamDefaultWriterGetDesiredSize(this);\n\t\t        }\n\t\t        /**\n\t\t         * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions\n\t\t         * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\n\t\t         * back to zero or below, the getter will return a new promise that stays pending until the next transition.\n\t\t         *\n\t\t         * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become\n\t\t         * rejected.\n\t\t         */\n\t\t        get ready() {\n\t\t            if (!IsWritableStreamDefaultWriter(this)) {\n\t\t                return promiseRejectedWith(defaultWriterBrandCheckException('ready'));\n\t\t            }\n\t\t            return this._readyPromise;\n\t\t        }\n\t\t        /**\n\t\t         * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\n\t\t         */\n\t\t        abort(reason = undefined) {\n\t\t            if (!IsWritableStreamDefaultWriter(this)) {\n\t\t                return promiseRejectedWith(defaultWriterBrandCheckException('abort'));\n\t\t            }\n\t\t            if (this._ownerWritableStream === undefined) {\n\t\t                return promiseRejectedWith(defaultWriterLockException('abort'));\n\t\t            }\n\t\t            return WritableStreamDefaultWriterAbort(this, reason);\n\t\t        }\n\t\t        /**\n\t\t         * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\n\t\t         */\n\t\t        close() {\n\t\t            if (!IsWritableStreamDefaultWriter(this)) {\n\t\t                return promiseRejectedWith(defaultWriterBrandCheckException('close'));\n\t\t            }\n\t\t            const stream = this._ownerWritableStream;\n\t\t            if (stream === undefined) {\n\t\t                return promiseRejectedWith(defaultWriterLockException('close'));\n\t\t            }\n\t\t            if (WritableStreamCloseQueuedOrInFlight(stream)) {\n\t\t                return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n\t\t            }\n\t\t            return WritableStreamDefaultWriterClose(this);\n\t\t        }\n\t\t        /**\n\t\t         * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.\n\t\t         * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\n\t\t         * now on; otherwise, the writer will appear closed.\n\t\t         *\n\t\t         * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\n\t\t         * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\n\t\t         * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\n\t\t         * other producers from writing in an interleaved manner.\n\t\t         */\n\t\t        releaseLock() {\n\t\t            if (!IsWritableStreamDefaultWriter(this)) {\n\t\t                throw defaultWriterBrandCheckException('releaseLock');\n\t\t            }\n\t\t            const stream = this._ownerWritableStream;\n\t\t            if (stream === undefined) {\n\t\t                return;\n\t\t            }\n\t\t            WritableStreamDefaultWriterRelease(this);\n\t\t        }\n\t\t        write(chunk = undefined) {\n\t\t            if (!IsWritableStreamDefaultWriter(this)) {\n\t\t                return promiseRejectedWith(defaultWriterBrandCheckException('write'));\n\t\t            }\n\t\t            if (this._ownerWritableStream === undefined) {\n\t\t                return promiseRejectedWith(defaultWriterLockException('write to'));\n\t\t            }\n\t\t            return WritableStreamDefaultWriterWrite(this, chunk);\n\t\t        }\n\t\t    }\n\t\t    Object.defineProperties(WritableStreamDefaultWriter.prototype, {\n\t\t        abort: { enumerable: true },\n\t\t        close: { enumerable: true },\n\t\t        releaseLock: { enumerable: true },\n\t\t        write: { enumerable: true },\n\t\t        closed: { enumerable: true },\n\t\t        desiredSize: { enumerable: true },\n\t\t        ready: { enumerable: true }\n\t\t    });\n\t\t    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n\t\t        Object.defineProperty(WritableStreamDefaultWriter.prototype, SymbolPolyfill.toStringTag, {\n\t\t            value: 'WritableStreamDefaultWriter',\n\t\t            configurable: true\n\t\t        });\n\t\t    }\n\t\t    // Abstract operations for the WritableStreamDefaultWriter.\n\t\t    function IsWritableStreamDefaultWriter(x) {\n\t\t        if (!typeIsObject(x)) {\n\t\t            return false;\n\t\t        }\n\t\t        if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n\t\t            return false;\n\t\t        }\n\t\t        return x instanceof WritableStreamDefaultWriter;\n\t\t    }\n\t\t    // A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n\t\t    function WritableStreamDefaultWriterAbort(writer, reason) {\n\t\t        const stream = writer._ownerWritableStream;\n\t\t        return WritableStreamAbort(stream, reason);\n\t\t    }\n\t\t    function WritableStreamDefaultWriterClose(writer) {\n\t\t        const stream = writer._ownerWritableStream;\n\t\t        return WritableStreamClose(stream);\n\t\t    }\n\t\t    function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {\n\t\t        const stream = writer._ownerWritableStream;\n\t\t        const state = stream._state;\n\t\t        if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n\t\t            return promiseResolvedWith(undefined);\n\t\t        }\n\t\t        if (state === 'errored') {\n\t\t            return promiseRejectedWith(stream._storedError);\n\t\t        }\n\t\t        return WritableStreamDefaultWriterClose(writer);\n\t\t    }\n\t\t    function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {\n\t\t        if (writer._closedPromiseState === 'pending') {\n\t\t            defaultWriterClosedPromiseReject(writer, error);\n\t\t        }\n\t\t        else {\n\t\t            defaultWriterClosedPromiseResetToRejected(writer, error);\n\t\t        }\n\t\t    }\n\t\t    function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {\n\t\t        if (writer._readyPromiseState === 'pending') {\n\t\t            defaultWriterReadyPromiseReject(writer, error);\n\t\t        }\n\t\t        else {\n\t\t            defaultWriterReadyPromiseResetToRejected(writer, error);\n\t\t        }\n\t\t    }\n\t\t    function WritableStreamDefaultWriterGetDesiredSize(writer) {\n\t\t        const stream = writer._ownerWritableStream;\n\t\t        const state = stream._state;\n\t\t        if (state === 'errored' || state === 'erroring') {\n\t\t            return null;\n\t\t        }\n\t\t        if (state === 'closed') {\n\t\t            return 0;\n\t\t        }\n\t\t        return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n\t\t    }\n\t\t    function WritableStreamDefaultWriterRelease(writer) {\n\t\t        const stream = writer._ownerWritableStream;\n\t\t        const releasedError = new TypeError(`Writer was released and can no longer be used to monitor the stream's closedness`);\n\t\t        WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n\t\t        // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n\t\t        // rejected until afterwards. This means that simply testing state will not work.\n\t\t        WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n\t\t        stream._writer = undefined;\n\t\t        writer._ownerWritableStream = undefined;\n\t\t    }\n\t\t    function WritableStreamDefaultWriterWrite(writer, chunk) {\n\t\t        const stream = writer._ownerWritableStream;\n\t\t        const controller = stream._writableStreamController;\n\t\t        const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n\t\t        if (stream !== writer._ownerWritableStream) {\n\t\t            return promiseRejectedWith(defaultWriterLockException('write to'));\n\t\t        }\n\t\t        const state = stream._state;\n\t\t        if (state === 'errored') {\n\t\t            return promiseRejectedWith(stream._storedError);\n\t\t        }\n\t\t        if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n\t\t            return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));\n\t\t        }\n\t\t        if (state === 'erroring') {\n\t\t            return promiseRejectedWith(stream._storedError);\n\t\t        }\n\t\t        const promise = WritableStreamAddWriteRequest(stream);\n\t\t        WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n\t\t        return promise;\n\t\t    }\n\t\t    const closeSentinel = {};\n\t\t    /**\n\t\t     * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\n\t\t     *\n\t\t     * @public\n\t\t     */\n\t\t    class WritableStreamDefaultController {\n\t\t        constructor() {\n\t\t            throw new TypeError('Illegal constructor');\n\t\t        }\n\t\t        /**\n\t\t         * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.\n\t\t         *\n\t\t         * @deprecated\n\t\t         *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.\n\t\t         *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.\n\t\t         */\n\t\t        get abortReason() {\n\t\t            if (!IsWritableStreamDefaultController(this)) {\n\t\t                throw defaultControllerBrandCheckException$2('abortReason');\n\t\t            }\n\t\t            return this._abortReason;\n\t\t        }\n\t\t        /**\n\t\t         * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.\n\t\t         */\n\t\t        get signal() {\n\t\t            if (!IsWritableStreamDefaultController(this)) {\n\t\t                throw defaultControllerBrandCheckException$2('signal');\n\t\t            }\n\t\t            if (this._abortController === undefined) {\n\t\t                // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.\n\t\t                // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,\n\t\t                // so instead we only implement support for `signal` if we find a global `AbortController` constructor.\n\t\t                throw new TypeError('WritableStreamDefaultController.prototype.signal is not supported');\n\t\t            }\n\t\t            return this._abortController.signal;\n\t\t        }\n\t\t        /**\n\t\t         * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\n\t\t         *\n\t\t         * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\n\t\t         * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\n\t\t         * normal lifecycle of interactions with the underlying sink.\n\t\t         */\n\t\t        error(e = undefined) {\n\t\t            if (!IsWritableStreamDefaultController(this)) {\n\t\t                throw defaultControllerBrandCheckException$2('error');\n\t\t            }\n\t\t            const state = this._controlledWritableStream._state;\n\t\t            if (state !== 'writable') {\n\t\t                // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n\t\t                // just treat it as a no-op.\n\t\t                return;\n\t\t            }\n\t\t            WritableStreamDefaultControllerError(this, e);\n\t\t        }\n\t\t        /** @internal */\n\t\t        [AbortSteps](reason) {\n\t\t            const result = this._abortAlgorithm(reason);\n\t\t            WritableStreamDefaultControllerClearAlgorithms(this);\n\t\t            return result;\n\t\t        }\n\t\t        /** @internal */\n\t\t        [ErrorSteps]() {\n\t\t            ResetQueue(this);\n\t\t        }\n\t\t    }\n\t\t    Object.defineProperties(WritableStreamDefaultController.prototype, {\n\t\t        abortReason: { enumerable: true },\n\t\t        signal: { enumerable: true },\n\t\t        error: { enumerable: true }\n\t\t    });\n\t\t    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n\t\t        Object.defineProperty(WritableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n\t\t            value: 'WritableStreamDefaultController',\n\t\t            configurable: true\n\t\t        });\n\t\t    }\n\t\t    // Abstract operations implementing interface required by the WritableStream.\n\t\t    function IsWritableStreamDefaultController(x) {\n\t\t        if (!typeIsObject(x)) {\n\t\t            return false;\n\t\t        }\n\t\t        if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n\t\t            return false;\n\t\t        }\n\t\t        return x instanceof WritableStreamDefaultController;\n\t\t    }\n\t\t    function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {\n\t\t        controller._controlledWritableStream = stream;\n\t\t        stream._writableStreamController = controller;\n\t\t        // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n\t\t        controller._queue = undefined;\n\t\t        controller._queueTotalSize = undefined;\n\t\t        ResetQueue(controller);\n\t\t        controller._abortReason = undefined;\n\t\t        controller._abortController = createAbortController();\n\t\t        controller._started = false;\n\t\t        controller._strategySizeAlgorithm = sizeAlgorithm;\n\t\t        controller._strategyHWM = highWaterMark;\n\t\t        controller._writeAlgorithm = writeAlgorithm;\n\t\t        controller._closeAlgorithm = closeAlgorithm;\n\t\t        controller._abortAlgorithm = abortAlgorithm;\n\t\t        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n\t\t        WritableStreamUpdateBackpressure(stream, backpressure);\n\t\t        const startResult = startAlgorithm();\n\t\t        const startPromise = promiseResolvedWith(startResult);\n\t\t        uponPromise(startPromise, () => {\n\t\t            controller._started = true;\n\t\t            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n\t\t        }, r => {\n\t\t            controller._started = true;\n\t\t            WritableStreamDealWithRejection(stream, r);\n\t\t        });\n\t\t    }\n\t\t    function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {\n\t\t        const controller = Object.create(WritableStreamDefaultController.prototype);\n\t\t        let startAlgorithm = () => undefined;\n\t\t        let writeAlgorithm = () => promiseResolvedWith(undefined);\n\t\t        let closeAlgorithm = () => promiseResolvedWith(undefined);\n\t\t        let abortAlgorithm = () => promiseResolvedWith(undefined);\n\t\t        if (underlyingSink.start !== undefined) {\n\t\t            startAlgorithm = () => underlyingSink.start(controller);\n\t\t        }\n\t\t        if (underlyingSink.write !== undefined) {\n\t\t            writeAlgorithm = chunk => underlyingSink.write(chunk, controller);\n\t\t        }\n\t\t        if (underlyingSink.close !== undefined) {\n\t\t            closeAlgorithm = () => underlyingSink.close();\n\t\t        }\n\t\t        if (underlyingSink.abort !== undefined) {\n\t\t            abortAlgorithm = reason => underlyingSink.abort(reason);\n\t\t        }\n\t\t        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n\t\t    }\n\t\t    // ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\n\t\t    function WritableStreamDefaultControllerClearAlgorithms(controller) {\n\t\t        controller._writeAlgorithm = undefined;\n\t\t        controller._closeAlgorithm = undefined;\n\t\t        controller._abortAlgorithm = undefined;\n\t\t        controller._strategySizeAlgorithm = undefined;\n\t\t    }\n\t\t    function WritableStreamDefaultControllerClose(controller) {\n\t\t        EnqueueValueWithSize(controller, closeSentinel, 0);\n\t\t        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n\t\t    }\n\t\t    function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {\n\t\t        try {\n\t\t            return controller._strategySizeAlgorithm(chunk);\n\t\t        }\n\t\t        catch (chunkSizeE) {\n\t\t            WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n\t\t            return 1;\n\t\t        }\n\t\t    }\n\t\t    function WritableStreamDefaultControllerGetDesiredSize(controller) {\n\t\t        return controller._strategyHWM - controller._queueTotalSize;\n\t\t    }\n\t\t    function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {\n\t\t        try {\n\t\t            EnqueueValueWithSize(controller, chunk, chunkSize);\n\t\t        }\n\t\t        catch (enqueueE) {\n\t\t            WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n\t\t            return;\n\t\t        }\n\t\t        const stream = controller._controlledWritableStream;\n\t\t        if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {\n\t\t            const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n\t\t            WritableStreamUpdateBackpressure(stream, backpressure);\n\t\t        }\n\t\t        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n\t\t    }\n\t\t    // Abstract operations for the WritableStreamDefaultController.\n\t\t    function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {\n\t\t        const stream = controller._controlledWritableStream;\n\t\t        if (!controller._started) {\n\t\t            return;\n\t\t        }\n\t\t        if (stream._inFlightWriteRequest !== undefined) {\n\t\t            return;\n\t\t        }\n\t\t        const state = stream._state;\n\t\t        if (state === 'erroring') {\n\t\t            WritableStreamFinishErroring(stream);\n\t\t            return;\n\t\t        }\n\t\t        if (controller._queue.length === 0) {\n\t\t            return;\n\t\t        }\n\t\t        const value = PeekQueueValue(controller);\n\t\t        if (value === closeSentinel) {\n\t\t            WritableStreamDefaultControllerProcessClose(controller);\n\t\t        }\n\t\t        else {\n\t\t            WritableStreamDefaultControllerProcessWrite(controller, value);\n\t\t        }\n\t\t    }\n\t\t    function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {\n\t\t        if (controller._controlledWritableStream._state === 'writable') {\n\t\t            WritableStreamDefaultControllerError(controller, error);\n\t\t        }\n\t\t    }\n\t\t    function WritableStreamDefaultControllerProcessClose(controller) {\n\t\t        const stream = controller._controlledWritableStream;\n\t\t        WritableStreamMarkCloseRequestInFlight(stream);\n\t\t        DequeueValue(controller);\n\t\t        const sinkClosePromise = controller._closeAlgorithm();\n\t\t        WritableStreamDefaultControllerClearAlgorithms(controller);\n\t\t        uponPromise(sinkClosePromise, () => {\n\t\t            WritableStreamFinishInFlightClose(stream);\n\t\t        }, reason => {\n\t\t            WritableStreamFinishInFlightCloseWithError(stream, reason);\n\t\t        });\n\t\t    }\n\t\t    function WritableStreamDefaultControllerProcessWrite(controller, chunk) {\n\t\t        const stream = controller._controlledWritableStream;\n\t\t        WritableStreamMarkFirstWriteRequestInFlight(stream);\n\t\t        const sinkWritePromise = controller._writeAlgorithm(chunk);\n\t\t        uponPromise(sinkWritePromise, () => {\n\t\t            WritableStreamFinishInFlightWrite(stream);\n\t\t            const state = stream._state;\n\t\t            DequeueValue(controller);\n\t\t            if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {\n\t\t                const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n\t\t                WritableStreamUpdateBackpressure(stream, backpressure);\n\t\t            }\n\t\t            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n\t\t        }, reason => {\n\t\t            if (stream._state === 'writable') {\n\t\t                WritableStreamDefaultControllerClearAlgorithms(controller);\n\t\t            }\n\t\t            WritableStreamFinishInFlightWriteWithError(stream, reason);\n\t\t        });\n\t\t    }\n\t\t    function WritableStreamDefaultControllerGetBackpressure(controller) {\n\t\t        const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n\t\t        return desiredSize <= 0;\n\t\t    }\n\t\t    // A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n\t\t    function WritableStreamDefaultControllerError(controller, error) {\n\t\t        const stream = controller._controlledWritableStream;\n\t\t        WritableStreamDefaultControllerClearAlgorithms(controller);\n\t\t        WritableStreamStartErroring(stream, error);\n\t\t    }\n\t\t    // Helper functions for the WritableStream.\n\t\t    function streamBrandCheckException$2(name) {\n\t\t        return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\n\t\t    }\n\t\t    // Helper functions for the WritableStreamDefaultController.\n\t\t    function defaultControllerBrandCheckException$2(name) {\n\t\t        return new TypeError(`WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);\n\t\t    }\n\t\t    // Helper functions for the WritableStreamDefaultWriter.\n\t\t    function defaultWriterBrandCheckException(name) {\n\t\t        return new TypeError(`WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\n\t\t    }\n\t\t    function defaultWriterLockException(name) {\n\t\t        return new TypeError('Cannot ' + name + ' a stream using a released writer');\n\t\t    }\n\t\t    function defaultWriterClosedPromiseInitialize(writer) {\n\t\t        writer._closedPromise = newPromise((resolve, reject) => {\n\t\t            writer._closedPromise_resolve = resolve;\n\t\t            writer._closedPromise_reject = reject;\n\t\t            writer._closedPromiseState = 'pending';\n\t\t        });\n\t\t    }\n\t\t    function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {\n\t\t        defaultWriterClosedPromiseInitialize(writer);\n\t\t        defaultWriterClosedPromiseReject(writer, reason);\n\t\t    }\n\t\t    function defaultWriterClosedPromiseInitializeAsResolved(writer) {\n\t\t        defaultWriterClosedPromiseInitialize(writer);\n\t\t        defaultWriterClosedPromiseResolve(writer);\n\t\t    }\n\t\t    function defaultWriterClosedPromiseReject(writer, reason) {\n\t\t        if (writer._closedPromise_reject === undefined) {\n\t\t            return;\n\t\t        }\n\t\t        setPromiseIsHandledToTrue(writer._closedPromise);\n\t\t        writer._closedPromise_reject(reason);\n\t\t        writer._closedPromise_resolve = undefined;\n\t\t        writer._closedPromise_reject = undefined;\n\t\t        writer._closedPromiseState = 'rejected';\n\t\t    }\n\t\t    function defaultWriterClosedPromiseResetToRejected(writer, reason) {\n\t\t        defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n\t\t    }\n\t\t    function defaultWriterClosedPromiseResolve(writer) {\n\t\t        if (writer._closedPromise_resolve === undefined) {\n\t\t            return;\n\t\t        }\n\t\t        writer._closedPromise_resolve(undefined);\n\t\t        writer._closedPromise_resolve = undefined;\n\t\t        writer._closedPromise_reject = undefined;\n\t\t        writer._closedPromiseState = 'resolved';\n\t\t    }\n\t\t    function defaultWriterReadyPromiseInitialize(writer) {\n\t\t        writer._readyPromise = newPromise((resolve, reject) => {\n\t\t            writer._readyPromise_resolve = resolve;\n\t\t            writer._readyPromise_reject = reject;\n\t\t        });\n\t\t        writer._readyPromiseState = 'pending';\n\t\t    }\n\t\t    function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {\n\t\t        defaultWriterReadyPromiseInitialize(writer);\n\t\t        defaultWriterReadyPromiseReject(writer, reason);\n\t\t    }\n\t\t    function defaultWriterReadyPromiseInitializeAsResolved(writer) {\n\t\t        defaultWriterReadyPromiseInitialize(writer);\n\t\t        defaultWriterReadyPromiseResolve(writer);\n\t\t    }\n\t\t    function defaultWriterReadyPromiseReject(writer, reason) {\n\t\t        if (writer._readyPromise_reject === undefined) {\n\t\t            return;\n\t\t        }\n\t\t        setPromiseIsHandledToTrue(writer._readyPromise);\n\t\t        writer._readyPromise_reject(reason);\n\t\t        writer._readyPromise_resolve = undefined;\n\t\t        writer._readyPromise_reject = undefined;\n\t\t        writer._readyPromiseState = 'rejected';\n\t\t    }\n\t\t    function defaultWriterReadyPromiseReset(writer) {\n\t\t        defaultWriterReadyPromiseInitialize(writer);\n\t\t    }\n\t\t    function defaultWriterReadyPromiseResetToRejected(writer, reason) {\n\t\t        defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n\t\t    }\n\t\t    function defaultWriterReadyPromiseResolve(writer) {\n\t\t        if (writer._readyPromise_resolve === undefined) {\n\t\t            return;\n\t\t        }\n\t\t        writer._readyPromise_resolve(undefined);\n\t\t        writer._readyPromise_resolve = undefined;\n\t\t        writer._readyPromise_reject = undefined;\n\t\t        writer._readyPromiseState = 'fulfilled';\n\t\t    }\n\n\t\t    /// <reference lib=\"dom\" />\n\t\t    const NativeDOMException = typeof DOMException !== 'undefined' ? DOMException : undefined;\n\n\t\t    /// <reference types=\"node\" />\n\t\t    function isDOMExceptionConstructor(ctor) {\n\t\t        if (!(typeof ctor === 'function' || typeof ctor === 'object')) {\n\t\t            return false;\n\t\t        }\n\t\t        try {\n\t\t            new ctor();\n\t\t            return true;\n\t\t        }\n\t\t        catch (_a) {\n\t\t            return false;\n\t\t        }\n\t\t    }\n\t\t    function createDOMExceptionPolyfill() {\n\t\t        // eslint-disable-next-line no-shadow\n\t\t        const ctor = function DOMException(message, name) {\n\t\t            this.message = message || '';\n\t\t            this.name = name || 'Error';\n\t\t            if (Error.captureStackTrace) {\n\t\t                Error.captureStackTrace(this, this.constructor);\n\t\t            }\n\t\t        };\n\t\t        ctor.prototype = Object.create(Error.prototype);\n\t\t        Object.defineProperty(ctor.prototype, 'constructor', { value: ctor, writable: true, configurable: true });\n\t\t        return ctor;\n\t\t    }\n\t\t    // eslint-disable-next-line no-redeclare\n\t\t    const DOMException$1 = isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();\n\n\t\t    function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {\n\t\t        const reader = AcquireReadableStreamDefaultReader(source);\n\t\t        const writer = AcquireWritableStreamDefaultWriter(dest);\n\t\t        source._disturbed = true;\n\t\t        let shuttingDown = false;\n\t\t        // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n\t\t        let currentWrite = promiseResolvedWith(undefined);\n\t\t        return newPromise((resolve, reject) => {\n\t\t            let abortAlgorithm;\n\t\t            if (signal !== undefined) {\n\t\t                abortAlgorithm = () => {\n\t\t                    const error = new DOMException$1('Aborted', 'AbortError');\n\t\t                    const actions = [];\n\t\t                    if (!preventAbort) {\n\t\t                        actions.push(() => {\n\t\t                            if (dest._state === 'writable') {\n\t\t                                return WritableStreamAbort(dest, error);\n\t\t                            }\n\t\t                            return promiseResolvedWith(undefined);\n\t\t                        });\n\t\t                    }\n\t\t                    if (!preventCancel) {\n\t\t                        actions.push(() => {\n\t\t                            if (source._state === 'readable') {\n\t\t                                return ReadableStreamCancel(source, error);\n\t\t                            }\n\t\t                            return promiseResolvedWith(undefined);\n\t\t                        });\n\t\t                    }\n\t\t                    shutdownWithAction(() => Promise.all(actions.map(action => action())), true, error);\n\t\t                };\n\t\t                if (signal.aborted) {\n\t\t                    abortAlgorithm();\n\t\t                    return;\n\t\t                }\n\t\t                signal.addEventListener('abort', abortAlgorithm);\n\t\t            }\n\t\t            // Using reader and writer, read all chunks from this and write them to dest\n\t\t            // - Backpressure must be enforced\n\t\t            // - Shutdown must stop all activity\n\t\t            function pipeLoop() {\n\t\t                return newPromise((resolveLoop, rejectLoop) => {\n\t\t                    function next(done) {\n\t\t                        if (done) {\n\t\t                            resolveLoop();\n\t\t                        }\n\t\t                        else {\n\t\t                            // Use `PerformPromiseThen` instead of `uponPromise` to avoid\n\t\t                            // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\n\t\t                            PerformPromiseThen(pipeStep(), next, rejectLoop);\n\t\t                        }\n\t\t                    }\n\t\t                    next(false);\n\t\t                });\n\t\t            }\n\t\t            function pipeStep() {\n\t\t                if (shuttingDown) {\n\t\t                    return promiseResolvedWith(true);\n\t\t                }\n\t\t                return PerformPromiseThen(writer._readyPromise, () => {\n\t\t                    return newPromise((resolveRead, rejectRead) => {\n\t\t                        ReadableStreamDefaultReaderRead(reader, {\n\t\t                            _chunkSteps: chunk => {\n\t\t                                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n\t\t                                resolveRead(false);\n\t\t                            },\n\t\t                            _closeSteps: () => resolveRead(true),\n\t\t                            _errorSteps: rejectRead\n\t\t                        });\n\t\t                    });\n\t\t                });\n\t\t            }\n\t\t            // Errors must be propagated forward\n\t\t            isOrBecomesErrored(source, reader._closedPromise, storedError => {\n\t\t                if (!preventAbort) {\n\t\t                    shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);\n\t\t                }\n\t\t                else {\n\t\t                    shutdown(true, storedError);\n\t\t                }\n\t\t            });\n\t\t            // Errors must be propagated backward\n\t\t            isOrBecomesErrored(dest, writer._closedPromise, storedError => {\n\t\t                if (!preventCancel) {\n\t\t                    shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);\n\t\t                }\n\t\t                else {\n\t\t                    shutdown(true, storedError);\n\t\t                }\n\t\t            });\n\t\t            // Closing must be propagated forward\n\t\t            isOrBecomesClosed(source, reader._closedPromise, () => {\n\t\t                if (!preventClose) {\n\t\t                    shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\n\t\t                }\n\t\t                else {\n\t\t                    shutdown();\n\t\t                }\n\t\t            });\n\t\t            // Closing must be propagated backward\n\t\t            if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {\n\t\t                const destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');\n\t\t                if (!preventCancel) {\n\t\t                    shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);\n\t\t                }\n\t\t                else {\n\t\t                    shutdown(true, destClosed);\n\t\t                }\n\t\t            }\n\t\t            setPromiseIsHandledToTrue(pipeLoop());\n\t\t            function waitForWritesToFinish() {\n\t\t                // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n\t\t                // for that too.\n\t\t                const oldCurrentWrite = currentWrite;\n\t\t                return PerformPromiseThen(currentWrite, () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined);\n\t\t            }\n\t\t            function isOrBecomesErrored(stream, promise, action) {\n\t\t                if (stream._state === 'errored') {\n\t\t                    action(stream._storedError);\n\t\t                }\n\t\t                else {\n\t\t                    uponRejection(promise, action);\n\t\t                }\n\t\t            }\n\t\t            function isOrBecomesClosed(stream, promise, action) {\n\t\t                if (stream._state === 'closed') {\n\t\t                    action();\n\t\t                }\n\t\t                else {\n\t\t                    uponFulfillment(promise, action);\n\t\t                }\n\t\t            }\n\t\t            function shutdownWithAction(action, originalIsError, originalError) {\n\t\t                if (shuttingDown) {\n\t\t                    return;\n\t\t                }\n\t\t                shuttingDown = true;\n\t\t                if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n\t\t                    uponFulfillment(waitForWritesToFinish(), doTheRest);\n\t\t                }\n\t\t                else {\n\t\t                    doTheRest();\n\t\t                }\n\t\t                function doTheRest() {\n\t\t                    uponPromise(action(), () => finalize(originalIsError, originalError), newError => finalize(true, newError));\n\t\t                }\n\t\t            }\n\t\t            function shutdown(isError, error) {\n\t\t                if (shuttingDown) {\n\t\t                    return;\n\t\t                }\n\t\t                shuttingDown = true;\n\t\t                if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n\t\t                    uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));\n\t\t                }\n\t\t                else {\n\t\t                    finalize(isError, error);\n\t\t                }\n\t\t            }\n\t\t            function finalize(isError, error) {\n\t\t                WritableStreamDefaultWriterRelease(writer);\n\t\t                ReadableStreamReaderGenericRelease(reader);\n\t\t                if (signal !== undefined) {\n\t\t                    signal.removeEventListener('abort', abortAlgorithm);\n\t\t                }\n\t\t                if (isError) {\n\t\t                    reject(error);\n\t\t                }\n\t\t                else {\n\t\t                    resolve(undefined);\n\t\t                }\n\t\t            }\n\t\t        });\n\t\t    }\n\n\t\t    /**\n\t\t     * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\n\t\t     *\n\t\t     * @public\n\t\t     */\n\t\t    class ReadableStreamDefaultController {\n\t\t        constructor() {\n\t\t            throw new TypeError('Illegal constructor');\n\t\t        }\n\t\t        /**\n\t\t         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n\t\t         * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\n\t\t         */\n\t\t        get desiredSize() {\n\t\t            if (!IsReadableStreamDefaultController(this)) {\n\t\t                throw defaultControllerBrandCheckException$1('desiredSize');\n\t\t            }\n\t\t            return ReadableStreamDefaultControllerGetDesiredSize(this);\n\t\t        }\n\t\t        /**\n\t\t         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n\t\t         * the stream, but once those are read, the stream will become closed.\n\t\t         */\n\t\t        close() {\n\t\t            if (!IsReadableStreamDefaultController(this)) {\n\t\t                throw defaultControllerBrandCheckException$1('close');\n\t\t            }\n\t\t            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n\t\t                throw new TypeError('The stream is not in a state that permits close');\n\t\t            }\n\t\t            ReadableStreamDefaultControllerClose(this);\n\t\t        }\n\t\t        enqueue(chunk = undefined) {\n\t\t            if (!IsReadableStreamDefaultController(this)) {\n\t\t                throw defaultControllerBrandCheckException$1('enqueue');\n\t\t            }\n\t\t            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n\t\t                throw new TypeError('The stream is not in a state that permits enqueue');\n\t\t            }\n\t\t            return ReadableStreamDefaultControllerEnqueue(this, chunk);\n\t\t        }\n\t\t        /**\n\t\t         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n\t\t         */\n\t\t        error(e = undefined) {\n\t\t            if (!IsReadableStreamDefaultController(this)) {\n\t\t                throw defaultControllerBrandCheckException$1('error');\n\t\t            }\n\t\t            ReadableStreamDefaultControllerError(this, e);\n\t\t        }\n\t\t        /** @internal */\n\t\t        [CancelSteps](reason) {\n\t\t            ResetQueue(this);\n\t\t            const result = this._cancelAlgorithm(reason);\n\t\t            ReadableStreamDefaultControllerClearAlgorithms(this);\n\t\t            return result;\n\t\t        }\n\t\t        /** @internal */\n\t\t        [PullSteps](readRequest) {\n\t\t            const stream = this._controlledReadableStream;\n\t\t            if (this._queue.length > 0) {\n\t\t                const chunk = DequeueValue(this);\n\t\t                if (this._closeRequested && this._queue.length === 0) {\n\t\t                    ReadableStreamDefaultControllerClearAlgorithms(this);\n\t\t                    ReadableStreamClose(stream);\n\t\t                }\n\t\t                else {\n\t\t                    ReadableStreamDefaultControllerCallPullIfNeeded(this);\n\t\t                }\n\t\t                readRequest._chunkSteps(chunk);\n\t\t            }\n\t\t            else {\n\t\t                ReadableStreamAddReadRequest(stream, readRequest);\n\t\t                ReadableStreamDefaultControllerCallPullIfNeeded(this);\n\t\t            }\n\t\t        }\n\t\t    }\n\t\t    Object.defineProperties(ReadableStreamDefaultController.prototype, {\n\t\t        close: { enumerable: true },\n\t\t        enqueue: { enumerable: true },\n\t\t        error: { enumerable: true },\n\t\t        desiredSize: { enumerable: true }\n\t\t    });\n\t\t    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n\t\t        Object.defineProperty(ReadableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n\t\t            value: 'ReadableStreamDefaultController',\n\t\t            configurable: true\n\t\t        });\n\t\t    }\n\t\t    // Abstract operations for the ReadableStreamDefaultController.\n\t\t    function IsReadableStreamDefaultController(x) {\n\t\t        if (!typeIsObject(x)) {\n\t\t            return false;\n\t\t        }\n\t\t        if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n\t\t            return false;\n\t\t        }\n\t\t        return x instanceof ReadableStreamDefaultController;\n\t\t    }\n\t\t    function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {\n\t\t        const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n\t\t        if (!shouldPull) {\n\t\t            return;\n\t\t        }\n\t\t        if (controller._pulling) {\n\t\t            controller._pullAgain = true;\n\t\t            return;\n\t\t        }\n\t\t        controller._pulling = true;\n\t\t        const pullPromise = controller._pullAlgorithm();\n\t\t        uponPromise(pullPromise, () => {\n\t\t            controller._pulling = false;\n\t\t            if (controller._pullAgain) {\n\t\t                controller._pullAgain = false;\n\t\t                ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n\t\t            }\n\t\t        }, e => {\n\t\t            ReadableStreamDefaultControllerError(controller, e);\n\t\t        });\n\t\t    }\n\t\t    function ReadableStreamDefaultControllerShouldCallPull(controller) {\n\t\t        const stream = controller._controlledReadableStream;\n\t\t        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n\t\t            return false;\n\t\t        }\n\t\t        if (!controller._started) {\n\t\t            return false;\n\t\t        }\n\t\t        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n\t\t            return true;\n\t\t        }\n\t\t        const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n\t\t        if (desiredSize > 0) {\n\t\t            return true;\n\t\t        }\n\t\t        return false;\n\t\t    }\n\t\t    function ReadableStreamDefaultControllerClearAlgorithms(controller) {\n\t\t        controller._pullAlgorithm = undefined;\n\t\t        controller._cancelAlgorithm = undefined;\n\t\t        controller._strategySizeAlgorithm = undefined;\n\t\t    }\n\t\t    // A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n\t\t    function ReadableStreamDefaultControllerClose(controller) {\n\t\t        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n\t\t            return;\n\t\t        }\n\t\t        const stream = controller._controlledReadableStream;\n\t\t        controller._closeRequested = true;\n\t\t        if (controller._queue.length === 0) {\n\t\t            ReadableStreamDefaultControllerClearAlgorithms(controller);\n\t\t            ReadableStreamClose(stream);\n\t\t        }\n\t\t    }\n\t\t    function ReadableStreamDefaultControllerEnqueue(controller, chunk) {\n\t\t        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n\t\t            return;\n\t\t        }\n\t\t        const stream = controller._controlledReadableStream;\n\t\t        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n\t\t            ReadableStreamFulfillReadRequest(stream, chunk, false);\n\t\t        }\n\t\t        else {\n\t\t            let chunkSize;\n\t\t            try {\n\t\t                chunkSize = controller._strategySizeAlgorithm(chunk);\n\t\t            }\n\t\t            catch (chunkSizeE) {\n\t\t                ReadableStreamDefaultControllerError(controller, chunkSizeE);\n\t\t                throw chunkSizeE;\n\t\t            }\n\t\t            try {\n\t\t                EnqueueValueWithSize(controller, chunk, chunkSize);\n\t\t            }\n\t\t            catch (enqueueE) {\n\t\t                ReadableStreamDefaultControllerError(controller, enqueueE);\n\t\t                throw enqueueE;\n\t\t            }\n\t\t        }\n\t\t        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n\t\t    }\n\t\t    function ReadableStreamDefaultControllerError(controller, e) {\n\t\t        const stream = controller._controlledReadableStream;\n\t\t        if (stream._state !== 'readable') {\n\t\t            return;\n\t\t        }\n\t\t        ResetQueue(controller);\n\t\t        ReadableStreamDefaultControllerClearAlgorithms(controller);\n\t\t        ReadableStreamError(stream, e);\n\t\t    }\n\t\t    function ReadableStreamDefaultControllerGetDesiredSize(controller) {\n\t\t        const state = controller._controlledReadableStream._state;\n\t\t        if (state === 'errored') {\n\t\t            return null;\n\t\t        }\n\t\t        if (state === 'closed') {\n\t\t            return 0;\n\t\t        }\n\t\t        return controller._strategyHWM - controller._queueTotalSize;\n\t\t    }\n\t\t    // This is used in the implementation of TransformStream.\n\t\t    function ReadableStreamDefaultControllerHasBackpressure(controller) {\n\t\t        if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n\t\t            return false;\n\t\t        }\n\t\t        return true;\n\t\t    }\n\t\t    function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {\n\t\t        const state = controller._controlledReadableStream._state;\n\t\t        if (!controller._closeRequested && state === 'readable') {\n\t\t            return true;\n\t\t        }\n\t\t        return false;\n\t\t    }\n\t\t    function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\n\t\t        controller._controlledReadableStream = stream;\n\t\t        controller._queue = undefined;\n\t\t        controller._queueTotalSize = undefined;\n\t\t        ResetQueue(controller);\n\t\t        controller._started = false;\n\t\t        controller._closeRequested = false;\n\t\t        controller._pullAgain = false;\n\t\t        controller._pulling = false;\n\t\t        controller._strategySizeAlgorithm = sizeAlgorithm;\n\t\t        controller._strategyHWM = highWaterMark;\n\t\t        controller._pullAlgorithm = pullAlgorithm;\n\t\t        controller._cancelAlgorithm = cancelAlgorithm;\n\t\t        stream._readableStreamController = controller;\n\t\t        const startResult = startAlgorithm();\n\t\t        uponPromise(promiseResolvedWith(startResult), () => {\n\t\t            controller._started = true;\n\t\t            ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n\t\t        }, r => {\n\t\t            ReadableStreamDefaultControllerError(controller, r);\n\t\t        });\n\t\t    }\n\t\t    function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {\n\t\t        const controller = Object.create(ReadableStreamDefaultController.prototype);\n\t\t        let startAlgorithm = () => undefined;\n\t\t        let pullAlgorithm = () => promiseResolvedWith(undefined);\n\t\t        let cancelAlgorithm = () => promiseResolvedWith(undefined);\n\t\t        if (underlyingSource.start !== undefined) {\n\t\t            startAlgorithm = () => underlyingSource.start(controller);\n\t\t        }\n\t\t        if (underlyingSource.pull !== undefined) {\n\t\t            pullAlgorithm = () => underlyingSource.pull(controller);\n\t\t        }\n\t\t        if (underlyingSource.cancel !== undefined) {\n\t\t            cancelAlgorithm = reason => underlyingSource.cancel(reason);\n\t\t        }\n\t\t        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n\t\t    }\n\t\t    // Helper functions for the ReadableStreamDefaultController.\n\t\t    function defaultControllerBrandCheckException$1(name) {\n\t\t        return new TypeError(`ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\n\t\t    }\n\n\t\t    function ReadableStreamTee(stream, cloneForBranch2) {\n\t\t        if (IsReadableByteStreamController(stream._readableStreamController)) {\n\t\t            return ReadableByteStreamTee(stream);\n\t\t        }\n\t\t        return ReadableStreamDefaultTee(stream);\n\t\t    }\n\t\t    function ReadableStreamDefaultTee(stream, cloneForBranch2) {\n\t\t        const reader = AcquireReadableStreamDefaultReader(stream);\n\t\t        let reading = false;\n\t\t        let readAgain = false;\n\t\t        let canceled1 = false;\n\t\t        let canceled2 = false;\n\t\t        let reason1;\n\t\t        let reason2;\n\t\t        let branch1;\n\t\t        let branch2;\n\t\t        let resolveCancelPromise;\n\t\t        const cancelPromise = newPromise(resolve => {\n\t\t            resolveCancelPromise = resolve;\n\t\t        });\n\t\t        function pullAlgorithm() {\n\t\t            if (reading) {\n\t\t                readAgain = true;\n\t\t                return promiseResolvedWith(undefined);\n\t\t            }\n\t\t            reading = true;\n\t\t            const readRequest = {\n\t\t                _chunkSteps: chunk => {\n\t\t                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n\t\t                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n\t\t                    // successful synchronously-available reads get ahead of asynchronously-available errors.\n\t\t                    queueMicrotask(() => {\n\t\t                        readAgain = false;\n\t\t                        const chunk1 = chunk;\n\t\t                        const chunk2 = chunk;\n\t\t                        // There is no way to access the cloning code right now in the reference implementation.\n\t\t                        // If we add one then we'll need an implementation for serializable objects.\n\t\t                        // if (!canceled2 && cloneForBranch2) {\n\t\t                        //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));\n\t\t                        // }\n\t\t                        if (!canceled1) {\n\t\t                            ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);\n\t\t                        }\n\t\t                        if (!canceled2) {\n\t\t                            ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);\n\t\t                        }\n\t\t                        reading = false;\n\t\t                        if (readAgain) {\n\t\t                            pullAlgorithm();\n\t\t                        }\n\t\t                    });\n\t\t                },\n\t\t                _closeSteps: () => {\n\t\t                    reading = false;\n\t\t                    if (!canceled1) {\n\t\t                        ReadableStreamDefaultControllerClose(branch1._readableStreamController);\n\t\t                    }\n\t\t                    if (!canceled2) {\n\t\t                        ReadableStreamDefaultControllerClose(branch2._readableStreamController);\n\t\t                    }\n\t\t                    if (!canceled1 || !canceled2) {\n\t\t                        resolveCancelPromise(undefined);\n\t\t                    }\n\t\t                },\n\t\t                _errorSteps: () => {\n\t\t                    reading = false;\n\t\t                }\n\t\t            };\n\t\t            ReadableStreamDefaultReaderRead(reader, readRequest);\n\t\t            return promiseResolvedWith(undefined);\n\t\t        }\n\t\t        function cancel1Algorithm(reason) {\n\t\t            canceled1 = true;\n\t\t            reason1 = reason;\n\t\t            if (canceled2) {\n\t\t                const compositeReason = CreateArrayFromList([reason1, reason2]);\n\t\t                const cancelResult = ReadableStreamCancel(stream, compositeReason);\n\t\t                resolveCancelPromise(cancelResult);\n\t\t            }\n\t\t            return cancelPromise;\n\t\t        }\n\t\t        function cancel2Algorithm(reason) {\n\t\t            canceled2 = true;\n\t\t            reason2 = reason;\n\t\t            if (canceled1) {\n\t\t                const compositeReason = CreateArrayFromList([reason1, reason2]);\n\t\t                const cancelResult = ReadableStreamCancel(stream, compositeReason);\n\t\t                resolveCancelPromise(cancelResult);\n\t\t            }\n\t\t            return cancelPromise;\n\t\t        }\n\t\t        function startAlgorithm() {\n\t\t            // do nothing\n\t\t        }\n\t\t        branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n\t\t        branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n\t\t        uponRejection(reader._closedPromise, (r) => {\n\t\t            ReadableStreamDefaultControllerError(branch1._readableStreamController, r);\n\t\t            ReadableStreamDefaultControllerError(branch2._readableStreamController, r);\n\t\t            if (!canceled1 || !canceled2) {\n\t\t                resolveCancelPromise(undefined);\n\t\t            }\n\t\t        });\n\t\t        return [branch1, branch2];\n\t\t    }\n\t\t    function ReadableByteStreamTee(stream) {\n\t\t        let reader = AcquireReadableStreamDefaultReader(stream);\n\t\t        let reading = false;\n\t\t        let readAgainForBranch1 = false;\n\t\t        let readAgainForBranch2 = false;\n\t\t        let canceled1 = false;\n\t\t        let canceled2 = false;\n\t\t        let reason1;\n\t\t        let reason2;\n\t\t        let branch1;\n\t\t        let branch2;\n\t\t        let resolveCancelPromise;\n\t\t        const cancelPromise = newPromise(resolve => {\n\t\t            resolveCancelPromise = resolve;\n\t\t        });\n\t\t        function forwardReaderError(thisReader) {\n\t\t            uponRejection(thisReader._closedPromise, r => {\n\t\t                if (thisReader !== reader) {\n\t\t                    return;\n\t\t                }\n\t\t                ReadableByteStreamControllerError(branch1._readableStreamController, r);\n\t\t                ReadableByteStreamControllerError(branch2._readableStreamController, r);\n\t\t                if (!canceled1 || !canceled2) {\n\t\t                    resolveCancelPromise(undefined);\n\t\t                }\n\t\t            });\n\t\t        }\n\t\t        function pullWithDefaultReader() {\n\t\t            if (IsReadableStreamBYOBReader(reader)) {\n\t\t                ReadableStreamReaderGenericRelease(reader);\n\t\t                reader = AcquireReadableStreamDefaultReader(stream);\n\t\t                forwardReaderError(reader);\n\t\t            }\n\t\t            const readRequest = {\n\t\t                _chunkSteps: chunk => {\n\t\t                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n\t\t                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n\t\t                    // successful synchronously-available reads get ahead of asynchronously-available errors.\n\t\t                    queueMicrotask(() => {\n\t\t                        readAgainForBranch1 = false;\n\t\t                        readAgainForBranch2 = false;\n\t\t                        const chunk1 = chunk;\n\t\t                        let chunk2 = chunk;\n\t\t                        if (!canceled1 && !canceled2) {\n\t\t                            try {\n\t\t                                chunk2 = CloneAsUint8Array(chunk);\n\t\t                            }\n\t\t                            catch (cloneE) {\n\t\t                                ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\n\t\t                                ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\n\t\t                                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n\t\t                                return;\n\t\t                            }\n\t\t                        }\n\t\t                        if (!canceled1) {\n\t\t                            ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\n\t\t                        }\n\t\t                        if (!canceled2) {\n\t\t                            ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\n\t\t                        }\n\t\t                        reading = false;\n\t\t                        if (readAgainForBranch1) {\n\t\t                            pull1Algorithm();\n\t\t                        }\n\t\t                        else if (readAgainForBranch2) {\n\t\t                            pull2Algorithm();\n\t\t                        }\n\t\t                    });\n\t\t                },\n\t\t                _closeSteps: () => {\n\t\t                    reading = false;\n\t\t                    if (!canceled1) {\n\t\t                        ReadableByteStreamControllerClose(branch1._readableStreamController);\n\t\t                    }\n\t\t                    if (!canceled2) {\n\t\t                        ReadableByteStreamControllerClose(branch2._readableStreamController);\n\t\t                    }\n\t\t                    if (branch1._readableStreamController._pendingPullIntos.length > 0) {\n\t\t                        ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\n\t\t                    }\n\t\t                    if (branch2._readableStreamController._pendingPullIntos.length > 0) {\n\t\t                        ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\n\t\t                    }\n\t\t                    if (!canceled1 || !canceled2) {\n\t\t                        resolveCancelPromise(undefined);\n\t\t                    }\n\t\t                },\n\t\t                _errorSteps: () => {\n\t\t                    reading = false;\n\t\t                }\n\t\t            };\n\t\t            ReadableStreamDefaultReaderRead(reader, readRequest);\n\t\t        }\n\t\t        function pullWithBYOBReader(view, forBranch2) {\n\t\t            if (IsReadableStreamDefaultReader(reader)) {\n\t\t                ReadableStreamReaderGenericRelease(reader);\n\t\t                reader = AcquireReadableStreamBYOBReader(stream);\n\t\t                forwardReaderError(reader);\n\t\t            }\n\t\t            const byobBranch = forBranch2 ? branch2 : branch1;\n\t\t            const otherBranch = forBranch2 ? branch1 : branch2;\n\t\t            const readIntoRequest = {\n\t\t                _chunkSteps: chunk => {\n\t\t                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n\t\t                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n\t\t                    // successful synchronously-available reads get ahead of asynchronously-available errors.\n\t\t                    queueMicrotask(() => {\n\t\t                        readAgainForBranch1 = false;\n\t\t                        readAgainForBranch2 = false;\n\t\t                        const byobCanceled = forBranch2 ? canceled2 : canceled1;\n\t\t                        const otherCanceled = forBranch2 ? canceled1 : canceled2;\n\t\t                        if (!otherCanceled) {\n\t\t                            let clonedChunk;\n\t\t                            try {\n\t\t                                clonedChunk = CloneAsUint8Array(chunk);\n\t\t                            }\n\t\t                            catch (cloneE) {\n\t\t                                ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\n\t\t                                ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\n\t\t                                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n\t\t                                return;\n\t\t                            }\n\t\t                            if (!byobCanceled) {\n\t\t                                ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n\t\t                            }\n\t\t                            ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\n\t\t                        }\n\t\t                        else if (!byobCanceled) {\n\t\t                            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n\t\t                        }\n\t\t                        reading = false;\n\t\t                        if (readAgainForBranch1) {\n\t\t                            pull1Algorithm();\n\t\t                        }\n\t\t                        else if (readAgainForBranch2) {\n\t\t                            pull2Algorithm();\n\t\t                        }\n\t\t                    });\n\t\t                },\n\t\t                _closeSteps: chunk => {\n\t\t                    reading = false;\n\t\t                    const byobCanceled = forBranch2 ? canceled2 : canceled1;\n\t\t                    const otherCanceled = forBranch2 ? canceled1 : canceled2;\n\t\t                    if (!byobCanceled) {\n\t\t                        ReadableByteStreamControllerClose(byobBranch._readableStreamController);\n\t\t                    }\n\t\t                    if (!otherCanceled) {\n\t\t                        ReadableByteStreamControllerClose(otherBranch._readableStreamController);\n\t\t                    }\n\t\t                    if (chunk !== undefined) {\n\t\t                        if (!byobCanceled) {\n\t\t                            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n\t\t                        }\n\t\t                        if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\n\t\t                            ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\n\t\t                        }\n\t\t                    }\n\t\t                    if (!byobCanceled || !otherCanceled) {\n\t\t                        resolveCancelPromise(undefined);\n\t\t                    }\n\t\t                },\n\t\t                _errorSteps: () => {\n\t\t                    reading = false;\n\t\t                }\n\t\t            };\n\t\t            ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);\n\t\t        }\n\t\t        function pull1Algorithm() {\n\t\t            if (reading) {\n\t\t                readAgainForBranch1 = true;\n\t\t                return promiseResolvedWith(undefined);\n\t\t            }\n\t\t            reading = true;\n\t\t            const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\n\t\t            if (byobRequest === null) {\n\t\t                pullWithDefaultReader();\n\t\t            }\n\t\t            else {\n\t\t                pullWithBYOBReader(byobRequest._view, false);\n\t\t            }\n\t\t            return promiseResolvedWith(undefined);\n\t\t        }\n\t\t        function pull2Algorithm() {\n\t\t            if (reading) {\n\t\t                readAgainForBranch2 = true;\n\t\t                return promiseResolvedWith(undefined);\n\t\t            }\n\t\t            reading = true;\n\t\t            const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\n\t\t            if (byobRequest === null) {\n\t\t                pullWithDefaultReader();\n\t\t            }\n\t\t            else {\n\t\t                pullWithBYOBReader(byobRequest._view, true);\n\t\t            }\n\t\t            return promiseResolvedWith(undefined);\n\t\t        }\n\t\t        function cancel1Algorithm(reason) {\n\t\t            canceled1 = true;\n\t\t            reason1 = reason;\n\t\t            if (canceled2) {\n\t\t                const compositeReason = CreateArrayFromList([reason1, reason2]);\n\t\t                const cancelResult = ReadableStreamCancel(stream, compositeReason);\n\t\t                resolveCancelPromise(cancelResult);\n\t\t            }\n\t\t            return cancelPromise;\n\t\t        }\n\t\t        function cancel2Algorithm(reason) {\n\t\t            canceled2 = true;\n\t\t            reason2 = reason;\n\t\t            if (canceled1) {\n\t\t                const compositeReason = CreateArrayFromList([reason1, reason2]);\n\t\t                const cancelResult = ReadableStreamCancel(stream, compositeReason);\n\t\t                resolveCancelPromise(cancelResult);\n\t\t            }\n\t\t            return cancelPromise;\n\t\t        }\n\t\t        function startAlgorithm() {\n\t\t            return;\n\t\t        }\n\t\t        branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\n\t\t        branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\n\t\t        forwardReaderError(reader);\n\t\t        return [branch1, branch2];\n\t\t    }\n\n\t\t    function convertUnderlyingDefaultOrByteSource(source, context) {\n\t\t        assertDictionary(source, context);\n\t\t        const original = source;\n\t\t        const autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;\n\t\t        const cancel = original === null || original === void 0 ? void 0 : original.cancel;\n\t\t        const pull = original === null || original === void 0 ? void 0 : original.pull;\n\t\t        const start = original === null || original === void 0 ? void 0 : original.start;\n\t\t        const type = original === null || original === void 0 ? void 0 : original.type;\n\t\t        return {\n\t\t            autoAllocateChunkSize: autoAllocateChunkSize === undefined ?\n\t\t                undefined :\n\t\t                convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, `${context} has member 'autoAllocateChunkSize' that`),\n\t\t            cancel: cancel === undefined ?\n\t\t                undefined :\n\t\t                convertUnderlyingSourceCancelCallback(cancel, original, `${context} has member 'cancel' that`),\n\t\t            pull: pull === undefined ?\n\t\t                undefined :\n\t\t                convertUnderlyingSourcePullCallback(pull, original, `${context} has member 'pull' that`),\n\t\t            start: start === undefined ?\n\t\t                undefined :\n\t\t                convertUnderlyingSourceStartCallback(start, original, `${context} has member 'start' that`),\n\t\t            type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)\n\t\t        };\n\t\t    }\n\t\t    function convertUnderlyingSourceCancelCallback(fn, original, context) {\n\t\t        assertFunction(fn, context);\n\t\t        return (reason) => promiseCall(fn, original, [reason]);\n\t\t    }\n\t\t    function convertUnderlyingSourcePullCallback(fn, original, context) {\n\t\t        assertFunction(fn, context);\n\t\t        return (controller) => promiseCall(fn, original, [controller]);\n\t\t    }\n\t\t    function convertUnderlyingSourceStartCallback(fn, original, context) {\n\t\t        assertFunction(fn, context);\n\t\t        return (controller) => reflectCall(fn, original, [controller]);\n\t\t    }\n\t\t    function convertReadableStreamType(type, context) {\n\t\t        type = `${type}`;\n\t\t        if (type !== 'bytes') {\n\t\t            throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);\n\t\t        }\n\t\t        return type;\n\t\t    }\n\n\t\t    function convertReaderOptions(options, context) {\n\t\t        assertDictionary(options, context);\n\t\t        const mode = options === null || options === void 0 ? void 0 : options.mode;\n\t\t        return {\n\t\t            mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)\n\t\t        };\n\t\t    }\n\t\t    function convertReadableStreamReaderMode(mode, context) {\n\t\t        mode = `${mode}`;\n\t\t        if (mode !== 'byob') {\n\t\t            throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);\n\t\t        }\n\t\t        return mode;\n\t\t    }\n\n\t\t    function convertIteratorOptions(options, context) {\n\t\t        assertDictionary(options, context);\n\t\t        const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n\t\t        return { preventCancel: Boolean(preventCancel) };\n\t\t    }\n\n\t\t    function convertPipeOptions(options, context) {\n\t\t        assertDictionary(options, context);\n\t\t        const preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;\n\t\t        const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n\t\t        const preventClose = options === null || options === void 0 ? void 0 : options.preventClose;\n\t\t        const signal = options === null || options === void 0 ? void 0 : options.signal;\n\t\t        if (signal !== undefined) {\n\t\t            assertAbortSignal(signal, `${context} has member 'signal' that`);\n\t\t        }\n\t\t        return {\n\t\t            preventAbort: Boolean(preventAbort),\n\t\t            preventCancel: Boolean(preventCancel),\n\t\t            preventClose: Boolean(preventClose),\n\t\t            signal\n\t\t        };\n\t\t    }\n\t\t    function assertAbortSignal(signal, context) {\n\t\t        if (!isAbortSignal(signal)) {\n\t\t            throw new TypeError(`${context} is not an AbortSignal.`);\n\t\t        }\n\t\t    }\n\n\t\t    function convertReadableWritablePair(pair, context) {\n\t\t        assertDictionary(pair, context);\n\t\t        const readable = pair === null || pair === void 0 ? void 0 : pair.readable;\n\t\t        assertRequiredField(readable, 'readable', 'ReadableWritablePair');\n\t\t        assertReadableStream(readable, `${context} has member 'readable' that`);\n\t\t        const writable = pair === null || pair === void 0 ? void 0 : pair.writable;\n\t\t        assertRequiredField(writable, 'writable', 'ReadableWritablePair');\n\t\t        assertWritableStream(writable, `${context} has member 'writable' that`);\n\t\t        return { readable, writable };\n\t\t    }\n\n\t\t    /**\n\t\t     * A readable stream represents a source of data, from which you can read.\n\t\t     *\n\t\t     * @public\n\t\t     */\n\t\t    class ReadableStream {\n\t\t        constructor(rawUnderlyingSource = {}, rawStrategy = {}) {\n\t\t            if (rawUnderlyingSource === undefined) {\n\t\t                rawUnderlyingSource = null;\n\t\t            }\n\t\t            else {\n\t\t                assertObject(rawUnderlyingSource, 'First parameter');\n\t\t            }\n\t\t            const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n\t\t            const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');\n\t\t            InitializeReadableStream(this);\n\t\t            if (underlyingSource.type === 'bytes') {\n\t\t                if (strategy.size !== undefined) {\n\t\t                    throw new RangeError('The strategy for a byte stream cannot have a size function');\n\t\t                }\n\t\t                const highWaterMark = ExtractHighWaterMark(strategy, 0);\n\t\t                SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);\n\t\t            }\n\t\t            else {\n\t\t                const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n\t\t                const highWaterMark = ExtractHighWaterMark(strategy, 1);\n\t\t                SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);\n\t\t            }\n\t\t        }\n\t\t        /**\n\t\t         * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\n\t\t         */\n\t\t        get locked() {\n\t\t            if (!IsReadableStream(this)) {\n\t\t                throw streamBrandCheckException$1('locked');\n\t\t            }\n\t\t            return IsReadableStreamLocked(this);\n\t\t        }\n\t\t        /**\n\t\t         * Cancels the stream, signaling a loss of interest in the stream by a consumer.\n\t\t         *\n\t\t         * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\n\t\t         * method, which might or might not use it.\n\t\t         */\n\t\t        cancel(reason = undefined) {\n\t\t            if (!IsReadableStream(this)) {\n\t\t                return promiseRejectedWith(streamBrandCheckException$1('cancel'));\n\t\t            }\n\t\t            if (IsReadableStreamLocked(this)) {\n\t\t                return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));\n\t\t            }\n\t\t            return ReadableStreamCancel(this, reason);\n\t\t        }\n\t\t        getReader(rawOptions = undefined) {\n\t\t            if (!IsReadableStream(this)) {\n\t\t                throw streamBrandCheckException$1('getReader');\n\t\t            }\n\t\t            const options = convertReaderOptions(rawOptions, 'First parameter');\n\t\t            if (options.mode === undefined) {\n\t\t                return AcquireReadableStreamDefaultReader(this);\n\t\t            }\n\t\t            return AcquireReadableStreamBYOBReader(this);\n\t\t        }\n\t\t        pipeThrough(rawTransform, rawOptions = {}) {\n\t\t            if (!IsReadableStream(this)) {\n\t\t                throw streamBrandCheckException$1('pipeThrough');\n\t\t            }\n\t\t            assertRequiredArgument(rawTransform, 1, 'pipeThrough');\n\t\t            const transform = convertReadableWritablePair(rawTransform, 'First parameter');\n\t\t            const options = convertPipeOptions(rawOptions, 'Second parameter');\n\t\t            if (IsReadableStreamLocked(this)) {\n\t\t                throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');\n\t\t            }\n\t\t            if (IsWritableStreamLocked(transform.writable)) {\n\t\t                throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');\n\t\t            }\n\t\t            const promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n\t\t            setPromiseIsHandledToTrue(promise);\n\t\t            return transform.readable;\n\t\t        }\n\t\t        pipeTo(destination, rawOptions = {}) {\n\t\t            if (!IsReadableStream(this)) {\n\t\t                return promiseRejectedWith(streamBrandCheckException$1('pipeTo'));\n\t\t            }\n\t\t            if (destination === undefined) {\n\t\t                return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);\n\t\t            }\n\t\t            if (!IsWritableStream(destination)) {\n\t\t                return promiseRejectedWith(new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`));\n\t\t            }\n\t\t            let options;\n\t\t            try {\n\t\t                options = convertPipeOptions(rawOptions, 'Second parameter');\n\t\t            }\n\t\t            catch (e) {\n\t\t                return promiseRejectedWith(e);\n\t\t            }\n\t\t            if (IsReadableStreamLocked(this)) {\n\t\t                return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream'));\n\t\t            }\n\t\t            if (IsWritableStreamLocked(destination)) {\n\t\t                return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream'));\n\t\t            }\n\t\t            return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n\t\t        }\n\t\t        /**\n\t\t         * Tees this readable stream, returning a two-element array containing the two resulting branches as\n\t\t         * new {@link ReadableStream} instances.\n\t\t         *\n\t\t         * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\n\t\t         * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\n\t\t         * propagated to the stream's underlying source.\n\t\t         *\n\t\t         * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\n\t\t         * this could allow interference between the two branches.\n\t\t         */\n\t\t        tee() {\n\t\t            if (!IsReadableStream(this)) {\n\t\t                throw streamBrandCheckException$1('tee');\n\t\t            }\n\t\t            const branches = ReadableStreamTee(this);\n\t\t            return CreateArrayFromList(branches);\n\t\t        }\n\t\t        values(rawOptions = undefined) {\n\t\t            if (!IsReadableStream(this)) {\n\t\t                throw streamBrandCheckException$1('values');\n\t\t            }\n\t\t            const options = convertIteratorOptions(rawOptions, 'First parameter');\n\t\t            return AcquireReadableStreamAsyncIterator(this, options.preventCancel);\n\t\t        }\n\t\t    }\n\t\t    Object.defineProperties(ReadableStream.prototype, {\n\t\t        cancel: { enumerable: true },\n\t\t        getReader: { enumerable: true },\n\t\t        pipeThrough: { enumerable: true },\n\t\t        pipeTo: { enumerable: true },\n\t\t        tee: { enumerable: true },\n\t\t        values: { enumerable: true },\n\t\t        locked: { enumerable: true }\n\t\t    });\n\t\t    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n\t\t        Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.toStringTag, {\n\t\t            value: 'ReadableStream',\n\t\t            configurable: true\n\t\t        });\n\t\t    }\n\t\t    if (typeof SymbolPolyfill.asyncIterator === 'symbol') {\n\t\t        Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.asyncIterator, {\n\t\t            value: ReadableStream.prototype.values,\n\t\t            writable: true,\n\t\t            configurable: true\n\t\t        });\n\t\t    }\n\t\t    // Abstract operations for the ReadableStream.\n\t\t    // Throws if and only if startAlgorithm throws.\n\t\t    function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {\n\t\t        const stream = Object.create(ReadableStream.prototype);\n\t\t        InitializeReadableStream(stream);\n\t\t        const controller = Object.create(ReadableStreamDefaultController.prototype);\n\t\t        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n\t\t        return stream;\n\t\t    }\n\t\t    // Throws if and only if startAlgorithm throws.\n\t\t    function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {\n\t\t        const stream = Object.create(ReadableStream.prototype);\n\t\t        InitializeReadableStream(stream);\n\t\t        const controller = Object.create(ReadableByteStreamController.prototype);\n\t\t        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);\n\t\t        return stream;\n\t\t    }\n\t\t    function InitializeReadableStream(stream) {\n\t\t        stream._state = 'readable';\n\t\t        stream._reader = undefined;\n\t\t        stream._storedError = undefined;\n\t\t        stream._disturbed = false;\n\t\t    }\n\t\t    function IsReadableStream(x) {\n\t\t        if (!typeIsObject(x)) {\n\t\t            return false;\n\t\t        }\n\t\t        if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n\t\t            return false;\n\t\t        }\n\t\t        return x instanceof ReadableStream;\n\t\t    }\n\t\t    function IsReadableStreamLocked(stream) {\n\t\t        if (stream._reader === undefined) {\n\t\t            return false;\n\t\t        }\n\t\t        return true;\n\t\t    }\n\t\t    // ReadableStream API exposed for controllers.\n\t\t    function ReadableStreamCancel(stream, reason) {\n\t\t        stream._disturbed = true;\n\t\t        if (stream._state === 'closed') {\n\t\t            return promiseResolvedWith(undefined);\n\t\t        }\n\t\t        if (stream._state === 'errored') {\n\t\t            return promiseRejectedWith(stream._storedError);\n\t\t        }\n\t\t        ReadableStreamClose(stream);\n\t\t        const reader = stream._reader;\n\t\t        if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {\n\t\t            reader._readIntoRequests.forEach(readIntoRequest => {\n\t\t                readIntoRequest._closeSteps(undefined);\n\t\t            });\n\t\t            reader._readIntoRequests = new SimpleQueue();\n\t\t        }\n\t\t        const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n\t\t        return transformPromiseWith(sourceCancelPromise, noop);\n\t\t    }\n\t\t    function ReadableStreamClose(stream) {\n\t\t        stream._state = 'closed';\n\t\t        const reader = stream._reader;\n\t\t        if (reader === undefined) {\n\t\t            return;\n\t\t        }\n\t\t        defaultReaderClosedPromiseResolve(reader);\n\t\t        if (IsReadableStreamDefaultReader(reader)) {\n\t\t            reader._readRequests.forEach(readRequest => {\n\t\t                readRequest._closeSteps();\n\t\t            });\n\t\t            reader._readRequests = new SimpleQueue();\n\t\t        }\n\t\t    }\n\t\t    function ReadableStreamError(stream, e) {\n\t\t        stream._state = 'errored';\n\t\t        stream._storedError = e;\n\t\t        const reader = stream._reader;\n\t\t        if (reader === undefined) {\n\t\t            return;\n\t\t        }\n\t\t        defaultReaderClosedPromiseReject(reader, e);\n\t\t        if (IsReadableStreamDefaultReader(reader)) {\n\t\t            reader._readRequests.forEach(readRequest => {\n\t\t                readRequest._errorSteps(e);\n\t\t            });\n\t\t            reader._readRequests = new SimpleQueue();\n\t\t        }\n\t\t        else {\n\t\t            reader._readIntoRequests.forEach(readIntoRequest => {\n\t\t                readIntoRequest._errorSteps(e);\n\t\t            });\n\t\t            reader._readIntoRequests = new SimpleQueue();\n\t\t        }\n\t\t    }\n\t\t    // Helper functions for the ReadableStream.\n\t\t    function streamBrandCheckException$1(name) {\n\t\t        return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\n\t\t    }\n\n\t\t    function convertQueuingStrategyInit(init, context) {\n\t\t        assertDictionary(init, context);\n\t\t        const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n\t\t        assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');\n\t\t        return {\n\t\t            highWaterMark: convertUnrestrictedDouble(highWaterMark)\n\t\t        };\n\t\t    }\n\n\t\t    // The size function must not have a prototype property nor be a constructor\n\t\t    const byteLengthSizeFunction = (chunk) => {\n\t\t        return chunk.byteLength;\n\t\t    };\n\t\t    try {\n\t\t        Object.defineProperty(byteLengthSizeFunction, 'name', {\n\t\t            value: 'size',\n\t\t            configurable: true\n\t\t        });\n\t\t    }\n\t\t    catch (_a) {\n\t\t        // This property is non-configurable in older browsers, so ignore if this throws.\n\t\t        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n\t\t    }\n\t\t    /**\n\t\t     * A queuing strategy that counts the number of bytes in each chunk.\n\t\t     *\n\t\t     * @public\n\t\t     */\n\t\t    class ByteLengthQueuingStrategy {\n\t\t        constructor(options) {\n\t\t            assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');\n\t\t            options = convertQueuingStrategyInit(options, 'First parameter');\n\t\t            this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n\t\t        }\n\t\t        /**\n\t\t         * Returns the high water mark provided to the constructor.\n\t\t         */\n\t\t        get highWaterMark() {\n\t\t            if (!IsByteLengthQueuingStrategy(this)) {\n\t\t                throw byteLengthBrandCheckException('highWaterMark');\n\t\t            }\n\t\t            return this._byteLengthQueuingStrategyHighWaterMark;\n\t\t        }\n\t\t        /**\n\t\t         * Measures the size of `chunk` by returning the value of its `byteLength` property.\n\t\t         */\n\t\t        get size() {\n\t\t            if (!IsByteLengthQueuingStrategy(this)) {\n\t\t                throw byteLengthBrandCheckException('size');\n\t\t            }\n\t\t            return byteLengthSizeFunction;\n\t\t        }\n\t\t    }\n\t\t    Object.defineProperties(ByteLengthQueuingStrategy.prototype, {\n\t\t        highWaterMark: { enumerable: true },\n\t\t        size: { enumerable: true }\n\t\t    });\n\t\t    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n\t\t        Object.defineProperty(ByteLengthQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n\t\t            value: 'ByteLengthQueuingStrategy',\n\t\t            configurable: true\n\t\t        });\n\t\t    }\n\t\t    // Helper functions for the ByteLengthQueuingStrategy.\n\t\t    function byteLengthBrandCheckException(name) {\n\t\t        return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);\n\t\t    }\n\t\t    function IsByteLengthQueuingStrategy(x) {\n\t\t        if (!typeIsObject(x)) {\n\t\t            return false;\n\t\t        }\n\t\t        if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {\n\t\t            return false;\n\t\t        }\n\t\t        return x instanceof ByteLengthQueuingStrategy;\n\t\t    }\n\n\t\t    // The size function must not have a prototype property nor be a constructor\n\t\t    const countSizeFunction = () => {\n\t\t        return 1;\n\t\t    };\n\t\t    try {\n\t\t        Object.defineProperty(countSizeFunction, 'name', {\n\t\t            value: 'size',\n\t\t            configurable: true\n\t\t        });\n\t\t    }\n\t\t    catch (_a) {\n\t\t        // This property is non-configurable in older browsers, so ignore if this throws.\n\t\t        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n\t\t    }\n\t\t    /**\n\t\t     * A queuing strategy that counts the number of chunks.\n\t\t     *\n\t\t     * @public\n\t\t     */\n\t\t    class CountQueuingStrategy {\n\t\t        constructor(options) {\n\t\t            assertRequiredArgument(options, 1, 'CountQueuingStrategy');\n\t\t            options = convertQueuingStrategyInit(options, 'First parameter');\n\t\t            this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n\t\t        }\n\t\t        /**\n\t\t         * Returns the high water mark provided to the constructor.\n\t\t         */\n\t\t        get highWaterMark() {\n\t\t            if (!IsCountQueuingStrategy(this)) {\n\t\t                throw countBrandCheckException('highWaterMark');\n\t\t            }\n\t\t            return this._countQueuingStrategyHighWaterMark;\n\t\t        }\n\t\t        /**\n\t\t         * Measures the size of `chunk` by always returning 1.\n\t\t         * This ensures that the total queue size is a count of the number of chunks in the queue.\n\t\t         */\n\t\t        get size() {\n\t\t            if (!IsCountQueuingStrategy(this)) {\n\t\t                throw countBrandCheckException('size');\n\t\t            }\n\t\t            return countSizeFunction;\n\t\t        }\n\t\t    }\n\t\t    Object.defineProperties(CountQueuingStrategy.prototype, {\n\t\t        highWaterMark: { enumerable: true },\n\t\t        size: { enumerable: true }\n\t\t    });\n\t\t    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n\t\t        Object.defineProperty(CountQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n\t\t            value: 'CountQueuingStrategy',\n\t\t            configurable: true\n\t\t        });\n\t\t    }\n\t\t    // Helper functions for the CountQueuingStrategy.\n\t\t    function countBrandCheckException(name) {\n\t\t        return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);\n\t\t    }\n\t\t    function IsCountQueuingStrategy(x) {\n\t\t        if (!typeIsObject(x)) {\n\t\t            return false;\n\t\t        }\n\t\t        if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {\n\t\t            return false;\n\t\t        }\n\t\t        return x instanceof CountQueuingStrategy;\n\t\t    }\n\n\t\t    function convertTransformer(original, context) {\n\t\t        assertDictionary(original, context);\n\t\t        const flush = original === null || original === void 0 ? void 0 : original.flush;\n\t\t        const readableType = original === null || original === void 0 ? void 0 : original.readableType;\n\t\t        const start = original === null || original === void 0 ? void 0 : original.start;\n\t\t        const transform = original === null || original === void 0 ? void 0 : original.transform;\n\t\t        const writableType = original === null || original === void 0 ? void 0 : original.writableType;\n\t\t        return {\n\t\t            flush: flush === undefined ?\n\t\t                undefined :\n\t\t                convertTransformerFlushCallback(flush, original, `${context} has member 'flush' that`),\n\t\t            readableType,\n\t\t            start: start === undefined ?\n\t\t                undefined :\n\t\t                convertTransformerStartCallback(start, original, `${context} has member 'start' that`),\n\t\t            transform: transform === undefined ?\n\t\t                undefined :\n\t\t                convertTransformerTransformCallback(transform, original, `${context} has member 'transform' that`),\n\t\t            writableType\n\t\t        };\n\t\t    }\n\t\t    function convertTransformerFlushCallback(fn, original, context) {\n\t\t        assertFunction(fn, context);\n\t\t        return (controller) => promiseCall(fn, original, [controller]);\n\t\t    }\n\t\t    function convertTransformerStartCallback(fn, original, context) {\n\t\t        assertFunction(fn, context);\n\t\t        return (controller) => reflectCall(fn, original, [controller]);\n\t\t    }\n\t\t    function convertTransformerTransformCallback(fn, original, context) {\n\t\t        assertFunction(fn, context);\n\t\t        return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);\n\t\t    }\n\n\t\t    // Class TransformStream\n\t\t    /**\n\t\t     * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\n\t\t     * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\n\t\t     * In a manner specific to the transform stream in question, writes to the writable side result in new data being\n\t\t     * made available for reading from the readable side.\n\t\t     *\n\t\t     * @public\n\t\t     */\n\t\t    class TransformStream {\n\t\t        constructor(rawTransformer = {}, rawWritableStrategy = {}, rawReadableStrategy = {}) {\n\t\t            if (rawTransformer === undefined) {\n\t\t                rawTransformer = null;\n\t\t            }\n\t\t            const writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');\n\t\t            const readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');\n\t\t            const transformer = convertTransformer(rawTransformer, 'First parameter');\n\t\t            if (transformer.readableType !== undefined) {\n\t\t                throw new RangeError('Invalid readableType specified');\n\t\t            }\n\t\t            if (transformer.writableType !== undefined) {\n\t\t                throw new RangeError('Invalid writableType specified');\n\t\t            }\n\t\t            const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n\t\t            const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n\t\t            const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n\t\t            const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n\t\t            let startPromise_resolve;\n\t\t            const startPromise = newPromise(resolve => {\n\t\t                startPromise_resolve = resolve;\n\t\t            });\n\t\t            InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n\t\t            SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n\t\t            if (transformer.start !== undefined) {\n\t\t                startPromise_resolve(transformer.start(this._transformStreamController));\n\t\t            }\n\t\t            else {\n\t\t                startPromise_resolve(undefined);\n\t\t            }\n\t\t        }\n\t\t        /**\n\t\t         * The readable side of the transform stream.\n\t\t         */\n\t\t        get readable() {\n\t\t            if (!IsTransformStream(this)) {\n\t\t                throw streamBrandCheckException('readable');\n\t\t            }\n\t\t            return this._readable;\n\t\t        }\n\t\t        /**\n\t\t         * The writable side of the transform stream.\n\t\t         */\n\t\t        get writable() {\n\t\t            if (!IsTransformStream(this)) {\n\t\t                throw streamBrandCheckException('writable');\n\t\t            }\n\t\t            return this._writable;\n\t\t        }\n\t\t    }\n\t\t    Object.defineProperties(TransformStream.prototype, {\n\t\t        readable: { enumerable: true },\n\t\t        writable: { enumerable: true }\n\t\t    });\n\t\t    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n\t\t        Object.defineProperty(TransformStream.prototype, SymbolPolyfill.toStringTag, {\n\t\t            value: 'TransformStream',\n\t\t            configurable: true\n\t\t        });\n\t\t    }\n\t\t    function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {\n\t\t        function startAlgorithm() {\n\t\t            return startPromise;\n\t\t        }\n\t\t        function writeAlgorithm(chunk) {\n\t\t            return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n\t\t        }\n\t\t        function abortAlgorithm(reason) {\n\t\t            return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n\t\t        }\n\t\t        function closeAlgorithm() {\n\t\t            return TransformStreamDefaultSinkCloseAlgorithm(stream);\n\t\t        }\n\t\t        stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);\n\t\t        function pullAlgorithm() {\n\t\t            return TransformStreamDefaultSourcePullAlgorithm(stream);\n\t\t        }\n\t\t        function cancelAlgorithm(reason) {\n\t\t            TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n\t\t            return promiseResolvedWith(undefined);\n\t\t        }\n\t\t        stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n\t\t        // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n\t\t        stream._backpressure = undefined;\n\t\t        stream._backpressureChangePromise = undefined;\n\t\t        stream._backpressureChangePromise_resolve = undefined;\n\t\t        TransformStreamSetBackpressure(stream, true);\n\t\t        stream._transformStreamController = undefined;\n\t\t    }\n\t\t    function IsTransformStream(x) {\n\t\t        if (!typeIsObject(x)) {\n\t\t            return false;\n\t\t        }\n\t\t        if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n\t\t            return false;\n\t\t        }\n\t\t        return x instanceof TransformStream;\n\t\t    }\n\t\t    // This is a no-op if both sides are already errored.\n\t\t    function TransformStreamError(stream, e) {\n\t\t        ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);\n\t\t        TransformStreamErrorWritableAndUnblockWrite(stream, e);\n\t\t    }\n\t\t    function TransformStreamErrorWritableAndUnblockWrite(stream, e) {\n\t\t        TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n\t\t        WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n\t\t        if (stream._backpressure) {\n\t\t            // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n\t\t            // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n\t\t            // _backpressure is set.\n\t\t            TransformStreamSetBackpressure(stream, false);\n\t\t        }\n\t\t    }\n\t\t    function TransformStreamSetBackpressure(stream, backpressure) {\n\t\t        // Passes also when called during construction.\n\t\t        if (stream._backpressureChangePromise !== undefined) {\n\t\t            stream._backpressureChangePromise_resolve();\n\t\t        }\n\t\t        stream._backpressureChangePromise = newPromise(resolve => {\n\t\t            stream._backpressureChangePromise_resolve = resolve;\n\t\t        });\n\t\t        stream._backpressure = backpressure;\n\t\t    }\n\t\t    // Class TransformStreamDefaultController\n\t\t    /**\n\t\t     * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\n\t\t     *\n\t\t     * @public\n\t\t     */\n\t\t    class TransformStreamDefaultController {\n\t\t        constructor() {\n\t\t            throw new TypeError('Illegal constructor');\n\t\t        }\n\t\t        /**\n\t\t         * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.\n\t\t         */\n\t\t        get desiredSize() {\n\t\t            if (!IsTransformStreamDefaultController(this)) {\n\t\t                throw defaultControllerBrandCheckException('desiredSize');\n\t\t            }\n\t\t            const readableController = this._controlledTransformStream._readable._readableStreamController;\n\t\t            return ReadableStreamDefaultControllerGetDesiredSize(readableController);\n\t\t        }\n\t\t        enqueue(chunk = undefined) {\n\t\t            if (!IsTransformStreamDefaultController(this)) {\n\t\t                throw defaultControllerBrandCheckException('enqueue');\n\t\t            }\n\t\t            TransformStreamDefaultControllerEnqueue(this, chunk);\n\t\t        }\n\t\t        /**\n\t\t         * Errors both the readable side and the writable side of the controlled transform stream, making all future\n\t\t         * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\n\t\t         */\n\t\t        error(reason = undefined) {\n\t\t            if (!IsTransformStreamDefaultController(this)) {\n\t\t                throw defaultControllerBrandCheckException('error');\n\t\t            }\n\t\t            TransformStreamDefaultControllerError(this, reason);\n\t\t        }\n\t\t        /**\n\t\t         * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\n\t\t         * transformer only needs to consume a portion of the chunks written to the writable side.\n\t\t         */\n\t\t        terminate() {\n\t\t            if (!IsTransformStreamDefaultController(this)) {\n\t\t                throw defaultControllerBrandCheckException('terminate');\n\t\t            }\n\t\t            TransformStreamDefaultControllerTerminate(this);\n\t\t        }\n\t\t    }\n\t\t    Object.defineProperties(TransformStreamDefaultController.prototype, {\n\t\t        enqueue: { enumerable: true },\n\t\t        error: { enumerable: true },\n\t\t        terminate: { enumerable: true },\n\t\t        desiredSize: { enumerable: true }\n\t\t    });\n\t\t    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n\t\t        Object.defineProperty(TransformStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n\t\t            value: 'TransformStreamDefaultController',\n\t\t            configurable: true\n\t\t        });\n\t\t    }\n\t\t    // Transform Stream Default Controller Abstract Operations\n\t\t    function IsTransformStreamDefaultController(x) {\n\t\t        if (!typeIsObject(x)) {\n\t\t            return false;\n\t\t        }\n\t\t        if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n\t\t            return false;\n\t\t        }\n\t\t        return x instanceof TransformStreamDefaultController;\n\t\t    }\n\t\t    function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {\n\t\t        controller._controlledTransformStream = stream;\n\t\t        stream._transformStreamController = controller;\n\t\t        controller._transformAlgorithm = transformAlgorithm;\n\t\t        controller._flushAlgorithm = flushAlgorithm;\n\t\t    }\n\t\t    function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {\n\t\t        const controller = Object.create(TransformStreamDefaultController.prototype);\n\t\t        let transformAlgorithm = (chunk) => {\n\t\t            try {\n\t\t                TransformStreamDefaultControllerEnqueue(controller, chunk);\n\t\t                return promiseResolvedWith(undefined);\n\t\t            }\n\t\t            catch (transformResultE) {\n\t\t                return promiseRejectedWith(transformResultE);\n\t\t            }\n\t\t        };\n\t\t        let flushAlgorithm = () => promiseResolvedWith(undefined);\n\t\t        if (transformer.transform !== undefined) {\n\t\t            transformAlgorithm = chunk => transformer.transform(chunk, controller);\n\t\t        }\n\t\t        if (transformer.flush !== undefined) {\n\t\t            flushAlgorithm = () => transformer.flush(controller);\n\t\t        }\n\t\t        SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n\t\t    }\n\t\t    function TransformStreamDefaultControllerClearAlgorithms(controller) {\n\t\t        controller._transformAlgorithm = undefined;\n\t\t        controller._flushAlgorithm = undefined;\n\t\t    }\n\t\t    function TransformStreamDefaultControllerEnqueue(controller, chunk) {\n\t\t        const stream = controller._controlledTransformStream;\n\t\t        const readableController = stream._readable._readableStreamController;\n\t\t        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n\t\t            throw new TypeError('Readable side is not in a state that permits enqueue');\n\t\t        }\n\t\t        // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n\t\t        // accept TransformStreamDefaultControllerEnqueue() calls.\n\t\t        try {\n\t\t            ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n\t\t        }\n\t\t        catch (e) {\n\t\t            // This happens when readableStrategy.size() throws.\n\t\t            TransformStreamErrorWritableAndUnblockWrite(stream, e);\n\t\t            throw stream._readable._storedError;\n\t\t        }\n\t\t        const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n\t\t        if (backpressure !== stream._backpressure) {\n\t\t            TransformStreamSetBackpressure(stream, true);\n\t\t        }\n\t\t    }\n\t\t    function TransformStreamDefaultControllerError(controller, e) {\n\t\t        TransformStreamError(controller._controlledTransformStream, e);\n\t\t    }\n\t\t    function TransformStreamDefaultControllerPerformTransform(controller, chunk) {\n\t\t        const transformPromise = controller._transformAlgorithm(chunk);\n\t\t        return transformPromiseWith(transformPromise, undefined, r => {\n\t\t            TransformStreamError(controller._controlledTransformStream, r);\n\t\t            throw r;\n\t\t        });\n\t\t    }\n\t\t    function TransformStreamDefaultControllerTerminate(controller) {\n\t\t        const stream = controller._controlledTransformStream;\n\t\t        const readableController = stream._readable._readableStreamController;\n\t\t        ReadableStreamDefaultControllerClose(readableController);\n\t\t        const error = new TypeError('TransformStream terminated');\n\t\t        TransformStreamErrorWritableAndUnblockWrite(stream, error);\n\t\t    }\n\t\t    // TransformStreamDefaultSink Algorithms\n\t\t    function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {\n\t\t        const controller = stream._transformStreamController;\n\t\t        if (stream._backpressure) {\n\t\t            const backpressureChangePromise = stream._backpressureChangePromise;\n\t\t            return transformPromiseWith(backpressureChangePromise, () => {\n\t\t                const writable = stream._writable;\n\t\t                const state = writable._state;\n\t\t                if (state === 'erroring') {\n\t\t                    throw writable._storedError;\n\t\t                }\n\t\t                return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n\t\t            });\n\t\t        }\n\t\t        return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n\t\t    }\n\t\t    function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {\n\t\t        // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already\n\t\t        // errored.\n\t\t        TransformStreamError(stream, reason);\n\t\t        return promiseResolvedWith(undefined);\n\t\t    }\n\t\t    function TransformStreamDefaultSinkCloseAlgorithm(stream) {\n\t\t        // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n\t\t        const readable = stream._readable;\n\t\t        const controller = stream._transformStreamController;\n\t\t        const flushPromise = controller._flushAlgorithm();\n\t\t        TransformStreamDefaultControllerClearAlgorithms(controller);\n\t\t        // Return a promise that is fulfilled with undefined on success.\n\t\t        return transformPromiseWith(flushPromise, () => {\n\t\t            if (readable._state === 'errored') {\n\t\t                throw readable._storedError;\n\t\t            }\n\t\t            ReadableStreamDefaultControllerClose(readable._readableStreamController);\n\t\t        }, r => {\n\t\t            TransformStreamError(stream, r);\n\t\t            throw readable._storedError;\n\t\t        });\n\t\t    }\n\t\t    // TransformStreamDefaultSource Algorithms\n\t\t    function TransformStreamDefaultSourcePullAlgorithm(stream) {\n\t\t        // Invariant. Enforced by the promises returned by start() and pull().\n\t\t        TransformStreamSetBackpressure(stream, false);\n\t\t        // Prevent the next pull() call until there is backpressure.\n\t\t        return stream._backpressureChangePromise;\n\t\t    }\n\t\t    // Helper functions for the TransformStreamDefaultController.\n\t\t    function defaultControllerBrandCheckException(name) {\n\t\t        return new TypeError(`TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\n\t\t    }\n\t\t    // Helper functions for the TransformStream.\n\t\t    function streamBrandCheckException(name) {\n\t\t        return new TypeError(`TransformStream.prototype.${name} can only be used on a TransformStream`);\n\t\t    }\n\n\t\t    exports.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;\n\t\t    exports.CountQueuingStrategy = CountQueuingStrategy;\n\t\t    exports.ReadableByteStreamController = ReadableByteStreamController;\n\t\t    exports.ReadableStream = ReadableStream;\n\t\t    exports.ReadableStreamBYOBReader = ReadableStreamBYOBReader;\n\t\t    exports.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;\n\t\t    exports.ReadableStreamDefaultController = ReadableStreamDefaultController;\n\t\t    exports.ReadableStreamDefaultReader = ReadableStreamDefaultReader;\n\t\t    exports.TransformStream = TransformStream;\n\t\t    exports.TransformStreamDefaultController = TransformStreamDefaultController;\n\t\t    exports.WritableStream = WritableStream;\n\t\t    exports.WritableStreamDefaultController = WritableStreamDefaultController;\n\t\t    exports.WritableStreamDefaultWriter = WritableStreamDefaultWriter;\n\n\t\t    Object.defineProperty(exports, '__esModule', { value: true });\n\n\t\t})));\n\t\t\n} (ponyfill_es2018, ponyfill_es2018.exports));\n\treturn ponyfill_es2018.exports;\n}\n\n/* c8 ignore start */\n\n// 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE$1 = 65536;\n\nif (!globalThis.ReadableStream) {\n  // `node:stream/web` got introduced in v16.5.0 as experimental\n  // and it's preferred over the polyfilled version. So we also\n  // suppress the warning that gets emitted by NodeJS for using it.\n  try {\n    const process = require('node:process');\n    const { emitWarning } = process;\n    try {\n      process.emitWarning = () => {};\n      Object.assign(globalThis, require('node:stream/web'));\n      process.emitWarning = emitWarning;\n    } catch (error) {\n      process.emitWarning = emitWarning;\n      throw error\n    }\n  } catch (error) {\n    // fallback to polyfill implementation\n    Object.assign(globalThis, requirePonyfill_es2018());\n  }\n}\n\ntry {\n  // Don't use node: prefix for this, require+node: is not supported until node v14.14\n  // Only `import()` can use prefix in 12.20 and later\n  const { Blob } = require('buffer');\n  if (Blob && !Blob.prototype.stream) {\n    Blob.prototype.stream = function name (params) {\n      let position = 0;\n      const blob = this;\n\n      return new ReadableStream({\n        type: 'bytes',\n        async pull (ctrl) {\n          const chunk = blob.slice(position, Math.min(blob.size, position + POOL_SIZE$1));\n          const buffer = await chunk.arrayBuffer();\n          position += buffer.byteLength;\n          ctrl.enqueue(new Uint8Array(buffer));\n\n          if (position === blob.size) {\n            ctrl.close();\n          }\n        }\n      })\n    };\n  }\n} catch (error) {}\n\n/*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\n\n// 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE = 65536;\n\n/** @param {(Blob | Uint8Array)[]} parts */\nasync function * toIterator (parts, clone = true) {\n  for (const part of parts) {\n    if ('stream' in part) {\n      yield * (/** @type {AsyncIterableIterator<Uint8Array>} */ (part.stream()));\n    } else if (ArrayBuffer.isView(part)) {\n      if (clone) {\n        let position = part.byteOffset;\n        const end = part.byteOffset + part.byteLength;\n        while (position !== end) {\n          const size = Math.min(end - position, POOL_SIZE);\n          const chunk = part.buffer.slice(position, position + size);\n          position += chunk.byteLength;\n          yield new Uint8Array(chunk);\n        }\n      } else {\n        yield part;\n      }\n    /* c8 ignore next 10 */\n    } else {\n      // For blobs that have arrayBuffer but no stream method (nodes buffer.Blob)\n      let position = 0, b = (/** @type {Blob} */ (part));\n      while (position !== b.size) {\n        const chunk = b.slice(position, Math.min(b.size, position + POOL_SIZE));\n        const buffer = await chunk.arrayBuffer();\n        position += buffer.byteLength;\n        yield new Uint8Array(buffer);\n      }\n    }\n  }\n}\n\nconst _Blob = class Blob {\n  /** @type {Array.<(Blob|Uint8Array)>} */\n  #parts = []\n  #type = ''\n  #size = 0\n  #endings = 'transparent'\n\n  /**\n   * The Blob() constructor returns a new Blob object. The content\n   * of the blob consists of the concatenation of the values given\n   * in the parameter array.\n   *\n   * @param {*} blobParts\n   * @param {{ type?: string, endings?: string }} [options]\n   */\n  constructor (blobParts = [], options = {}) {\n    if (typeof blobParts !== 'object' || blobParts === null) {\n      throw new TypeError('Failed to construct \\'Blob\\': The provided value cannot be converted to a sequence.')\n    }\n\n    if (typeof blobParts[Symbol.iterator] !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': The object must have a callable @@iterator property.')\n    }\n\n    if (typeof options !== 'object' && typeof options !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': parameter 2 cannot convert to dictionary.')\n    }\n\n    if (options === null) options = {};\n\n    const encoder = new TextEncoder();\n    for (const element of blobParts) {\n      let part;\n      if (ArrayBuffer.isView(element)) {\n        part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength));\n      } else if (element instanceof ArrayBuffer) {\n        part = new Uint8Array(element.slice(0));\n      } else if (element instanceof Blob) {\n        part = element;\n      } else {\n        part = encoder.encode(`${element}`);\n      }\n\n      const size = ArrayBuffer.isView(part) ? part.byteLength : part.size;\n      // Avoid pushing empty parts into the array to better GC them\n      if (size) {\n        this.#size += size;\n        this.#parts.push(part);\n      }\n    }\n\n    this.#endings = `${options.endings === undefined ? 'transparent' : options.endings}`;\n    const type = options.type === undefined ? '' : String(options.type);\n    this.#type = /^[\\x20-\\x7E]*$/.test(type) ? type : '';\n  }\n\n  /**\n   * The Blob interface's size property returns the\n   * size of the Blob in bytes.\n   */\n  get size () {\n    return this.#size\n  }\n\n  /**\n   * The type property of a Blob object returns the MIME type of the file.\n   */\n  get type () {\n    return this.#type\n  }\n\n  /**\n   * The text() method in the Blob interface returns a Promise\n   * that resolves with a string containing the contents of\n   * the blob, interpreted as UTF-8.\n   *\n   * @return {Promise<string>}\n   */\n  async text () {\n    // More optimized than using this.arrayBuffer()\n    // that requires twice as much ram\n    const decoder = new TextDecoder();\n    let str = '';\n    for await (const part of toIterator(this.#parts, false)) {\n      str += decoder.decode(part, { stream: true });\n    }\n    // Remaining\n    str += decoder.decode();\n    return str\n  }\n\n  /**\n   * The arrayBuffer() method in the Blob interface returns a\n   * Promise that resolves with the contents of the blob as\n   * binary data contained in an ArrayBuffer.\n   *\n   * @return {Promise<ArrayBuffer>}\n   */\n  async arrayBuffer () {\n    // Easier way... Just a unnecessary overhead\n    // const view = new Uint8Array(this.size);\n    // await this.stream().getReader({mode: 'byob'}).read(view);\n    // return view.buffer;\n\n    const data = new Uint8Array(this.size);\n    let offset = 0;\n    for await (const chunk of toIterator(this.#parts, false)) {\n      data.set(chunk, offset);\n      offset += chunk.length;\n    }\n\n    return data.buffer\n  }\n\n  stream () {\n    const it = toIterator(this.#parts, true);\n\n    return new globalThis.ReadableStream({\n      // @ts-ignore\n      type: 'bytes',\n      async pull (ctrl) {\n        const chunk = await it.next();\n        chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value);\n      },\n\n      async cancel () {\n        await it.return();\n      }\n    })\n  }\n\n  /**\n   * The Blob interface's slice() method creates and returns a\n   * new Blob object which contains data from a subset of the\n   * blob on which it's called.\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @param {string} [type]\n   */\n  slice (start = 0, end = this.size, type = '') {\n    const { size } = this;\n\n    let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size);\n    let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size);\n\n    const span = Math.max(relativeEnd - relativeStart, 0);\n    const parts = this.#parts;\n    const blobParts = [];\n    let added = 0;\n\n    for (const part of parts) {\n      // don't add the overflow to new blobParts\n      if (added >= span) {\n        break\n      }\n\n      const size = ArrayBuffer.isView(part) ? part.byteLength : part.size;\n      if (relativeStart && size <= relativeStart) {\n        // Skip the beginning and change the relative\n        // start & end position as we skip the unwanted parts\n        relativeStart -= size;\n        relativeEnd -= size;\n      } else {\n        let chunk;\n        if (ArrayBuffer.isView(part)) {\n          chunk = part.subarray(relativeStart, Math.min(size, relativeEnd));\n          added += chunk.byteLength;\n        } else {\n          chunk = part.slice(relativeStart, Math.min(size, relativeEnd));\n          added += chunk.size;\n        }\n        relativeEnd -= size;\n        blobParts.push(chunk);\n        relativeStart = 0; // All next sequential parts should start at 0\n      }\n    }\n\n    const blob = new Blob([], { type: String(type).toLowerCase() });\n    blob.#size = span;\n    blob.#parts = blobParts;\n\n    return blob\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Blob'\n  }\n\n  static [Symbol.hasInstance] (object) {\n    return (\n      object &&\n      typeof object === 'object' &&\n      typeof object.constructor === 'function' &&\n      (\n        typeof object.stream === 'function' ||\n        typeof object.arrayBuffer === 'function'\n      ) &&\n      /^(Blob|File)$/.test(object[Symbol.toStringTag])\n    )\n  }\n};\n\nObject.defineProperties(_Blob.prototype, {\n  size: { enumerable: true },\n  type: { enumerable: true },\n  slice: { enumerable: true }\n});\n\n/** @type {typeof globalThis.Blob} */\nconst Blob = _Blob;\nconst _Blob$1 = Blob;\n\nconst _File = class File extends _Blob$1 {\n  #lastModified = 0\n  #name = ''\n\n  /**\n   * @param {*[]} fileBits\n   * @param {string} fileName\n   * @param {{lastModified?: number, type?: string}} options\n   */// @ts-ignore\n  constructor (fileBits, fileName, options = {}) {\n    if (arguments.length < 2) {\n      throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`)\n    }\n    super(fileBits, options);\n\n    if (options === null) options = {};\n\n    // Simulate WebIDL type casting for NaN value in lastModified option.\n    const lastModified = options.lastModified === undefined ? Date.now() : Number(options.lastModified);\n    if (!Number.isNaN(lastModified)) {\n      this.#lastModified = lastModified;\n    }\n\n    this.#name = String(fileName);\n  }\n\n  get name () {\n    return this.#name\n  }\n\n  get lastModified () {\n    return this.#lastModified\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'File'\n  }\n\n  static [Symbol.hasInstance] (object) {\n    return !!object && object instanceof _Blob$1 &&\n      /^(File)$/.test(object[Symbol.toStringTag])\n  }\n};\n\n/** @type {typeof globalThis.File} */// @ts-ignore\nconst File = _File;\nconst File$1 = File;\n\n/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\n\nvar {toStringTag:t,iterator:i,hasInstance:h}=Symbol,\nr=Math.random,\nm='append,set,get,getAll,delete,keys,values,entries,forEach,constructor'.split(','),\nf=(a,b,c)=>(a+='',/^(Blob|File)$/.test(b && b[t])?[(c=c!==void 0?c+'':b[t]=='File'?b.name:'blob',a),b.name!==c||b[t]=='blob'?new File$1([b],c,b):b]:[a,b+'']),\ne=(c,f)=>(f?c:c.replace(/\\r?\\n|\\r/g,'\\r\\n')).replace(/\\n/g,'%0A').replace(/\\r/g,'%0D').replace(/\"/g,'%22'),\nx=(n, a, e)=>{if(a.length<e){throw new TypeError(`Failed to execute '${n}' on 'FormData': ${e} arguments required, but only ${a.length} present.`)}};\n\n/** @type {typeof globalThis.FormData} */\nconst FormData = class FormData {\n#d=[];\nconstructor(...a){if(a.length)throw new TypeError(`Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.`)}\nget [t]() {return 'FormData'}\n[i](){return this.entries()}\nstatic [h](o) {return o&&typeof o==='object'&&o[t]==='FormData'&&!m.some(m=>typeof o[m]!='function')}\nappend(...a){x('append',arguments,2);this.#d.push(f(...a));}\ndelete(a){x('delete',arguments,1);a+='';this.#d=this.#d.filter(([b])=>b!==a);}\nget(a){x('get',arguments,1);a+='';for(var b=this.#d,l=b.length,c=0;c<l;c++)if(b[c][0]===a)return b[c][1];return null}\ngetAll(a,b){x('getAll',arguments,1);b=[];a+='';this.#d.forEach(c=>c[0]===a&&b.push(c[1]));return b}\nhas(a){x('has',arguments,1);a+='';return this.#d.some(b=>b[0]===a)}\nforEach(a,b){x('forEach',arguments,1);for(var [c,d]of this)a.call(b,d,c,this);}\nset(...a){x('set',arguments,2);var b=[],c=!0;a=f(...a);this.#d.forEach(d=>{d[0]===a[0]?c&&(c=!b.push(a)):b.push(d);});c&&b.push(a);this.#d=b;}\n*entries(){yield*this.#d;}\n*keys(){for(var[a]of this)yield a;}\n*values(){for(var[,a]of this)yield a;}};\n\n/** @param {FormData} F */\nfunction formDataToBlob (F,B=_Blob$1){\nvar b=`${r()}${r()}`.replace(/\\./g, '').slice(-28).padStart(32, '-'),c=[],p=`--${b}\\r\\nContent-Disposition: form-data; name=\"`;\nF.forEach((v,n)=>typeof v=='string'\n?c.push(p+e(n)+`\"\\r\\n\\r\\n${v.replace(/\\r(?!\\n)|(?<!\\r)\\n/g, '\\r\\n')}\\r\\n`)\n:c.push(p+e(n)+`\"; filename=\"${e(v.name, 1)}\"\\r\\nContent-Type: ${v.type||\"application/octet-stream\"}\\r\\n\\r\\n`, v, '\\r\\n'));\nc.push(`--${b}--`);\nreturn new B(c,{type:\"multipart/form-data; boundary=\"+b})}\n\nclass FetchBaseError extends Error {\n\tconstructor(message, type) {\n\t\tsuper(message);\n\t\t// Hide custom error implementation details from end-users\n\t\tError.captureStackTrace(this, this.constructor);\n\n\t\tthis.type = type;\n\t}\n\n\tget name() {\n\t\treturn this.constructor.name;\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn this.constructor.name;\n\t}\n}\n\n/**\n * @typedef {{ address?: string, code: string, dest?: string, errno: number, info?: object, message: string, path?: string, port?: number, syscall: string}} SystemError\n*/\n\n/**\n * FetchError interface for operational errors\n */\nclass FetchError extends FetchBaseError {\n\t/**\n\t * @param  {string} message -      Error message for human\n\t * @param  {string} [type] -        Error type for machine\n\t * @param  {SystemError} [systemError] - For Node.js system error\n\t */\n\tconstructor(message, type, systemError) {\n\t\tsuper(message, type);\n\t\t// When err.type is `system`, err.erroredSysCall contains system error and err.code contains system error code\n\t\tif (systemError) {\n\t\t\t// eslint-disable-next-line no-multi-assign\n\t\t\tthis.code = this.errno = systemError.code;\n\t\t\tthis.erroredSysCall = systemError.syscall;\n\t\t}\n\t}\n}\n\n/**\n * Is.js\n *\n * Object type checks.\n */\n\nconst NAME = Symbol.toStringTag;\n\n/**\n * Check if `obj` is a URLSearchParams object\n * ref: https://github.com/node-fetch/node-fetch/issues/296#issuecomment-307598143\n * @param {*} object - Object to check for\n * @return {boolean}\n */\nconst isURLSearchParameters = object => {\n\treturn (\n\t\ttypeof object === 'object' &&\n\t\ttypeof object.append === 'function' &&\n\t\ttypeof object.delete === 'function' &&\n\t\ttypeof object.get === 'function' &&\n\t\ttypeof object.getAll === 'function' &&\n\t\ttypeof object.has === 'function' &&\n\t\ttypeof object.set === 'function' &&\n\t\ttypeof object.sort === 'function' &&\n\t\tobject[NAME] === 'URLSearchParams'\n\t);\n};\n\n/**\n * Check if `object` is a W3C `Blob` object (which `File` inherits from)\n * @param {*} object - Object to check for\n * @return {boolean}\n */\nconst isBlob = object => {\n\treturn (\n\t\tobject &&\n\t\ttypeof object === 'object' &&\n\t\ttypeof object.arrayBuffer === 'function' &&\n\t\ttypeof object.type === 'string' &&\n\t\ttypeof object.stream === 'function' &&\n\t\ttypeof object.constructor === 'function' &&\n\t\t/^(Blob|File)$/.test(object[NAME])\n\t);\n};\n\n/**\n * Check if `obj` is an instance of AbortSignal.\n * @param {*} object - Object to check for\n * @return {boolean}\n */\nconst isAbortSignal = object => {\n\treturn (\n\t\ttypeof object === 'object' && (\n\t\t\tobject[NAME] === 'AbortSignal' ||\n\t\t\tobject[NAME] === 'EventTarget'\n\t\t)\n\t);\n};\n\n/**\n * isDomainOrSubdomain reports whether sub is a subdomain (or exact match) of\n * the parent domain.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */\nconst isDomainOrSubdomain = (destination, original) => {\n\tconst orig = new URL(original).hostname;\n\tconst dest = new URL(destination).hostname;\n\n\treturn orig === dest || orig.endsWith(`.${dest}`);\n};\n\n/**\n * isSameProtocol reports whether the two provided URLs use the same protocol.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */\nconst isSameProtocol = (destination, original) => {\n\tconst orig = new URL(original).protocol;\n\tconst dest = new URL(destination).protocol;\n\n\treturn orig === dest;\n};\n\nconst pipeline = promisify(Stream.pipeline);\nconst INTERNALS$2 = Symbol('Body internals');\n\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nclass Body {\n\tconstructor(body, {\n\t\tsize = 0\n\t} = {}) {\n\t\tlet boundary = null;\n\n\t\tif (body === null) {\n\t\t\t// Body is undefined or null\n\t\t\tbody = null;\n\t\t} else if (isURLSearchParameters(body)) {\n\t\t\t// Body is a URLSearchParams\n\t\t\tbody = Buffer$1.from(body.toString());\n\t\t} else if (isBlob(body)) ; else if (Buffer$1.isBuffer(body)) ; else if (types.isAnyArrayBuffer(body)) {\n\t\t\t// Body is ArrayBuffer\n\t\t\tbody = Buffer$1.from(body);\n\t\t} else if (ArrayBuffer.isView(body)) {\n\t\t\t// Body is ArrayBufferView\n\t\t\tbody = Buffer$1.from(body.buffer, body.byteOffset, body.byteLength);\n\t\t} else if (body instanceof Stream) ; else if (body instanceof FormData) {\n\t\t\t// Body is FormData\n\t\t\tbody = formDataToBlob(body);\n\t\t\tboundary = body.type.split('=')[1];\n\t\t} else {\n\t\t\t// None of the above\n\t\t\t// coerce to string then buffer\n\t\t\tbody = Buffer$1.from(String(body));\n\t\t}\n\n\t\tlet stream = body;\n\n\t\tif (Buffer$1.isBuffer(body)) {\n\t\t\tstream = Stream.Readable.from(body);\n\t\t} else if (isBlob(body)) {\n\t\t\tstream = Stream.Readable.from(body.stream());\n\t\t}\n\n\t\tthis[INTERNALS$2] = {\n\t\t\tbody,\n\t\t\tstream,\n\t\t\tboundary,\n\t\t\tdisturbed: false,\n\t\t\terror: null\n\t\t};\n\t\tthis.size = size;\n\n\t\tif (body instanceof Stream) {\n\t\t\tbody.on('error', error_ => {\n\t\t\t\tconst error = error_ instanceof FetchBaseError ?\n\t\t\t\t\terror_ :\n\t\t\t\t\tnew FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, 'system', error_);\n\t\t\t\tthis[INTERNALS$2].error = error;\n\t\t\t});\n\t\t}\n\t}\n\n\tget body() {\n\t\treturn this[INTERNALS$2].stream;\n\t}\n\n\tget bodyUsed() {\n\t\treturn this[INTERNALS$2].disturbed;\n\t}\n\n\t/**\n\t * Decode response as ArrayBuffer\n\t *\n\t * @return  Promise\n\t */\n\tasync arrayBuffer() {\n\t\tconst {buffer, byteOffset, byteLength} = await consumeBody(this);\n\t\treturn buffer.slice(byteOffset, byteOffset + byteLength);\n\t}\n\n\tasync formData() {\n\t\tconst ct = this.headers.get('content-type');\n\n\t\tif (ct.startsWith('application/x-www-form-urlencoded')) {\n\t\t\tconst formData = new FormData();\n\t\t\tconst parameters = new URLSearchParams(await this.text());\n\n\t\t\tfor (const [name, value] of parameters) {\n\t\t\t\tformData.append(name, value);\n\t\t\t}\n\n\t\t\treturn formData;\n\t\t}\n\n\t\tconst {toFormData} = await import('../chunks/multipart-parser.mjs');\n\t\treturn toFormData(this.body, ct);\n\t}\n\n\t/**\n\t * Return raw response as Blob\n\t *\n\t * @return Promise\n\t */\n\tasync blob() {\n\t\tconst ct = (this.headers && this.headers.get('content-type')) || (this[INTERNALS$2].body && this[INTERNALS$2].body.type) || '';\n\t\tconst buf = await this.arrayBuffer();\n\n\t\treturn new _Blob$1([buf], {\n\t\t\ttype: ct\n\t\t});\n\t}\n\n\t/**\n\t * Decode response as json\n\t *\n\t * @return  Promise\n\t */\n\tasync json() {\n\t\tconst text = await this.text();\n\t\treturn JSON.parse(text);\n\t}\n\n\t/**\n\t * Decode response as text\n\t *\n\t * @return  Promise\n\t */\n\tasync text() {\n\t\tconst buffer = await consumeBody(this);\n\t\treturn new TextDecoder().decode(buffer);\n\t}\n\n\t/**\n\t * Decode response as buffer (non-spec api)\n\t *\n\t * @return  Promise\n\t */\n\tbuffer() {\n\t\treturn consumeBody(this);\n\t}\n}\n\nBody.prototype.buffer = deprecate(Body.prototype.buffer, 'Please use \\'response.arrayBuffer()\\' instead of \\'response.buffer()\\'', 'node-fetch#buffer');\n\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n\tbody: {enumerable: true},\n\tbodyUsed: {enumerable: true},\n\tarrayBuffer: {enumerable: true},\n\tblob: {enumerable: true},\n\tjson: {enumerable: true},\n\ttext: {enumerable: true},\n\tdata: {get: deprecate(() => {},\n\t\t'data doesn\\'t exist, use json(), text(), arrayBuffer(), or body instead',\n\t\t'https://github.com/node-fetch/node-fetch/issues/1000 (response)')}\n});\n\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return Promise\n */\nasync function consumeBody(data) {\n\tif (data[INTERNALS$2].disturbed) {\n\t\tthrow new TypeError(`body used already for: ${data.url}`);\n\t}\n\n\tdata[INTERNALS$2].disturbed = true;\n\n\tif (data[INTERNALS$2].error) {\n\t\tthrow data[INTERNALS$2].error;\n\t}\n\n\tconst {body} = data;\n\n\t// Body is null\n\tif (body === null) {\n\t\treturn Buffer$1.alloc(0);\n\t}\n\n\t/* c8 ignore next 3 */\n\tif (!(body instanceof Stream)) {\n\t\treturn Buffer$1.alloc(0);\n\t}\n\n\t// Body is stream\n\t// get ready to actually consume the body\n\tconst accum = [];\n\tlet accumBytes = 0;\n\n\ttry {\n\t\tfor await (const chunk of body) {\n\t\t\tif (data.size > 0 && accumBytes + chunk.length > data.size) {\n\t\t\t\tconst error = new FetchError(`content size at ${data.url} over limit: ${data.size}`, 'max-size');\n\t\t\t\tbody.destroy(error);\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\taccumBytes += chunk.length;\n\t\t\taccum.push(chunk);\n\t\t}\n\t} catch (error) {\n\t\tconst error_ = error instanceof FetchBaseError ? error : new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, 'system', error);\n\t\tthrow error_;\n\t}\n\n\tif (body.readableEnded === true || body._readableState.ended === true) {\n\t\ttry {\n\t\t\tif (accum.every(c => typeof c === 'string')) {\n\t\t\t\treturn Buffer$1.from(accum.join(''));\n\t\t\t}\n\n\t\t\treturn Buffer$1.concat(accum, accumBytes);\n\t\t} catch (error) {\n\t\t\tthrow new FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, 'system', error);\n\t\t}\n\t} else {\n\t\tthrow new FetchError(`Premature close of server response while trying to fetch ${data.url}`);\n\t}\n}\n\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed   instance       Response or Request instance\n * @param   String  highWaterMark  highWaterMark for both PassThrough body streams\n * @return  Mixed\n */\nconst clone = (instance, highWaterMark) => {\n\tlet p1;\n\tlet p2;\n\tlet {body} = instance[INTERNALS$2];\n\n\t// Don't allow cloning a used body\n\tif (instance.bodyUsed) {\n\t\tthrow new Error('cannot clone body after it is used');\n\t}\n\n\t// Check that body is a stream and not form-data object\n\t// note: we can't clone the form-data object without having it as a dependency\n\tif ((body instanceof Stream) && (typeof body.getBoundary !== 'function')) {\n\t\t// Tee instance body\n\t\tp1 = new PassThrough({highWaterMark});\n\t\tp2 = new PassThrough({highWaterMark});\n\t\tbody.pipe(p1);\n\t\tbody.pipe(p2);\n\t\t// Set instance body to teed body and return the other teed body\n\t\tinstance[INTERNALS$2].stream = p1;\n\t\tbody = p2;\n\t}\n\n\treturn body;\n};\n\nconst getNonSpecFormDataBoundary = deprecate(\n\tbody => body.getBoundary(),\n\t'form-data doesn\\'t follow the spec and requires special treatment. Use alternative package',\n\t'https://github.com/node-fetch/node-fetch/issues/1167'\n);\n\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param {any} body Any options.body input\n * @returns {string | null}\n */\nconst extractContentType = (body, request) => {\n\t// Body is null or undefined\n\tif (body === null) {\n\t\treturn null;\n\t}\n\n\t// Body is string\n\tif (typeof body === 'string') {\n\t\treturn 'text/plain;charset=UTF-8';\n\t}\n\n\t// Body is a URLSearchParams\n\tif (isURLSearchParameters(body)) {\n\t\treturn 'application/x-www-form-urlencoded;charset=UTF-8';\n\t}\n\n\t// Body is blob\n\tif (isBlob(body)) {\n\t\treturn body.type || null;\n\t}\n\n\t// Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)\n\tif (Buffer$1.isBuffer(body) || types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {\n\t\treturn null;\n\t}\n\n\tif (body instanceof FormData) {\n\t\treturn `multipart/form-data; boundary=${request[INTERNALS$2].boundary}`;\n\t}\n\n\t// Detect form data input from form-data module\n\tif (body && typeof body.getBoundary === 'function') {\n\t\treturn `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;\n\t}\n\n\t// Body is stream - can't really do much about this\n\tif (body instanceof Stream) {\n\t\treturn null;\n\t}\n\n\t// Body constructor defaults other things to string\n\treturn 'text/plain;charset=UTF-8';\n};\n\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param {any} obj.body Body object from the Body instance.\n * @returns {number | null}\n */\nconst getTotalBytes = request => {\n\tconst {body} = request[INTERNALS$2];\n\n\t// Body is null or undefined\n\tif (body === null) {\n\t\treturn 0;\n\t}\n\n\t// Body is Blob\n\tif (isBlob(body)) {\n\t\treturn body.size;\n\t}\n\n\t// Body is Buffer\n\tif (Buffer$1.isBuffer(body)) {\n\t\treturn body.length;\n\t}\n\n\t// Detect form data input from form-data module\n\tif (body && typeof body.getLengthSync === 'function') {\n\t\treturn body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;\n\t}\n\n\t// Body is stream\n\treturn null;\n};\n\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param {Stream.Writable} dest The stream to write to.\n * @param obj.body Body object from the Body instance.\n * @returns {Promise<void>}\n */\nconst writeToStream = async (dest, {body}) => {\n\tif (body === null) {\n\t\t// Body is null\n\t\tdest.end();\n\t} else {\n\t\t// Body is stream\n\t\tawait pipeline(body, dest);\n\t}\n};\n\n/**\n * Headers.js\n *\n * Headers class offers convenient helpers\n */\n\n/* c8 ignore next 9 */\nconst validateHeaderName = typeof http.validateHeaderName === 'function' ?\n\thttp.validateHeaderName :\n\tname => {\n\t\tif (!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(name)) {\n\t\t\tconst error = new TypeError(`Header name must be a valid HTTP token [${name}]`);\n\t\t\tObject.defineProperty(error, 'code', {value: 'ERR_INVALID_HTTP_TOKEN'});\n\t\t\tthrow error;\n\t\t}\n\t};\n\n/* c8 ignore next 9 */\nconst validateHeaderValue = typeof http.validateHeaderValue === 'function' ?\n\thttp.validateHeaderValue :\n\t(name, value) => {\n\t\tif (/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(value)) {\n\t\t\tconst error = new TypeError(`Invalid character in header content [\"${name}\"]`);\n\t\t\tObject.defineProperty(error, 'code', {value: 'ERR_INVALID_CHAR'});\n\t\t\tthrow error;\n\t\t}\n\t};\n\n/**\n * @typedef {Headers | Record<string, string> | Iterable<readonly [string, string]> | Iterable<Iterable<string>>} HeadersInit\n */\n\n/**\n * This Fetch API interface allows you to perform various actions on HTTP request and response headers.\n * These actions include retrieving, setting, adding to, and removing.\n * A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.\n * You can add to this using methods like append() (see Examples.)\n * In all methods of this interface, header names are matched by case-insensitive byte sequence.\n *\n */\nclass Headers extends URLSearchParams {\n\t/**\n\t * Headers class\n\t *\n\t * @constructor\n\t * @param {HeadersInit} [init] - Response headers\n\t */\n\tconstructor(init) {\n\t\t// Validate and normalize init object in [name, value(s)][]\n\t\t/** @type {string[][]} */\n\t\tlet result = [];\n\t\tif (init instanceof Headers) {\n\t\t\tconst raw = init.raw();\n\t\t\tfor (const [name, values] of Object.entries(raw)) {\n\t\t\t\tresult.push(...values.map(value => [name, value]));\n\t\t\t}\n\t\t} else if (init == null) ; else if (typeof init === 'object' && !types.isBoxedPrimitive(init)) {\n\t\t\tconst method = init[Symbol.iterator];\n\t\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\t\tif (method == null) {\n\t\t\t\t// Record<ByteString, ByteString>\n\t\t\t\tresult.push(...Object.entries(init));\n\t\t\t} else {\n\t\t\t\tif (typeof method !== 'function') {\n\t\t\t\t\tthrow new TypeError('Header pairs must be iterable');\n\t\t\t\t}\n\n\t\t\t\t// Sequence<sequence<ByteString>>\n\t\t\t\t// Note: per spec we have to first exhaust the lists then process them\n\t\t\t\tresult = [...init]\n\t\t\t\t\t.map(pair => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttypeof pair !== 'object' || types.isBoxedPrimitive(pair)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthrow new TypeError('Each header pair must be an iterable object');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn [...pair];\n\t\t\t\t\t}).map(pair => {\n\t\t\t\t\t\tif (pair.length !== 2) {\n\t\t\t\t\t\t\tthrow new TypeError('Each header pair must be a name/value tuple');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn [...pair];\n\t\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError('Failed to construct \\'Headers\\': The provided value is not of type \\'(sequence<sequence<ByteString>> or record<ByteString, ByteString>)');\n\t\t}\n\n\t\t// Validate and lowercase\n\t\tresult =\n\t\t\tresult.length > 0 ?\n\t\t\t\tresult.map(([name, value]) => {\n\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\treturn [String(name).toLowerCase(), String(value)];\n\t\t\t\t}) :\n\t\t\t\tundefined;\n\n\t\tsuper(result);\n\n\t\t// Returning a Proxy that will lowercase key names, validate parameters and sort keys\n\t\t// eslint-disable-next-line no-constructor-return\n\t\treturn new Proxy(this, {\n\t\t\tget(target, p, receiver) {\n\t\t\t\tswitch (p) {\n\t\t\t\t\tcase 'append':\n\t\t\t\t\tcase 'set':\n\t\t\t\t\t\treturn (name, value) => {\n\t\t\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\t\t\treturn URLSearchParams.prototype[p].call(\n\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\tString(name).toLowerCase(),\n\t\t\t\t\t\t\t\tString(value)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t};\n\n\t\t\t\t\tcase 'delete':\n\t\t\t\t\tcase 'has':\n\t\t\t\t\tcase 'getAll':\n\t\t\t\t\t\treturn name => {\n\t\t\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\t\t\treturn URLSearchParams.prototype[p].call(\n\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\tString(name).toLowerCase()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t};\n\n\t\t\t\t\tcase 'keys':\n\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\ttarget.sort();\n\t\t\t\t\t\t\treturn new Set(URLSearchParams.prototype.keys.call(target)).keys();\n\t\t\t\t\t\t};\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn Reflect.get(target, p, receiver);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t/* c8 ignore next */\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn this.constructor.name;\n\t}\n\n\ttoString() {\n\t\treturn Object.prototype.toString.call(this);\n\t}\n\n\tget(name) {\n\t\tconst values = this.getAll(name);\n\t\tif (values.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet value = values.join(', ');\n\t\tif (/^content-encoding$/i.test(name)) {\n\t\t\tvalue = value.toLowerCase();\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tforEach(callback, thisArg = undefined) {\n\t\tfor (const name of this.keys()) {\n\t\t\tReflect.apply(callback, thisArg, [this.get(name), name, this]);\n\t\t}\n\t}\n\n\t* values() {\n\t\tfor (const name of this.keys()) {\n\t\t\tyield this.get(name);\n\t\t}\n\t}\n\n\t/**\n\t * @type {() => IterableIterator<[string, string]>}\n\t */\n\t* entries() {\n\t\tfor (const name of this.keys()) {\n\t\t\tyield [name, this.get(name)];\n\t\t}\n\t}\n\n\t[Symbol.iterator]() {\n\t\treturn this.entries();\n\t}\n\n\t/**\n\t * Node-fetch non-spec method\n\t * returning all headers and their values as array\n\t * @returns {Record<string, string[]>}\n\t */\n\traw() {\n\t\treturn [...this.keys()].reduce((result, key) => {\n\t\t\tresult[key] = this.getAll(key);\n\t\t\treturn result;\n\t\t}, {});\n\t}\n\n\t/**\n\t * For better console.log(headers) and also to convert Headers into Node.js Request compatible format\n\t */\n\t[Symbol.for('nodejs.util.inspect.custom')]() {\n\t\treturn [...this.keys()].reduce((result, key) => {\n\t\t\tconst values = this.getAll(key);\n\t\t\t// Http.request() only supports string as Host header.\n\t\t\t// This hack makes specifying custom Host header possible.\n\t\t\tif (key === 'host') {\n\t\t\t\tresult[key] = values[0];\n\t\t\t} else {\n\t\t\t\tresult[key] = values.length > 1 ? values : values[0];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}, {});\n\t}\n}\n\n/**\n * Re-shaping object for Web IDL tests\n * Only need to do it for overridden methods\n */\nObject.defineProperties(\n\tHeaders.prototype,\n\t['get', 'entries', 'forEach', 'values'].reduce((result, property) => {\n\t\tresult[property] = {enumerable: true};\n\t\treturn result;\n\t}, {})\n);\n\n/**\n * Create a Headers object from an http.IncomingMessage.rawHeaders, ignoring those that do\n * not conform to HTTP grammar productions.\n * @param {import('http').IncomingMessage['rawHeaders']} headers\n */\nfunction fromRawHeaders(headers = []) {\n\treturn new Headers(\n\t\theaders\n\t\t\t// Split into pairs\n\t\t\t.reduce((result, value, index, array) => {\n\t\t\t\tif (index % 2 === 0) {\n\t\t\t\t\tresult.push(array.slice(index, index + 2));\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}, [])\n\t\t\t.filter(([name, value]) => {\n\t\t\t\ttry {\n\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\treturn true;\n\t\t\t\t} catch {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t})\n\n\t);\n}\n\nconst redirectStatus = new Set([301, 302, 303, 307, 308]);\n\n/**\n * Redirect code matching\n *\n * @param {number} code - Status code\n * @return {boolean}\n */\nconst isRedirect = code => {\n\treturn redirectStatus.has(code);\n};\n\n/**\n * Response.js\n *\n * Response class provides content decoding\n */\n\nconst INTERNALS$1 = Symbol('Response internals');\n\n/**\n * Response class\n *\n * Ref: https://fetch.spec.whatwg.org/#response-class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nclass Response extends Body {\n\tconstructor(body = null, options = {}) {\n\t\tsuper(body, options);\n\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq, no-negated-condition\n\t\tconst status = options.status != null ? options.status : 200;\n\n\t\tconst headers = new Headers(options.headers);\n\n\t\tif (body !== null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(body, this);\n\t\t\tif (contentType) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tthis[INTERNALS$1] = {\n\t\t\ttype: 'default',\n\t\t\turl: options.url,\n\t\t\tstatus,\n\t\t\tstatusText: options.statusText || '',\n\t\t\theaders,\n\t\t\tcounter: options.counter,\n\t\t\thighWaterMark: options.highWaterMark\n\t\t};\n\t}\n\n\tget type() {\n\t\treturn this[INTERNALS$1].type;\n\t}\n\n\tget url() {\n\t\treturn this[INTERNALS$1].url || '';\n\t}\n\n\tget status() {\n\t\treturn this[INTERNALS$1].status;\n\t}\n\n\t/**\n\t * Convenience property representing if the request ended normally\n\t */\n\tget ok() {\n\t\treturn this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;\n\t}\n\n\tget redirected() {\n\t\treturn this[INTERNALS$1].counter > 0;\n\t}\n\n\tget statusText() {\n\t\treturn this[INTERNALS$1].statusText;\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS$1].headers;\n\t}\n\n\tget highWaterMark() {\n\t\treturn this[INTERNALS$1].highWaterMark;\n\t}\n\n\t/**\n\t * Clone this response\n\t *\n\t * @return  Response\n\t */\n\tclone() {\n\t\treturn new Response(clone(this, this.highWaterMark), {\n\t\t\ttype: this.type,\n\t\t\turl: this.url,\n\t\t\tstatus: this.status,\n\t\t\tstatusText: this.statusText,\n\t\t\theaders: this.headers,\n\t\t\tok: this.ok,\n\t\t\tredirected: this.redirected,\n\t\t\tsize: this.size,\n\t\t\thighWaterMark: this.highWaterMark\n\t\t});\n\t}\n\n\t/**\n\t * @param {string} url    The URL that the new response is to originate from.\n\t * @param {number} status An optional status code for the response (e.g., 302.)\n\t * @returns {Response}    A Response object.\n\t */\n\tstatic redirect(url, status = 302) {\n\t\tif (!isRedirect(status)) {\n\t\t\tthrow new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n\t\t}\n\n\t\treturn new Response(null, {\n\t\t\theaders: {\n\t\t\t\tlocation: new URL(url).toString()\n\t\t\t},\n\t\t\tstatus\n\t\t});\n\t}\n\n\tstatic error() {\n\t\tconst response = new Response(null, {status: 0, statusText: ''});\n\t\tresponse[INTERNALS$1].type = 'error';\n\t\treturn response;\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn 'Response';\n\t}\n}\n\nObject.defineProperties(Response.prototype, {\n\ttype: {enumerable: true},\n\turl: {enumerable: true},\n\tstatus: {enumerable: true},\n\tok: {enumerable: true},\n\tredirected: {enumerable: true},\n\tstatusText: {enumerable: true},\n\theaders: {enumerable: true},\n\tclone: {enumerable: true}\n});\n\nconst getSearch = parsedURL => {\n\tif (parsedURL.search) {\n\t\treturn parsedURL.search;\n\t}\n\n\tconst lastOffset = parsedURL.href.length - 1;\n\tconst hash = parsedURL.hash || (parsedURL.href[lastOffset] === '#' ? '#' : '');\n\treturn parsedURL.href[lastOffset - hash.length] === '?' ? '?' : '';\n};\n\n/**\n * @external URL\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/URL|URL}\n */\n\n/**\n * @module utils/referrer\n * @private\n */\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#strip-url|Referrer Policy §8.4. Strip url for use as a referrer}\n * @param {string} URL\n * @param {boolean} [originOnly=false]\n */\nfunction stripURLForUseAsAReferrer(url, originOnly = false) {\n\t// 1. If url is null, return no referrer.\n\tif (url == null) { // eslint-disable-line no-eq-null, eqeqeq\n\t\treturn 'no-referrer';\n\t}\n\n\turl = new URL(url);\n\n\t// 2. If url's scheme is a local scheme, then return no referrer.\n\tif (/^(about|blob|data):$/.test(url.protocol)) {\n\t\treturn 'no-referrer';\n\t}\n\n\t// 3. Set url's username to the empty string.\n\turl.username = '';\n\n\t// 4. Set url's password to null.\n\t// Note: `null` appears to be a mistake as this actually results in the password being `\"null\"`.\n\turl.password = '';\n\n\t// 5. Set url's fragment to null.\n\t// Note: `null` appears to be a mistake as this actually results in the fragment being `\"#null\"`.\n\turl.hash = '';\n\n\t// 6. If the origin-only flag is true, then:\n\tif (originOnly) {\n\t\t// 6.1. Set url's path to null.\n\t\t// Note: `null` appears to be a mistake as this actually results in the path being `\"/null\"`.\n\t\turl.pathname = '';\n\n\t\t// 6.2. Set url's query to null.\n\t\t// Note: `null` appears to be a mistake as this actually results in the query being `\"?null\"`.\n\t\turl.search = '';\n\t}\n\n\t// 7. Return url.\n\treturn url;\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#enumdef-referrerpolicy|enum ReferrerPolicy}\n */\nconst ReferrerPolicy = new Set([\n\t'',\n\t'no-referrer',\n\t'no-referrer-when-downgrade',\n\t'same-origin',\n\t'origin',\n\t'strict-origin',\n\t'origin-when-cross-origin',\n\t'strict-origin-when-cross-origin',\n\t'unsafe-url'\n]);\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#default-referrer-policy|default referrer policy}\n */\nconst DEFAULT_REFERRER_POLICY = 'strict-origin-when-cross-origin';\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#referrer-policies|Referrer Policy §3. Referrer Policies}\n * @param {string} referrerPolicy\n * @returns {string} referrerPolicy\n */\nfunction validateReferrerPolicy(referrerPolicy) {\n\tif (!ReferrerPolicy.has(referrerPolicy)) {\n\t\tthrow new TypeError(`Invalid referrerPolicy: ${referrerPolicy}`);\n\t}\n\n\treturn referrerPolicy;\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy|Referrer Policy §3.2. Is origin potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */\nfunction isOriginPotentiallyTrustworthy(url) {\n\t// 1. If origin is an opaque origin, return \"Not Trustworthy\".\n\t// Not applicable\n\n\t// 2. Assert: origin is a tuple origin.\n\t// Not for implementations\n\n\t// 3. If origin's scheme is either \"https\" or \"wss\", return \"Potentially Trustworthy\".\n\tif (/^(http|ws)s:$/.test(url.protocol)) {\n\t\treturn true;\n\t}\n\n\t// 4. If origin's host component matches one of the CIDR notations 127.0.0.0/8 or ::1/128 [RFC4632], return \"Potentially Trustworthy\".\n\tconst hostIp = url.host.replace(/(^\\[)|(]$)/g, '');\n\tconst hostIPVersion = isIP(hostIp);\n\n\tif (hostIPVersion === 4 && /^127\\./.test(hostIp)) {\n\t\treturn true;\n\t}\n\n\tif (hostIPVersion === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(hostIp)) {\n\t\treturn true;\n\t}\n\n\t// 5. If origin's host component is \"localhost\" or falls within \".localhost\", and the user agent conforms to the name resolution rules in [let-localhost-be-localhost], return \"Potentially Trustworthy\".\n\t// We are returning FALSE here because we cannot ensure conformance to\n\t// let-localhost-be-loalhost (https://tools.ietf.org/html/draft-west-let-localhost-be-localhost)\n\tif (url.host === 'localhost' || url.host.endsWith('.localhost')) {\n\t\treturn false;\n\t}\n\n\t// 6. If origin's scheme component is file, return \"Potentially Trustworthy\".\n\tif (url.protocol === 'file:') {\n\t\treturn true;\n\t}\n\n\t// 7. If origin's scheme component is one which the user agent considers to be authenticated, return \"Potentially Trustworthy\".\n\t// Not supported\n\n\t// 8. If origin has been configured as a trustworthy origin, return \"Potentially Trustworthy\".\n\t// Not supported\n\n\t// 9. Return \"Not Trustworthy\".\n\treturn false;\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-url-trustworthy|Referrer Policy §3.3. Is url potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */\nfunction isUrlPotentiallyTrustworthy(url) {\n\t// 1. If url is \"about:blank\" or \"about:srcdoc\", return \"Potentially Trustworthy\".\n\tif (/^about:(blank|srcdoc)$/.test(url)) {\n\t\treturn true;\n\t}\n\n\t// 2. If url's scheme is \"data\", return \"Potentially Trustworthy\".\n\tif (url.protocol === 'data:') {\n\t\treturn true;\n\t}\n\n\t// Note: The origin of blob: and filesystem: URLs is the origin of the context in which they were\n\t// created. Therefore, blobs created in a trustworthy origin will themselves be potentially\n\t// trustworthy.\n\tif (/^(blob|filesystem):$/.test(url.protocol)) {\n\t\treturn true;\n\t}\n\n\t// 3. Return the result of executing §3.2 Is origin potentially trustworthy? on url's origin.\n\treturn isOriginPotentiallyTrustworthy(url);\n}\n\n/**\n * Modifies the referrerURL to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerURLCallback\n * @param {external:URL} referrerURL\n * @returns {external:URL} modified referrerURL\n */\n\n/**\n * Modifies the referrerOrigin to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerOriginCallback\n * @param {external:URL} referrerOrigin\n * @returns {external:URL} modified referrerOrigin\n */\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}\n * @param {Request} request\n * @param {object} o\n * @param {module:utils/referrer~referrerURLCallback} o.referrerURLCallback\n * @param {module:utils/referrer~referrerOriginCallback} o.referrerOriginCallback\n * @returns {external:URL} Request's referrer\n */\nfunction determineRequestsReferrer(request, {referrerURLCallback, referrerOriginCallback} = {}) {\n\t// There are 2 notes in the specification about invalid pre-conditions.  We return null, here, for\n\t// these cases:\n\t// > Note: If request's referrer is \"no-referrer\", Fetch will not call into this algorithm.\n\t// > Note: If request's referrer policy is the empty string, Fetch will not call into this\n\t// > algorithm.\n\tif (request.referrer === 'no-referrer' || request.referrerPolicy === '') {\n\t\treturn null;\n\t}\n\n\t// 1. Let policy be request's associated referrer policy.\n\tconst policy = request.referrerPolicy;\n\n\t// 2. Let environment be request's client.\n\t// not applicable to node.js\n\n\t// 3. Switch on request's referrer:\n\tif (request.referrer === 'about:client') {\n\t\treturn 'no-referrer';\n\t}\n\n\t// \"a URL\": Let referrerSource be request's referrer.\n\tconst referrerSource = request.referrer;\n\n\t// 4. Let request's referrerURL be the result of stripping referrerSource for use as a referrer.\n\tlet referrerURL = stripURLForUseAsAReferrer(referrerSource);\n\n\t// 5. Let referrerOrigin be the result of stripping referrerSource for use as a referrer, with the\n\t//    origin-only flag set to true.\n\tlet referrerOrigin = stripURLForUseAsAReferrer(referrerSource, true);\n\n\t// 6. If the result of serializing referrerURL is a string whose length is greater than 4096, set\n\t//    referrerURL to referrerOrigin.\n\tif (referrerURL.toString().length > 4096) {\n\t\treferrerURL = referrerOrigin;\n\t}\n\n\t// 7. The user agent MAY alter referrerURL or referrerOrigin at this point to enforce arbitrary\n\t//    policy considerations in the interests of minimizing data leakage. For example, the user\n\t//    agent could strip the URL down to an origin, modify its host, replace it with an empty\n\t//    string, etc.\n\tif (referrerURLCallback) {\n\t\treferrerURL = referrerURLCallback(referrerURL);\n\t}\n\n\tif (referrerOriginCallback) {\n\t\treferrerOrigin = referrerOriginCallback(referrerOrigin);\n\t}\n\n\t// 8.Execute the statements corresponding to the value of policy:\n\tconst currentURL = new URL(request.url);\n\n\tswitch (policy) {\n\t\tcase 'no-referrer':\n\t\t\treturn 'no-referrer';\n\n\t\tcase 'origin':\n\t\t\treturn referrerOrigin;\n\n\t\tcase 'unsafe-url':\n\t\t\treturn referrerURL;\n\n\t\tcase 'strict-origin':\n\t\t\t// 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n\t\t\t//    potentially trustworthy URL, then return no referrer.\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n\t\t\t\treturn 'no-referrer';\n\t\t\t}\n\n\t\t\t// 2. Return referrerOrigin.\n\t\t\treturn referrerOrigin.toString();\n\n\t\tcase 'strict-origin-when-cross-origin':\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n\t\t\t//    return referrerURL.\n\t\t\tif (referrerURL.origin === currentURL.origin) {\n\t\t\t\treturn referrerURL;\n\t\t\t}\n\n\t\t\t// 2. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n\t\t\t//    potentially trustworthy URL, then return no referrer.\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n\t\t\t\treturn 'no-referrer';\n\t\t\t}\n\n\t\t\t// 3. Return referrerOrigin.\n\t\t\treturn referrerOrigin;\n\n\t\tcase 'same-origin':\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n\t\t\t//    return referrerURL.\n\t\t\tif (referrerURL.origin === currentURL.origin) {\n\t\t\t\treturn referrerURL;\n\t\t\t}\n\n\t\t\t// 2. Return no referrer.\n\t\t\treturn 'no-referrer';\n\n\t\tcase 'origin-when-cross-origin':\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n\t\t\t//    return referrerURL.\n\t\t\tif (referrerURL.origin === currentURL.origin) {\n\t\t\t\treturn referrerURL;\n\t\t\t}\n\n\t\t\t// Return referrerOrigin.\n\t\t\treturn referrerOrigin;\n\n\t\tcase 'no-referrer-when-downgrade':\n\t\t\t// 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n\t\t\t//    potentially trustworthy URL, then return no referrer.\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n\t\t\t\treturn 'no-referrer';\n\t\t\t}\n\n\t\t\t// 2. Return referrerURL.\n\t\t\treturn referrerURL;\n\n\t\tdefault:\n\t\t\tthrow new TypeError(`Invalid referrerPolicy: ${policy}`);\n\t}\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#parse-referrer-policy-from-header|Referrer Policy §8.1. Parse a referrer policy from a Referrer-Policy header}\n * @param {Headers} headers Response headers\n * @returns {string} policy\n */\nfunction parseReferrerPolicyFromHeader(headers) {\n\t// 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy`\n\t//    and response’s header list.\n\tconst policyTokens = (headers.get('referrer-policy') || '').split(/[,\\s]+/);\n\n\t// 2. Let policy be the empty string.\n\tlet policy = '';\n\n\t// 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty\n\t//    string, then set policy to token.\n\t// Note: This algorithm loops over multiple policy values to allow deployment of new policy\n\t// values with fallbacks for older user agents, as described in § 11.1 Unknown Policy Values.\n\tfor (const token of policyTokens) {\n\t\tif (token && ReferrerPolicy.has(token)) {\n\t\t\tpolicy = token;\n\t\t}\n\t}\n\n\t// 4. Return policy.\n\treturn policy;\n}\n\n/**\n * Request.js\n *\n * Request class contains server only options\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\nconst INTERNALS = Symbol('Request internals');\n\n/**\n * Check if `obj` is an instance of Request.\n *\n * @param  {*} object\n * @return {boolean}\n */\nconst isRequest = object => {\n\treturn (\n\t\ttypeof object === 'object' &&\n\t\ttypeof object[INTERNALS] === 'object'\n\t);\n};\n\nconst doBadDataWarn = deprecate(() => {},\n\t'.data is not a valid RequestInit property, use .body instead',\n\t'https://github.com/node-fetch/node-fetch/issues/1000 (request)');\n\n/**\n * Request class\n *\n * Ref: https://fetch.spec.whatwg.org/#request-class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\nclass Request extends Body {\n\tconstructor(input, init = {}) {\n\t\tlet parsedURL;\n\n\t\t// Normalize input and force URL to be encoded as UTF-8 (https://github.com/node-fetch/node-fetch/issues/245)\n\t\tif (isRequest(input)) {\n\t\t\tparsedURL = new URL(input.url);\n\t\t} else {\n\t\t\tparsedURL = new URL(input);\n\t\t\tinput = {};\n\t\t}\n\n\t\tif (parsedURL.username !== '' || parsedURL.password !== '') {\n\t\t\tthrow new TypeError(`${parsedURL} is an url with embedded credentials.`);\n\t\t}\n\n\t\tlet method = init.method || input.method || 'GET';\n\t\tif (/^(delete|get|head|options|post|put)$/i.test(method)) {\n\t\t\tmethod = method.toUpperCase();\n\t\t}\n\n\t\tif (!isRequest(init) && 'data' in init) {\n\t\t\tdoBadDataWarn();\n\t\t}\n\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\tif ((init.body != null || (isRequest(input) && input.body !== null)) &&\n\t\t\t(method === 'GET' || method === 'HEAD')) {\n\t\t\tthrow new TypeError('Request with GET/HEAD method cannot have body');\n\t\t}\n\n\t\tconst inputBody = init.body ?\n\t\t\tinit.body :\n\t\t\t(isRequest(input) && input.body !== null ?\n\t\t\t\tclone(input) :\n\t\t\t\tnull);\n\n\t\tsuper(inputBody, {\n\t\t\tsize: init.size || input.size || 0\n\t\t});\n\n\t\tconst headers = new Headers(init.headers || input.headers || {});\n\n\t\tif (inputBody !== null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(inputBody, this);\n\t\t\tif (contentType) {\n\t\t\t\theaders.set('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tlet signal = isRequest(input) ?\n\t\t\tinput.signal :\n\t\t\tnull;\n\t\tif ('signal' in init) {\n\t\t\tsignal = init.signal;\n\t\t}\n\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\tif (signal != null && !isAbortSignal(signal)) {\n\t\t\tthrow new TypeError('Expected signal to be an instanceof AbortSignal or EventTarget');\n\t\t}\n\n\t\t// §5.4, Request constructor steps, step 15.1\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\tlet referrer = init.referrer == null ? input.referrer : init.referrer;\n\t\tif (referrer === '') {\n\t\t\t// §5.4, Request constructor steps, step 15.2\n\t\t\treferrer = 'no-referrer';\n\t\t} else if (referrer) {\n\t\t\t// §5.4, Request constructor steps, step 15.3.1, 15.3.2\n\t\t\tconst parsedReferrer = new URL(referrer);\n\t\t\t// §5.4, Request constructor steps, step 15.3.3, 15.3.4\n\t\t\treferrer = /^about:(\\/\\/)?client$/.test(parsedReferrer) ? 'client' : parsedReferrer;\n\t\t} else {\n\t\t\treferrer = undefined;\n\t\t}\n\n\t\tthis[INTERNALS] = {\n\t\t\tmethod,\n\t\t\tredirect: init.redirect || input.redirect || 'follow',\n\t\t\theaders,\n\t\t\tparsedURL,\n\t\t\tsignal,\n\t\t\treferrer\n\t\t};\n\n\t\t// Node-fetch-only options\n\t\tthis.follow = init.follow === undefined ? (input.follow === undefined ? 20 : input.follow) : init.follow;\n\t\tthis.compress = init.compress === undefined ? (input.compress === undefined ? true : input.compress) : init.compress;\n\t\tthis.counter = init.counter || input.counter || 0;\n\t\tthis.agent = init.agent || input.agent;\n\t\tthis.highWaterMark = init.highWaterMark || input.highWaterMark || 16384;\n\t\tthis.insecureHTTPParser = init.insecureHTTPParser || input.insecureHTTPParser || false;\n\n\t\t// §5.4, Request constructor steps, step 16.\n\t\t// Default is empty string per https://fetch.spec.whatwg.org/#concept-request-referrer-policy\n\t\tthis.referrerPolicy = init.referrerPolicy || input.referrerPolicy || '';\n\t}\n\n\t/** @returns {string} */\n\tget method() {\n\t\treturn this[INTERNALS].method;\n\t}\n\n\t/** @returns {string} */\n\tget url() {\n\t\treturn format(this[INTERNALS].parsedURL);\n\t}\n\n\t/** @returns {Headers} */\n\tget headers() {\n\t\treturn this[INTERNALS].headers;\n\t}\n\n\tget redirect() {\n\t\treturn this[INTERNALS].redirect;\n\t}\n\n\t/** @returns {AbortSignal} */\n\tget signal() {\n\t\treturn this[INTERNALS].signal;\n\t}\n\n\t// https://fetch.spec.whatwg.org/#dom-request-referrer\n\tget referrer() {\n\t\tif (this[INTERNALS].referrer === 'no-referrer') {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (this[INTERNALS].referrer === 'client') {\n\t\t\treturn 'about:client';\n\t\t}\n\n\t\tif (this[INTERNALS].referrer) {\n\t\t\treturn this[INTERNALS].referrer.toString();\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tget referrerPolicy() {\n\t\treturn this[INTERNALS].referrerPolicy;\n\t}\n\n\tset referrerPolicy(referrerPolicy) {\n\t\tthis[INTERNALS].referrerPolicy = validateReferrerPolicy(referrerPolicy);\n\t}\n\n\t/**\n\t * Clone this request\n\t *\n\t * @return  Request\n\t */\n\tclone() {\n\t\treturn new Request(this);\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn 'Request';\n\t}\n}\n\nObject.defineProperties(Request.prototype, {\n\tmethod: {enumerable: true},\n\turl: {enumerable: true},\n\theaders: {enumerable: true},\n\tredirect: {enumerable: true},\n\tclone: {enumerable: true},\n\tsignal: {enumerable: true},\n\treferrer: {enumerable: true},\n\treferrerPolicy: {enumerable: true}\n});\n\n/**\n * Convert a Request to Node.js http request options.\n *\n * @param {Request} request - A Request instance\n * @return The options object to be passed to http.request\n */\nconst getNodeRequestOptions = request => {\n\tconst {parsedURL} = request[INTERNALS];\n\tconst headers = new Headers(request[INTERNALS].headers);\n\n\t// Fetch step 1.3\n\tif (!headers.has('Accept')) {\n\t\theaders.set('Accept', '*/*');\n\t}\n\n\t// HTTP-network-or-cache fetch steps 2.4-2.7\n\tlet contentLengthValue = null;\n\tif (request.body === null && /^(post|put)$/i.test(request.method)) {\n\t\tcontentLengthValue = '0';\n\t}\n\n\tif (request.body !== null) {\n\t\tconst totalBytes = getTotalBytes(request);\n\t\t// Set Content-Length if totalBytes is a number (that is not NaN)\n\t\tif (typeof totalBytes === 'number' && !Number.isNaN(totalBytes)) {\n\t\t\tcontentLengthValue = String(totalBytes);\n\t\t}\n\t}\n\n\tif (contentLengthValue) {\n\t\theaders.set('Content-Length', contentLengthValue);\n\t}\n\n\t// 4.1. Main fetch, step 2.6\n\t// > If request's referrer policy is the empty string, then set request's referrer policy to the\n\t// > default referrer policy.\n\tif (request.referrerPolicy === '') {\n\t\trequest.referrerPolicy = DEFAULT_REFERRER_POLICY;\n\t}\n\n\t// 4.1. Main fetch, step 2.7\n\t// > If request's referrer is not \"no-referrer\", set request's referrer to the result of invoking\n\t// > determine request's referrer.\n\tif (request.referrer && request.referrer !== 'no-referrer') {\n\t\trequest[INTERNALS].referrer = determineRequestsReferrer(request);\n\t} else {\n\t\trequest[INTERNALS].referrer = 'no-referrer';\n\t}\n\n\t// 4.5. HTTP-network-or-cache fetch, step 6.9\n\t// > If httpRequest's referrer is a URL, then append `Referer`/httpRequest's referrer, serialized\n\t// >  and isomorphic encoded, to httpRequest's header list.\n\tif (request[INTERNALS].referrer instanceof URL) {\n\t\theaders.set('Referer', request.referrer);\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.11\n\tif (!headers.has('User-Agent')) {\n\t\theaders.set('User-Agent', 'node-fetch');\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.15\n\tif (request.compress && !headers.has('Accept-Encoding')) {\n\t\theaders.set('Accept-Encoding', 'gzip, deflate, br');\n\t}\n\n\tlet {agent} = request;\n\tif (typeof agent === 'function') {\n\t\tagent = agent(parsedURL);\n\t}\n\n\tif (!headers.has('Connection') && !agent) {\n\t\theaders.set('Connection', 'close');\n\t}\n\n\t// HTTP-network fetch step 4.2\n\t// chunked encoding is handled by Node.js\n\n\tconst search = getSearch(parsedURL);\n\n\t// Pass the full URL directly to request(), but overwrite the following\n\t// options:\n\tconst options = {\n\t\t// Overwrite search to retain trailing ? (issue #776)\n\t\tpath: parsedURL.pathname + search,\n\t\t// The following options are not expressed in the URL\n\t\tmethod: request.method,\n\t\theaders: headers[Symbol.for('nodejs.util.inspect.custom')](),\n\t\tinsecureHTTPParser: request.insecureHTTPParser,\n\t\tagent\n\t};\n\n\treturn {\n\t\t/** @type {URL} */\n\t\tparsedURL,\n\t\toptions\n\t};\n};\n\n/**\n * AbortError interface for cancelled requests\n */\nclass AbortError extends FetchBaseError {\n\tconstructor(message, type = 'aborted') {\n\t\tsuper(message, type);\n\t}\n}\n\n/*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\n\nif (!globalThis.DOMException) {\n  try {\n    const { MessageChannel } = require('worker_threads'),\n    port = new MessageChannel().port1,\n    ab = new ArrayBuffer();\n    port.postMessage(ab, [ab, ab]);\n  } catch (err) {\n    err.constructor.name === 'DOMException' && (\n      globalThis.DOMException = err.constructor\n    );\n  }\n}\n\nvar nodeDomexception = globalThis.DOMException;\n\n/**\n * Index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\nconst supportedSchemas = new Set(['data:', 'http:', 'https:']);\n\n/**\n * Fetch function\n *\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\n * @param   {*} [options_] - Fetch options\n * @return  {Promise<import('./response').default>}\n */\nasync function fetch(url, options_) {\n\treturn new Promise((resolve, reject) => {\n\t\t// Build request object\n\t\tconst request = new Request(url, options_);\n\t\tconst {parsedURL, options} = getNodeRequestOptions(request);\n\t\tif (!supportedSchemas.has(parsedURL.protocol)) {\n\t\t\tthrow new TypeError(`node-fetch cannot load ${url}. URL scheme \"${parsedURL.protocol.replace(/:$/, '')}\" is not supported.`);\n\t\t}\n\n\t\tif (parsedURL.protocol === 'data:') {\n\t\t\tconst data = dataUriToBuffer(request.url);\n\t\t\tconst response = new Response(data, {headers: {'Content-Type': data.typeFull}});\n\t\t\tresolve(response);\n\t\t\treturn;\n\t\t}\n\n\t\t// Wrap http.request into fetch\n\t\tconst send = (parsedURL.protocol === 'https:' ? https : http).request;\n\t\tconst {signal} = request;\n\t\tlet response = null;\n\n\t\tconst abort = () => {\n\t\t\tconst error = new AbortError('The operation was aborted.');\n\t\t\treject(error);\n\t\t\tif (request.body && request.body instanceof Stream.Readable) {\n\t\t\t\trequest.body.destroy(error);\n\t\t\t}\n\n\t\t\tif (!response || !response.body) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresponse.body.emit('error', error);\n\t\t};\n\n\t\tif (signal && signal.aborted) {\n\t\t\tabort();\n\t\t\treturn;\n\t\t}\n\n\t\tconst abortAndFinalize = () => {\n\t\t\tabort();\n\t\t\tfinalize();\n\t\t};\n\n\t\t// Send request\n\t\tconst request_ = send(parsedURL.toString(), options);\n\n\t\tif (signal) {\n\t\t\tsignal.addEventListener('abort', abortAndFinalize);\n\t\t}\n\n\t\tconst finalize = () => {\n\t\t\trequest_.abort();\n\t\t\tif (signal) {\n\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\n\t\t\t}\n\t\t};\n\n\t\trequest_.on('error', error => {\n\t\t\treject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, 'system', error));\n\t\t\tfinalize();\n\t\t});\n\n\t\tfixResponseChunkedTransferBadEnding(request_, error => {\n\t\t\tif (response && response.body) {\n\t\t\t\tresponse.body.destroy(error);\n\t\t\t}\n\t\t});\n\n\t\t/* c8 ignore next 18 */\n\t\tif (process.version < 'v14') {\n\t\t\t// Before Node.js 14, pipeline() does not fully support async iterators and does not always\n\t\t\t// properly handle when the socket close/end events are out of order.\n\t\t\trequest_.on('socket', s => {\n\t\t\t\tlet endedWithEventsCount;\n\t\t\t\ts.prependListener('end', () => {\n\t\t\t\t\tendedWithEventsCount = s._eventsCount;\n\t\t\t\t});\n\t\t\t\ts.prependListener('close', hadError => {\n\t\t\t\t\t// if end happened before close but the socket didn't emit an error, do it now\n\t\t\t\t\tif (response && endedWithEventsCount < s._eventsCount && !hadError) {\n\t\t\t\t\t\tconst error = new Error('Premature close');\n\t\t\t\t\t\terror.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\t\t\tresponse.body.emit('error', error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\trequest_.on('response', response_ => {\n\t\t\trequest_.setTimeout(0);\n\t\t\tconst headers = fromRawHeaders(response_.rawHeaders);\n\n\t\t\t// HTTP fetch step 5\n\t\t\tif (isRedirect(response_.statusCode)) {\n\t\t\t\t// HTTP fetch step 5.2\n\t\t\t\tconst location = headers.get('Location');\n\n\t\t\t\t// HTTP fetch step 5.3\n\t\t\t\tlet locationURL = null;\n\t\t\t\ttry {\n\t\t\t\t\tlocationURL = location === null ? null : new URL(location, request.url);\n\t\t\t\t} catch {\n\t\t\t\t\t// error here can only be invalid URL in Location: header\n\t\t\t\t\t// do not throw when options.redirect == manual\n\t\t\t\t\t// let the user extract the errorneous redirect URL\n\t\t\t\t\tif (request.redirect !== 'manual') {\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// HTTP fetch step 5.5\n\t\t\t\tswitch (request.redirect) {\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'manual':\n\t\t\t\t\t\t// Nothing to do\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'follow': {\n\t\t\t\t\t\t// HTTP-redirect fetch step 2\n\t\t\t\t\t\tif (locationURL === null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 5\n\t\t\t\t\t\tif (request.counter >= request.follow) {\n\t\t\t\t\t\t\treject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 6 (counter increment)\n\t\t\t\t\t\t// Create a new Request object.\n\t\t\t\t\t\tconst requestOptions = {\n\t\t\t\t\t\t\theaders: new Headers(request.headers),\n\t\t\t\t\t\t\tfollow: request.follow,\n\t\t\t\t\t\t\tcounter: request.counter + 1,\n\t\t\t\t\t\t\tagent: request.agent,\n\t\t\t\t\t\t\tcompress: request.compress,\n\t\t\t\t\t\t\tmethod: request.method,\n\t\t\t\t\t\t\tbody: clone(request),\n\t\t\t\t\t\t\tsignal: request.signal,\n\t\t\t\t\t\t\tsize: request.size,\n\t\t\t\t\t\t\treferrer: request.referrer,\n\t\t\t\t\t\t\treferrerPolicy: request.referrerPolicy\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// when forwarding sensitive headers like \"Authorization\",\n\t\t\t\t\t\t// \"WWW-Authenticate\", and \"Cookie\" to untrusted targets,\n\t\t\t\t\t\t// headers will be ignored when following a redirect to a domain\n\t\t\t\t\t\t// that is not a subdomain match or exact match of the initial domain.\n\t\t\t\t\t\t// For example, a redirect from \"foo.com\" to either \"foo.com\" or \"sub.foo.com\"\n\t\t\t\t\t\t// will forward the sensitive headers, but a redirect to \"bar.com\" will not.\n\t\t\t\t\t\t// headers will also be ignored when following a redirect to a domain using\n\t\t\t\t\t\t// a different protocol. For example, a redirect from \"https://foo.com\" to \"http://foo.com\"\n\t\t\t\t\t\t// will not forward the sensitive headers\n\t\t\t\t\t\tif (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {\n\t\t\t\t\t\t\tfor (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {\n\t\t\t\t\t\t\t\trequestOptions.headers.delete(name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 9\n\t\t\t\t\t\tif (response_.statusCode !== 303 && request.body && options_.body instanceof Stream.Readable) {\n\t\t\t\t\t\t\treject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 11\n\t\t\t\t\t\tif (response_.statusCode === 303 || ((response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST')) {\n\t\t\t\t\t\t\trequestOptions.method = 'GET';\n\t\t\t\t\t\t\trequestOptions.body = undefined;\n\t\t\t\t\t\t\trequestOptions.headers.delete('content-length');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 14\n\t\t\t\t\t\tconst responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);\n\t\t\t\t\t\tif (responseReferrerPolicy) {\n\t\t\t\t\t\t\trequestOptions.referrerPolicy = responseReferrerPolicy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 15\n\t\t\t\t\t\tresolve(fetch(new Request(locationURL, requestOptions)));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Prepare response\n\t\t\tif (signal) {\n\t\t\t\tresponse_.once('end', () => {\n\t\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet body = pipeline$1(response_, new PassThrough(), error => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// see https://github.com/nodejs/node/pull/29376\n\t\t\t/* c8 ignore next 3 */\n\t\t\tif (process.version < 'v12.10') {\n\t\t\t\tresponse_.on('aborted', abortAndFinalize);\n\t\t\t}\n\n\t\t\tconst responseOptions = {\n\t\t\t\turl: request.url,\n\t\t\t\tstatus: response_.statusCode,\n\t\t\t\tstatusText: response_.statusMessage,\n\t\t\t\theaders,\n\t\t\t\tsize: request.size,\n\t\t\t\tcounter: request.counter,\n\t\t\t\thighWaterMark: request.highWaterMark\n\t\t\t};\n\n\t\t\t// HTTP-network fetch step 12.1.1.3\n\t\t\tconst codings = headers.get('Content-Encoding');\n\n\t\t\t// HTTP-network fetch step 12.1.1.4: handle content codings\n\n\t\t\t// in following scenarios we ignore compression support\n\t\t\t// 1. compression support is disabled\n\t\t\t// 2. HEAD request\n\t\t\t// 3. no Content-Encoding header\n\t\t\t// 4. no content response (204)\n\t\t\t// 5. content not modified response (304)\n\t\t\tif (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For Node v6+\n\t\t\t// Be less strict when decoding compressed responses, since sometimes\n\t\t\t// servers send slightly invalid responses that are still accepted\n\t\t\t// by common browsers.\n\t\t\t// Always using Z_SYNC_FLUSH is what cURL does.\n\t\t\tconst zlibOptions = {\n\t\t\t\tflush: zlib.Z_SYNC_FLUSH,\n\t\t\t\tfinishFlush: zlib.Z_SYNC_FLUSH\n\t\t\t};\n\n\t\t\t// For gzip\n\t\t\tif (codings === 'gzip' || codings === 'x-gzip') {\n\t\t\t\tbody = pipeline$1(body, zlib.createGunzip(zlibOptions), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For deflate\n\t\t\tif (codings === 'deflate' || codings === 'x-deflate') {\n\t\t\t\t// Handle the infamous raw deflate response from old servers\n\t\t\t\t// a hack for old IIS and Apache servers\n\t\t\t\tconst raw = pipeline$1(response_, new PassThrough(), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\traw.once('data', chunk => {\n\t\t\t\t\t// See http://stackoverflow.com/questions/37519828\n\t\t\t\t\tif ((chunk[0] & 0x0F) === 0x08) {\n\t\t\t\t\t\tbody = pipeline$1(body, zlib.createInflate(), error => {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody = pipeline$1(body, zlib.createInflateRaw(), error => {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\t\tresolve(response);\n\t\t\t\t});\n\t\t\t\traw.once('end', () => {\n\t\t\t\t\t// Some old IIS servers return zero-length OK deflate responses, so\n\t\t\t\t\t// 'data' is never emitted. See https://github.com/node-fetch/node-fetch/pull/903\n\t\t\t\t\tif (!response) {\n\t\t\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\t\t\tresolve(response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For br\n\t\t\tif (codings === 'br') {\n\t\t\t\tbody = pipeline$1(body, zlib.createBrotliDecompress(), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Otherwise, use response as-is\n\t\t\tresponse = new Response(body, responseOptions);\n\t\t\tresolve(response);\n\t\t});\n\n\t\t// eslint-disable-next-line promise/prefer-await-to-then\n\t\twriteToStream(request_, request).catch(reject);\n\t});\n}\n\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n\tconst LAST_CHUNK = Buffer$1.from('0\\r\\n\\r\\n');\n\n\tlet isChunkedTransfer = false;\n\tlet properLastChunkReceived = false;\n\tlet previousChunk;\n\n\trequest.on('response', response => {\n\t\tconst {headers} = response;\n\t\tisChunkedTransfer = headers['transfer-encoding'] === 'chunked' && !headers['content-length'];\n\t});\n\n\trequest.on('socket', socket => {\n\t\tconst onSocketClose = () => {\n\t\t\tif (isChunkedTransfer && !properLastChunkReceived) {\n\t\t\t\tconst error = new Error('Premature close');\n\t\t\t\terror.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\terrorCallback(error);\n\t\t\t}\n\t\t};\n\n\t\tconst onData = buf => {\n\t\t\tproperLastChunkReceived = Buffer$1.compare(buf.slice(-5), LAST_CHUNK) === 0;\n\n\t\t\t// Sometimes final 0-length chunk and end of message code are in separate packets\n\t\t\tif (!properLastChunkReceived && previousChunk) {\n\t\t\t\tproperLastChunkReceived = (\n\t\t\t\t\tBuffer$1.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 &&\n\t\t\t\t\tBuffer$1.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tpreviousChunk = buf;\n\t\t};\n\n\t\tsocket.prependListener('close', onSocketClose);\n\t\tsocket.on('data', onData);\n\n\t\trequest.on('close', () => {\n\t\t\tsocket.removeListener('close', onSocketClose);\n\t\t\tsocket.removeListener('data', onData);\n\t\t});\n\t});\n}\n\n/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * @copyright 2015 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n/**\n * @typedef {object} PrivateData\n * @property {EventTarget} eventTarget The event target.\n * @property {{type:string}} event The original event object.\n * @property {number} eventPhase The current event phase.\n * @property {EventTarget|null} currentTarget The current event target.\n * @property {boolean} canceled The flag to prevent default.\n * @property {boolean} stopped The flag to stop propagation.\n * @property {boolean} immediateStopped The flag to stop propagation immediately.\n * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.\n * @property {number} timeStamp The unix time.\n * @private\n */\n\n/**\n * Private data for event wrappers.\n * @type {WeakMap<Event, PrivateData>}\n * @private\n */\nconst privateData = new WeakMap();\n\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */\nconst wrappers = new WeakMap();\n\n/**\n * Get private data.\n * @param {Event} event The event object to get private data.\n * @returns {PrivateData} The private data of the event.\n * @private\n */\nfunction pd(event) {\n    const retv = privateData.get(event);\n    console.assert(\n        retv != null,\n        \"'this' is expected an Event object, but got\",\n        event\n    );\n    return retv\n}\n\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data {PrivateData} private data.\n */\nfunction setCancelFlag(data) {\n    if (data.passiveListener != null) {\n        if (\n            typeof console !== \"undefined\" &&\n            typeof console.error === \"function\"\n        ) {\n            console.error(\n                \"Unable to preventDefault inside passive event listener invocation.\",\n                data.passiveListener\n            );\n        }\n        return\n    }\n    if (!data.event.cancelable) {\n        return\n    }\n\n    data.canceled = true;\n    if (typeof data.event.preventDefault === \"function\") {\n        data.event.preventDefault();\n    }\n}\n\n/**\n * @see https://dom.spec.whatwg.org/#interface-event\n * @private\n */\n/**\n * The event wrapper.\n * @constructor\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Event|{type:string}} event The original event to wrap.\n */\nfunction Event(eventTarget, event) {\n    privateData.set(this, {\n        eventTarget,\n        event,\n        eventPhase: 2,\n        currentTarget: eventTarget,\n        canceled: false,\n        stopped: false,\n        immediateStopped: false,\n        passiveListener: null,\n        timeStamp: event.timeStamp || Date.now(),\n    });\n\n    // https://heycam.github.io/webidl/#Unforgeable\n    Object.defineProperty(this, \"isTrusted\", { value: false, enumerable: true });\n\n    // Define accessors\n    const keys = Object.keys(event);\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (!(key in this)) {\n            Object.defineProperty(this, key, defineRedirectDescriptor(key));\n        }\n    }\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEvent.prototype = {\n    /**\n     * The type of this event.\n     * @type {string}\n     */\n    get type() {\n        return pd(this).event.type\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get target() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get currentTarget() {\n        return pd(this).currentTarget\n    },\n\n    /**\n     * @returns {EventTarget[]} The composed path of this event.\n     */\n    composedPath() {\n        const currentTarget = pd(this).currentTarget;\n        if (currentTarget == null) {\n            return []\n        }\n        return [currentTarget]\n    },\n\n    /**\n     * Constant of NONE.\n     * @type {number}\n     */\n    get NONE() {\n        return 0\n    },\n\n    /**\n     * Constant of CAPTURING_PHASE.\n     * @type {number}\n     */\n    get CAPTURING_PHASE() {\n        return 1\n    },\n\n    /**\n     * Constant of AT_TARGET.\n     * @type {number}\n     */\n    get AT_TARGET() {\n        return 2\n    },\n\n    /**\n     * Constant of BUBBLING_PHASE.\n     * @type {number}\n     */\n    get BUBBLING_PHASE() {\n        return 3\n    },\n\n    /**\n     * The target of this event.\n     * @type {number}\n     */\n    get eventPhase() {\n        return pd(this).eventPhase\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopPropagation() {\n        const data = pd(this);\n\n        data.stopped = true;\n        if (typeof data.event.stopPropagation === \"function\") {\n            data.event.stopPropagation();\n        }\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopImmediatePropagation() {\n        const data = pd(this);\n\n        data.stopped = true;\n        data.immediateStopped = true;\n        if (typeof data.event.stopImmediatePropagation === \"function\") {\n            data.event.stopImmediatePropagation();\n        }\n    },\n\n    /**\n     * The flag to be bubbling.\n     * @type {boolean}\n     */\n    get bubbles() {\n        return Boolean(pd(this).event.bubbles)\n    },\n\n    /**\n     * The flag to be cancelable.\n     * @type {boolean}\n     */\n    get cancelable() {\n        return Boolean(pd(this).event.cancelable)\n    },\n\n    /**\n     * Cancel this event.\n     * @returns {void}\n     */\n    preventDefault() {\n        setCancelFlag(pd(this));\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     */\n    get defaultPrevented() {\n        return pd(this).canceled\n    },\n\n    /**\n     * The flag to be composed.\n     * @type {boolean}\n     */\n    get composed() {\n        return Boolean(pd(this).event.composed)\n    },\n\n    /**\n     * The unix time of this event.\n     * @type {number}\n     */\n    get timeStamp() {\n        return pd(this).timeStamp\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     * @deprecated\n     */\n    get srcElement() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The flag to stop event bubbling.\n     * @type {boolean}\n     * @deprecated\n     */\n    get cancelBubble() {\n        return pd(this).stopped\n    },\n    set cancelBubble(value) {\n        if (!value) {\n            return\n        }\n        const data = pd(this);\n\n        data.stopped = true;\n        if (typeof data.event.cancelBubble === \"boolean\") {\n            data.event.cancelBubble = true;\n        }\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     * @deprecated\n     */\n    get returnValue() {\n        return !pd(this).canceled\n    },\n    set returnValue(value) {\n        if (!value) {\n            setCancelFlag(pd(this));\n        }\n    },\n\n    /**\n     * Initialize this event object. But do nothing under event dispatching.\n     * @param {string} type The event type.\n     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.\n     * @param {boolean} [cancelable=false] The flag to be possible to cancel.\n     * @deprecated\n     */\n    initEvent() {\n        // Do nothing.\n    },\n};\n\n// `constructor` is not enumerable.\nObject.defineProperty(Event.prototype, \"constructor\", {\n    value: Event,\n    configurable: true,\n    writable: true,\n});\n\n// Ensure `event instanceof window.Event` is `true`.\nif (typeof window !== \"undefined\" && typeof window.Event !== \"undefined\") {\n    Object.setPrototypeOf(Event.prototype, window.Event.prototype);\n\n    // Make association for wrappers.\n    wrappers.set(window.Event.prototype, Event);\n}\n\n/**\n * Get the property descriptor to redirect a given property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to redirect the property.\n * @private\n */\nfunction defineRedirectDescriptor(key) {\n    return {\n        get() {\n            return pd(this).event[key]\n        },\n        set(value) {\n            pd(this).event[key] = value;\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Get the property descriptor to call a given method property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to call the method property.\n * @private\n */\nfunction defineCallDescriptor(key) {\n    return {\n        value() {\n            const event = pd(this).event;\n            return event[key].apply(event, arguments)\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define new wrapper class.\n * @param {Function} BaseEvent The base wrapper class.\n * @param {Object} proto The prototype of the original event.\n * @returns {Function} The defined wrapper class.\n * @private\n */\nfunction defineWrapper(BaseEvent, proto) {\n    const keys = Object.keys(proto);\n    if (keys.length === 0) {\n        return BaseEvent\n    }\n\n    /** CustomEvent */\n    function CustomEvent(eventTarget, event) {\n        BaseEvent.call(this, eventTarget, event);\n    }\n\n    CustomEvent.prototype = Object.create(BaseEvent.prototype, {\n        constructor: { value: CustomEvent, configurable: true, writable: true },\n    });\n\n    // Define accessors.\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (!(key in BaseEvent.prototype)) {\n            const descriptor = Object.getOwnPropertyDescriptor(proto, key);\n            const isFunc = typeof descriptor.value === \"function\";\n            Object.defineProperty(\n                CustomEvent.prototype,\n                key,\n                isFunc\n                    ? defineCallDescriptor(key)\n                    : defineRedirectDescriptor(key)\n            );\n        }\n    }\n\n    return CustomEvent\n}\n\n/**\n * Get the wrapper class of a given prototype.\n * @param {Object} proto The prototype of the original event to get its wrapper.\n * @returns {Function} The wrapper class.\n * @private\n */\nfunction getWrapper(proto) {\n    if (proto == null || proto === Object.prototype) {\n        return Event\n    }\n\n    let wrapper = wrappers.get(proto);\n    if (wrapper == null) {\n        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);\n        wrappers.set(proto, wrapper);\n    }\n    return wrapper\n}\n\n/**\n * Wrap a given event to management a dispatching.\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Object} event The event to wrap.\n * @returns {Event} The wrapper instance.\n * @private\n */\nfunction wrapEvent(eventTarget, event) {\n    const Wrapper = getWrapper(Object.getPrototypeOf(event));\n    return new Wrapper(eventTarget, event)\n}\n\n/**\n * Get the immediateStopped flag of a given event.\n * @param {Event} event The event to get.\n * @returns {boolean} The flag to stop propagation immediately.\n * @private\n */\nfunction isStopped(event) {\n    return pd(event).immediateStopped\n}\n\n/**\n * Set the current event phase of a given event.\n * @param {Event} event The event to set current target.\n * @param {number} eventPhase New event phase.\n * @returns {void}\n * @private\n */\nfunction setEventPhase(event, eventPhase) {\n    pd(event).eventPhase = eventPhase;\n}\n\n/**\n * Set the current target of a given event.\n * @param {Event} event The event to set current target.\n * @param {EventTarget|null} currentTarget New current target.\n * @returns {void}\n * @private\n */\nfunction setCurrentTarget(event, currentTarget) {\n    pd(event).currentTarget = currentTarget;\n}\n\n/**\n * Set a passive listener of a given event.\n * @param {Event} event The event to set current target.\n * @param {Function|null} passiveListener New passive listener.\n * @returns {void}\n * @private\n */\nfunction setPassiveListener(event, passiveListener) {\n    pd(event).passiveListener = passiveListener;\n}\n\n/**\n * @typedef {object} ListenerNode\n * @property {Function} listener\n * @property {1|2|3} listenerType\n * @property {boolean} passive\n * @property {boolean} once\n * @property {ListenerNode|null} next\n * @private\n */\n\n/**\n * @type {WeakMap<object, Map<string, ListenerNode>>}\n * @private\n */\nconst listenersMap = new WeakMap();\n\n// Listener types\nconst CAPTURE = 1;\nconst BUBBLE = 2;\nconst ATTRIBUTE = 3;\n\n/**\n * Check whether a given value is an object or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an object.\n */\nfunction isObject(x) {\n    return x !== null && typeof x === \"object\" //eslint-disable-line no-restricted-syntax\n}\n\n/**\n * Get listeners.\n * @param {EventTarget} eventTarget The event target to get.\n * @returns {Map<string, ListenerNode>} The listeners.\n * @private\n */\nfunction getListeners(eventTarget) {\n    const listeners = listenersMap.get(eventTarget);\n    if (listeners == null) {\n        throw new TypeError(\n            \"'this' is expected an EventTarget object, but got another value.\"\n        )\n    }\n    return listeners\n}\n\n/**\n * Get the property descriptor for the event attribute of a given event.\n * @param {string} eventName The event name to get property descriptor.\n * @returns {PropertyDescriptor} The property descriptor.\n * @private\n */\nfunction defineEventAttributeDescriptor(eventName) {\n    return {\n        get() {\n            const listeners = getListeners(this);\n            let node = listeners.get(eventName);\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    return node.listener\n                }\n                node = node.next;\n            }\n            return null\n        },\n\n        set(listener) {\n            if (typeof listener !== \"function\" && !isObject(listener)) {\n                listener = null; // eslint-disable-line no-param-reassign\n            }\n            const listeners = getListeners(this);\n\n            // Traverse to the tail while removing old value.\n            let prev = null;\n            let node = listeners.get(eventName);\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    // Remove old value.\n                    if (prev !== null) {\n                        prev.next = node.next;\n                    } else if (node.next !== null) {\n                        listeners.set(eventName, node.next);\n                    } else {\n                        listeners.delete(eventName);\n                    }\n                } else {\n                    prev = node;\n                }\n\n                node = node.next;\n            }\n\n            // Add new value.\n            if (listener !== null) {\n                const newNode = {\n                    listener,\n                    listenerType: ATTRIBUTE,\n                    passive: false,\n                    once: false,\n                    next: null,\n                };\n                if (prev === null) {\n                    listeners.set(eventName, newNode);\n                } else {\n                    prev.next = newNode;\n                }\n            }\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define an event attribute (e.g. `eventTarget.onclick`).\n * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.\n * @param {string} eventName The event name to define.\n * @returns {void}\n */\nfunction defineEventAttribute(eventTargetPrototype, eventName) {\n    Object.defineProperty(\n        eventTargetPrototype,\n        `on${eventName}`,\n        defineEventAttributeDescriptor(eventName)\n    );\n}\n\n/**\n * Define a custom EventTarget with event attributes.\n * @param {string[]} eventNames Event names for event attributes.\n * @returns {EventTarget} The custom EventTarget.\n * @private\n */\nfunction defineCustomEventTarget(eventNames) {\n    /** CustomEventTarget */\n    function CustomEventTarget() {\n        EventTarget.call(this);\n    }\n\n    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {\n        constructor: {\n            value: CustomEventTarget,\n            configurable: true,\n            writable: true,\n        },\n    });\n\n    for (let i = 0; i < eventNames.length; ++i) {\n        defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);\n    }\n\n    return CustomEventTarget\n}\n\n/**\n * EventTarget.\n *\n * - This is constructor if no arguments.\n * - This is a function which returns a CustomEventTarget constructor if there are arguments.\n *\n * For example:\n *\n *     class A extends EventTarget {}\n *     class B extends EventTarget(\"message\") {}\n *     class C extends EventTarget(\"message\", \"error\") {}\n *     class D extends EventTarget([\"message\", \"error\"]) {}\n */\nfunction EventTarget() {\n    /*eslint-disable consistent-return */\n    if (this instanceof EventTarget) {\n        listenersMap.set(this, new Map());\n        return\n    }\n    if (arguments.length === 1 && Array.isArray(arguments[0])) {\n        return defineCustomEventTarget(arguments[0])\n    }\n    if (arguments.length > 0) {\n        const types = new Array(arguments.length);\n        for (let i = 0; i < arguments.length; ++i) {\n            types[i] = arguments[i];\n        }\n        return defineCustomEventTarget(types)\n    }\n    throw new TypeError(\"Cannot call a class as a function\")\n    /*eslint-enable consistent-return */\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEventTarget.prototype = {\n    /**\n     * Add a given listener to this event target.\n     * @param {string} eventName The event name to add.\n     * @param {Function} listener The listener to add.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    addEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n        if (typeof listener !== \"function\" && !isObject(listener)) {\n            throw new TypeError(\"'listener' should be a function or an object.\")\n        }\n\n        const listeners = getListeners(this);\n        const optionsIsObj = isObject(options);\n        const capture = optionsIsObj\n            ? Boolean(options.capture)\n            : Boolean(options);\n        const listenerType = capture ? CAPTURE : BUBBLE;\n        const newNode = {\n            listener,\n            listenerType,\n            passive: optionsIsObj && Boolean(options.passive),\n            once: optionsIsObj && Boolean(options.once),\n            next: null,\n        };\n\n        // Set it as the first node if the first node is null.\n        let node = listeners.get(eventName);\n        if (node === undefined) {\n            listeners.set(eventName, newNode);\n            return\n        }\n\n        // Traverse to the tail while checking duplication..\n        let prev = null;\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                // Should ignore duplication.\n                return\n            }\n            prev = node;\n            node = node.next;\n        }\n\n        // Add it.\n        prev.next = newNode;\n    },\n\n    /**\n     * Remove a given listener from this event target.\n     * @param {string} eventName The event name to remove.\n     * @param {Function} listener The listener to remove.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    removeEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n\n        const listeners = getListeners(this);\n        const capture = isObject(options)\n            ? Boolean(options.capture)\n            : Boolean(options);\n        const listenerType = capture ? CAPTURE : BUBBLE;\n\n        let prev = null;\n        let node = listeners.get(eventName);\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                if (prev !== null) {\n                    prev.next = node.next;\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next);\n                } else {\n                    listeners.delete(eventName);\n                }\n                return\n            }\n\n            prev = node;\n            node = node.next;\n        }\n    },\n\n    /**\n     * Dispatch a given event.\n     * @param {Event|{type:string}} event The event to dispatch.\n     * @returns {boolean} `false` if canceled.\n     */\n    dispatchEvent(event) {\n        if (event == null || typeof event.type !== \"string\") {\n            throw new TypeError('\"event.type\" should be a string.')\n        }\n\n        // If listeners aren't registered, terminate.\n        const listeners = getListeners(this);\n        const eventName = event.type;\n        let node = listeners.get(eventName);\n        if (node == null) {\n            return true\n        }\n\n        // Since we cannot rewrite several properties, so wrap object.\n        const wrappedEvent = wrapEvent(this, event);\n\n        // This doesn't process capturing phase and bubbling phase.\n        // This isn't participating in a tree.\n        let prev = null;\n        while (node != null) {\n            // Remove this listener if it's once\n            if (node.once) {\n                if (prev !== null) {\n                    prev.next = node.next;\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next);\n                } else {\n                    listeners.delete(eventName);\n                }\n            } else {\n                prev = node;\n            }\n\n            // Call this listener\n            setPassiveListener(\n                wrappedEvent,\n                node.passive ? node.listener : null\n            );\n            if (typeof node.listener === \"function\") {\n                try {\n                    node.listener.call(this, wrappedEvent);\n                } catch (err) {\n                    if (\n                        typeof console !== \"undefined\" &&\n                        typeof console.error === \"function\"\n                    ) {\n                        console.error(err);\n                    }\n                }\n            } else if (\n                node.listenerType !== ATTRIBUTE &&\n                typeof node.listener.handleEvent === \"function\"\n            ) {\n                node.listener.handleEvent(wrappedEvent);\n            }\n\n            // Break if `event.stopImmediatePropagation` was called.\n            if (isStopped(wrappedEvent)) {\n                break\n            }\n\n            node = node.next;\n        }\n        setPassiveListener(wrappedEvent, null);\n        setEventPhase(wrappedEvent, 0);\n        setCurrentTarget(wrappedEvent, null);\n\n        return !wrappedEvent.defaultPrevented\n    },\n};\n\n// `constructor` is not enumerable.\nObject.defineProperty(EventTarget.prototype, \"constructor\", {\n    value: EventTarget,\n    configurable: true,\n    writable: true,\n});\n\n// Ensure `eventTarget instanceof window.EventTarget` is `true`.\nif (\n    typeof window !== \"undefined\" &&\n    typeof window.EventTarget !== \"undefined\"\n) {\n    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);\n}\n\n/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * See LICENSE file in root directory for full license.\n */\n\n/**\n * The signal class.\n * @see https://dom.spec.whatwg.org/#abortsignal\n */\nclass AbortSignal extends EventTarget {\n    /**\n     * AbortSignal cannot be constructed directly.\n     */\n    constructor() {\n        super();\n        throw new TypeError(\"AbortSignal cannot be constructed directly\");\n    }\n    /**\n     * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.\n     */\n    get aborted() {\n        const aborted = abortedFlags.get(this);\n        if (typeof aborted !== \"boolean\") {\n            throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? \"null\" : typeof this}`);\n        }\n        return aborted;\n    }\n}\ndefineEventAttribute(AbortSignal.prototype, \"abort\");\n/**\n * Create an AbortSignal object.\n */\nfunction createAbortSignal() {\n    const signal = Object.create(AbortSignal.prototype);\n    EventTarget.call(signal);\n    abortedFlags.set(signal, false);\n    return signal;\n}\n/**\n * Abort a given signal.\n */\nfunction abortSignal(signal) {\n    if (abortedFlags.get(signal) !== false) {\n        return;\n    }\n    abortedFlags.set(signal, true);\n    signal.dispatchEvent({ type: \"abort\" });\n}\n/**\n * Aborted flag for each instances.\n */\nconst abortedFlags = new WeakMap();\n// Properties should be enumerable.\nObject.defineProperties(AbortSignal.prototype, {\n    aborted: { enumerable: true },\n});\n// `toString()` should return `\"[object AbortSignal]\"`\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n    Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {\n        configurable: true,\n        value: \"AbortSignal\",\n    });\n}\n\n/**\n * The AbortController.\n * @see https://dom.spec.whatwg.org/#abortcontroller\n */\nclass AbortController$1 {\n    /**\n     * Initialize this controller.\n     */\n    constructor() {\n        signals.set(this, createAbortSignal());\n    }\n    /**\n     * Returns the `AbortSignal` object associated with this object.\n     */\n    get signal() {\n        return getSignal(this);\n    }\n    /**\n     * Abort and signal to any observers that the associated activity is to be aborted.\n     */\n    abort() {\n        abortSignal(getSignal(this));\n    }\n}\n/**\n * Associated signals.\n */\nconst signals = new WeakMap();\n/**\n * Get the associated signal of a given controller.\n */\nfunction getSignal(controller) {\n    const signal = signals.get(controller);\n    if (signal == null) {\n        throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${controller === null ? \"null\" : typeof controller}`);\n    }\n    return signal;\n}\n// Properties should be enumerable.\nObject.defineProperties(AbortController$1.prototype, {\n    signal: { enumerable: true },\n    abort: { enumerable: true },\n});\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n    Object.defineProperty(AbortController$1.prototype, Symbol.toStringTag, {\n        configurable: true,\n        value: \"AbortController\",\n    });\n}\n\nexport { AbortController$1 as A, File$1 as F, Headers as H, Request as R, _Blob$1 as _, FormData as a, Response as b, AbortError as c, FetchError as d, fetch as f, isRedirect as i, nodeDomexception as n };\n","import { _ as _Blob, F as File$1, n as nodeDomexception, a as FormData$1, f as fetch$1, H as Headers$1, R as Request$1, b as Response$1, A as AbortController$1 } from './shared/node-fetch-native.b703cef9.mjs';\nexport { c as AbortError, d as FetchError, i as isRedirect } from './shared/node-fetch-native.b703cef9.mjs';\nimport { statSync, createReadStream, promises } from 'node:fs';\nimport { basename } from 'node:path';\nimport 'node:http';\nimport 'node:https';\nimport 'node:zlib';\nimport 'node:stream';\nimport 'node:buffer';\nimport 'node:util';\nimport 'node:url';\nimport 'node:net';\n\nconst { stat } = promises;\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\nconst blobFromSync = (path, type) => fromBlob(statSync(path), path, type);\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<Blob>}\n */\nconst blobFrom = (path, type) => stat(path).then(stat => fromBlob(stat, path, type));\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<File>}\n */\nconst fileFrom = (path, type) => stat(path).then(stat => fromFile(stat, path, type));\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\nconst fileFromSync = (path, type) => fromFile(statSync(path), path, type);\n\n// @ts-ignore\nconst fromBlob = (stat, path, type = '') => new _Blob([new BlobDataItem({\n  path,\n  size: stat.size,\n  lastModified: stat.mtimeMs,\n  start: 0\n})], { type });\n\n// @ts-ignore\nconst fromFile = (stat, path, type = '') => new File$1([new BlobDataItem({\n  path,\n  size: stat.size,\n  lastModified: stat.mtimeMs,\n  start: 0\n})], basename(path), { type, lastModified: stat.mtimeMs });\n\n/**\n * This is a blob backed up by a file on the disk\n * with minium requirement. Its wrapped around a Blob as a blobPart\n * so you have no direct access to this.\n *\n * @private\n */\nclass BlobDataItem {\n  #path\n  #start\n\n  constructor (options) {\n    this.#path = options.path;\n    this.#start = options.start;\n    this.size = options.size;\n    this.lastModified = options.lastModified;\n    this.originalSize = options.originalSize === undefined\n      ? options.size\n      : options.originalSize;\n  }\n\n  /**\n   * Slicing arguments is first validated and formatted\n   * to not be out of range by Blob.prototype.slice\n   */\n  slice (start, end) {\n    return new BlobDataItem({\n      path: this.#path,\n      lastModified: this.lastModified,\n      originalSize: this.originalSize,\n      size: end - start,\n      start: this.#start + start\n    })\n  }\n\n  async * stream () {\n    const { mtimeMs, size } = await stat(this.#path);\n\n    if (mtimeMs > this.lastModified || this.originalSize !== size) {\n      throw new nodeDomexception('The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.', 'NotReadableError')\n    }\n\n    yield * createReadStream(this.#path, {\n      start: this.#start,\n      end: this.#start + this.size - 1\n    });\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Blob'\n  }\n}\n\nconst fetch = globalThis.fetch || fetch$1;\nconst Blob = globalThis.Blob || _Blob;\nconst File = globalThis.File || File$1;\nconst FormData = globalThis.FormData || FormData$1;\nconst Headers = globalThis.Headers || Headers$1;\nconst Request = globalThis.Request || Request$1;\nconst Response = globalThis.Response || Response$1;\nconst AbortController = globalThis.AbortController || AbortController$1;\n\nexport { AbortController, Blob, File, FormData, Headers, Request, Response, blobFrom, blobFromSync, fetch as default, fetch, fileFrom, fileFromSync };\n","const suspectProtoRx = /\"(?:_|\\\\u0{2}5[Ff]){2}(?:p|\\\\u0{2}70)(?:r|\\\\u0{2}72)(?:o|\\\\u0{2}6[Ff])(?:t|\\\\u0{2}74)(?:o|\\\\u0{2}6[Ff])(?:_|\\\\u0{2}5[Ff]){2}\"\\s*:/;\nconst suspectConstructorRx = /\"(?:c|\\\\u0063)(?:o|\\\\u006[Ff])(?:n|\\\\u006[Ee])(?:s|\\\\u0073)(?:t|\\\\u0074)(?:r|\\\\u0072)(?:u|\\\\u0075)(?:c|\\\\u0063)(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:r|\\\\u0072)\"\\s*:/;\nconst JsonSigRx = /^\\s*[\"[{]|^\\s*-?\\d[\\d.]{0,14}\\s*$/;\nfunction jsonParseTransform(key, value) {\n  if (key === \"__proto__\") {\n    return;\n  }\n  if (key === \"constructor\" && value && typeof value === \"object\" && \"prototype\" in value) {\n    return;\n  }\n  return value;\n}\nfunction destr(value, options = {}) {\n  if (typeof value !== \"string\") {\n    return value;\n  }\n  const _lval = value.toLowerCase().trim();\n  if (_lval === \"true\") {\n    return true;\n  }\n  if (_lval === \"false\") {\n    return false;\n  }\n  if (_lval === \"null\") {\n    return null;\n  }\n  if (_lval === \"nan\") {\n    return Number.NaN;\n  }\n  if (_lval === \"infinity\") {\n    return Number.POSITIVE_INFINITY;\n  }\n  if (_lval === \"undefined\") {\n    return void 0;\n  }\n  if (!JsonSigRx.test(value)) {\n    if (options.strict) {\n      throw new SyntaxError(\"Invalid JSON\");\n    }\n    return value;\n  }\n  try {\n    if (suspectProtoRx.test(value) || suspectConstructorRx.test(value)) {\n      return JSON.parse(value, jsonParseTransform);\n    }\n    return JSON.parse(value);\n  } catch (error) {\n    if (options.strict) {\n      throw error;\n    }\n    return value;\n  }\n}\n\nexport { destr as default };\n","const n = /[^\\0-\\x7E]/;\nconst t = /[\\x2E\\u3002\\uFF0E\\uFF61]/g;\nconst o = { overflow: \"Overflow Error\", \"not-basic\": \"Illegal Input\", \"invalid-input\": \"Invalid Input\" };\nconst e = Math.floor;\nconst r = String.fromCharCode;\nfunction s(n2) {\n  throw new RangeError(o[n2]);\n}\nconst c = function(n2, t2) {\n  return n2 + 22 + 75 * (n2 < 26) - ((t2 != 0) << 5);\n};\nconst u = function(n2, t2, o2) {\n  let r2 = 0;\n  for (n2 = o2 ? e(n2 / 700) : n2 >> 1, n2 += e(n2 / t2); n2 > 455; r2 += 36) {\n    n2 = e(n2 / 35);\n  }\n  return e(r2 + 36 * n2 / (n2 + 38));\n};\nfunction toASCII(o2) {\n  return function(n2, o3) {\n    const e2 = n2.split(\"@\");\n    let r2 = \"\";\n    e2.length > 1 && (r2 = e2[0] + \"@\", n2 = e2[1]);\n    const s2 = function(n3, t2) {\n      const o4 = [];\n      let e3 = n3.length;\n      for (; e3--; ) {\n        o4[e3] = t2(n3[e3]);\n      }\n      return o4;\n    }((n2 = n2.replace(t, \".\")).split(\".\"), o3).join(\".\");\n    return r2 + s2;\n  }(o2, function(t2) {\n    return n.test(t2) ? \"xn--\" + function(n2) {\n      const t3 = [];\n      const o3 = (n2 = function(n3) {\n        const t4 = [];\n        let o4 = 0;\n        const e2 = n3.length;\n        for (; o4 < e2; ) {\n          const r2 = n3.charCodeAt(o4++);\n          if (r2 >= 55296 && r2 <= 56319 && o4 < e2) {\n            const e3 = n3.charCodeAt(o4++);\n            (64512 & e3) == 56320 ? t4.push(((1023 & r2) << 10) + (1023 & e3) + 65536) : (t4.push(r2), o4--);\n          } else {\n            t4.push(r2);\n          }\n        }\n        return t4;\n      }(n2)).length;\n      let f = 128;\n      let i = 0;\n      let l = 72;\n      for (const o4 of n2) {\n        o4 < 128 && t3.push(r(o4));\n      }\n      const h = t3.length;\n      let p = h;\n      for (h && t3.push(\"-\"); p < o3; ) {\n        let o4 = 2147483647;\n        for (const t4 of n2) {\n          t4 >= f && t4 < o4 && (o4 = t4);\n        }\n        const a = p + 1;\n        o4 - f > e((2147483647 - i) / a) && s(\"overflow\"), i += (o4 - f) * a, f = o4;\n        for (const o5 of n2) {\n          if (o5 < f && ++i > 2147483647 && s(\"overflow\"), o5 == f) {\n            let n3 = i;\n            for (let o6 = 36; ; o6 += 36) {\n              const s2 = o6 <= l ? 1 : o6 >= l + 26 ? 26 : o6 - l;\n              if (n3 < s2) {\n                break;\n              }\n              const u2 = n3 - s2;\n              const f2 = 36 - s2;\n              t3.push(r(c(s2 + u2 % f2, 0))), n3 = e(u2 / f2);\n            }\n            t3.push(r(c(n3, 0))), l = u(i, a, p == h), i = 0, ++p;\n          }\n        }\n        ++i, ++f;\n      }\n      return t3.join(\"\");\n    }(t2) : t2;\n  });\n}\n\nconst HASH_RE = /#/g;\nconst AMPERSAND_RE = /&/g;\nconst SLASH_RE = /\\//g;\nconst EQUAL_RE = /=/g;\nconst IM_RE = /\\?/g;\nconst PLUS_RE = /\\+/g;\nconst ENC_BRACKET_OPEN_RE = /%5B/gi;\nconst ENC_BRACKET_CLOSE_RE = /%5D/gi;\nconst ENC_CARET_RE = /%5E/gi;\nconst ENC_BACKTICK_RE = /%60/gi;\nconst ENC_CURLY_OPEN_RE = /%7B/gi;\nconst ENC_PIPE_RE = /%7C/gi;\nconst ENC_CURLY_CLOSE_RE = /%7D/gi;\nconst ENC_SPACE_RE = /%20/gi;\nconst ENC_SLASH_RE = /%2F/gi;\nconst ENC_ENC_SLASH_RE = /%252F/gi;\nfunction encode(text) {\n  return encodeURI(\"\" + text).replace(ENC_PIPE_RE, \"|\").replace(ENC_BRACKET_OPEN_RE, \"[\").replace(ENC_BRACKET_CLOSE_RE, \"]\");\n}\nfunction encodeHash(text) {\n  return encode(text).replace(ENC_CURLY_OPEN_RE, \"{\").replace(ENC_CURLY_CLOSE_RE, \"}\").replace(ENC_CARET_RE, \"^\");\n}\nfunction encodeQueryValue(text) {\n  return encode(text).replace(PLUS_RE, \"%2B\").replace(ENC_SPACE_RE, \"+\").replace(HASH_RE, \"%23\").replace(AMPERSAND_RE, \"%26\").replace(ENC_BACKTICK_RE, \"`\").replace(ENC_CURLY_OPEN_RE, \"{\").replace(ENC_CURLY_CLOSE_RE, \"}\").replace(ENC_CARET_RE, \"^\");\n}\nfunction encodeQueryKey(text) {\n  return encodeQueryValue(text).replace(EQUAL_RE, \"%3D\");\n}\nfunction encodePath(text) {\n  return encode(text).replace(HASH_RE, \"%23\").replace(IM_RE, \"%3F\").replace(ENC_ENC_SLASH_RE, \"%2F\").replace(AMPERSAND_RE, \"%26\").replace(PLUS_RE, \"%2B\");\n}\nfunction encodeParam(text) {\n  return encodePath(text).replace(SLASH_RE, \"%2F\");\n}\nfunction decode(text = \"\") {\n  try {\n    return decodeURIComponent(\"\" + text);\n  } catch (_err) {\n    return \"\" + text;\n  }\n}\nfunction decodePath(text) {\n  return decode(text.replace(ENC_SLASH_RE, \"%252F\"));\n}\nfunction decodeQueryValue(text) {\n  return decode(text.replace(PLUS_RE, \" \"));\n}\nfunction encodeHost(name = \"\") {\n  return toASCII(name);\n}\n\nfunction parseQuery(paramsStr = \"\") {\n  const obj = {};\n  if (paramsStr[0] === \"?\") {\n    paramsStr = paramsStr.substr(1);\n  }\n  for (const param of paramsStr.split(\"&\")) {\n    const s = param.match(/([^=]+)=?(.*)/) || [];\n    if (s.length < 2) {\n      continue;\n    }\n    const key = decode(s[1]);\n    if (key === \"__proto__\" || key === \"constructor\") {\n      continue;\n    }\n    const value = decodeQueryValue(s[2] || \"\");\n    if (obj[key]) {\n      if (Array.isArray(obj[key])) {\n        obj[key].push(value);\n      } else {\n        obj[key] = [obj[key], value];\n      }\n    } else {\n      obj[key] = value;\n    }\n  }\n  return obj;\n}\nfunction encodeQueryItem(key, val) {\n  if (typeof val === \"number\" || typeof val === \"boolean\") {\n    val = String(val);\n  }\n  if (!val) {\n    return encodeQueryKey(key);\n  }\n  if (Array.isArray(val)) {\n    return val.map((_val) => `${encodeQueryKey(key)}=${encodeQueryValue(_val)}`).join(\"&\");\n  }\n  return `${encodeQueryKey(key)}=${encodeQueryValue(val)}`;\n}\nfunction stringifyQuery(query) {\n  return Object.keys(query).map((k) => encodeQueryItem(k, query[k])).join(\"&\");\n}\n\nclass $URL {\n  constructor(input = \"\") {\n    this.query = {};\n    if (typeof input !== \"string\") {\n      throw new TypeError(`URL input should be string received ${typeof input} (${input})`);\n    }\n    const parsed = parseURL(input);\n    this.protocol = decode(parsed.protocol);\n    this.host = decode(parsed.host);\n    this.auth = decode(parsed.auth);\n    this.pathname = decodePath(parsed.pathname);\n    this.query = parseQuery(parsed.search);\n    this.hash = decode(parsed.hash);\n  }\n  get hostname() {\n    return parseHost(this.host).hostname;\n  }\n  get port() {\n    return parseHost(this.host).port || \"\";\n  }\n  get username() {\n    return parseAuth(this.auth).username;\n  }\n  get password() {\n    return parseAuth(this.auth).password || \"\";\n  }\n  get hasProtocol() {\n    return this.protocol.length;\n  }\n  get isAbsolute() {\n    return this.hasProtocol || this.pathname[0] === \"/\";\n  }\n  get search() {\n    const q = stringifyQuery(this.query);\n    return q.length ? \"?\" + q : \"\";\n  }\n  get searchParams() {\n    const p = new URLSearchParams();\n    for (const name in this.query) {\n      const value = this.query[name];\n      if (Array.isArray(value)) {\n        value.forEach((v) => p.append(name, v));\n      } else {\n        p.append(name, value || \"\");\n      }\n    }\n    return p;\n  }\n  get origin() {\n    return (this.protocol ? this.protocol + \"//\" : \"\") + encodeHost(this.host);\n  }\n  get fullpath() {\n    return encodePath(this.pathname) + this.search + encodeHash(this.hash);\n  }\n  get encodedAuth() {\n    if (!this.auth) {\n      return \"\";\n    }\n    const { username, password } = parseAuth(this.auth);\n    return encodeURIComponent(username) + (password ? \":\" + encodeURIComponent(password) : \"\");\n  }\n  get href() {\n    const auth = this.encodedAuth;\n    const originWithAuth = (this.protocol ? this.protocol + \"//\" : \"\") + (auth ? auth + \"@\" : \"\") + encodeHost(this.host);\n    return this.hasProtocol && this.isAbsolute ? originWithAuth + this.fullpath : this.fullpath;\n  }\n  append(url) {\n    if (url.hasProtocol) {\n      throw new Error(\"Cannot append a URL with protocol\");\n    }\n    Object.assign(this.query, url.query);\n    if (url.pathname) {\n      this.pathname = withTrailingSlash(this.pathname) + withoutLeadingSlash(url.pathname);\n    }\n    if (url.hash) {\n      this.hash = url.hash;\n    }\n  }\n  toJSON() {\n    return this.href;\n  }\n  toString() {\n    return this.href;\n  }\n}\n\nfunction isRelative(inputStr) {\n  return [\"./\", \"../\"].some((str) => inputStr.startsWith(str));\n}\nconst PROTOCOL_REGEX = /^\\w+:(\\/\\/)?/;\nconst PROTOCOL_RELATIVE_REGEX = /^\\/\\/[^/]+/;\nfunction hasProtocol(inputStr, acceptProtocolRelative = false) {\n  return PROTOCOL_REGEX.test(inputStr) || acceptProtocolRelative && PROTOCOL_RELATIVE_REGEX.test(inputStr);\n}\nconst TRAILING_SLASH_RE = /\\/$|\\/\\?/;\nfunction hasTrailingSlash(input = \"\", queryParams = false) {\n  if (!queryParams) {\n    return input.endsWith(\"/\");\n  }\n  return TRAILING_SLASH_RE.test(input);\n}\nfunction withoutTrailingSlash(input = \"\", queryParams = false) {\n  if (!queryParams) {\n    return (hasTrailingSlash(input) ? input.slice(0, -1) : input) || \"/\";\n  }\n  if (!hasTrailingSlash(input, true)) {\n    return input || \"/\";\n  }\n  const [s0, ...s] = input.split(\"?\");\n  return (s0.slice(0, -1) || \"/\") + (s.length ? `?${s.join(\"?\")}` : \"\");\n}\nfunction withTrailingSlash(input = \"\", queryParams = false) {\n  if (!queryParams) {\n    return input.endsWith(\"/\") ? input : input + \"/\";\n  }\n  if (hasTrailingSlash(input, true)) {\n    return input || \"/\";\n  }\n  const [s0, ...s] = input.split(\"?\");\n  return s0 + \"/\" + (s.length ? `?${s.join(\"?\")}` : \"\");\n}\nfunction hasLeadingSlash(input = \"\") {\n  return input.startsWith(\"/\");\n}\nfunction withoutLeadingSlash(input = \"\") {\n  return (hasLeadingSlash(input) ? input.substr(1) : input) || \"/\";\n}\nfunction withLeadingSlash(input = \"\") {\n  return hasLeadingSlash(input) ? input : \"/\" + input;\n}\nfunction cleanDoubleSlashes(input = \"\") {\n  return input.split(\"://\").map((str) => str.replace(/\\/{2,}/g, \"/\")).join(\"://\");\n}\nfunction withBase(input, base) {\n  if (isEmptyURL(base) || hasProtocol(input)) {\n    return input;\n  }\n  const _base = withoutTrailingSlash(base);\n  if (input.startsWith(_base)) {\n    return input;\n  }\n  return joinURL(_base, input);\n}\nfunction withoutBase(input, base) {\n  if (isEmptyURL(base)) {\n    return input;\n  }\n  const _base = withoutTrailingSlash(base);\n  if (!input.startsWith(_base)) {\n    return input;\n  }\n  const trimmed = input.substring(_base.length);\n  return trimmed[0] === \"/\" ? trimmed : \"/\" + trimmed;\n}\nfunction withQuery(input, query) {\n  const parsed = parseURL(input);\n  const mergedQuery = { ...parseQuery(parsed.search), ...query };\n  parsed.search = stringifyQuery(mergedQuery);\n  return stringifyParsedURL(parsed);\n}\nfunction getQuery(input) {\n  return parseQuery(parseURL(input).search);\n}\nfunction isEmptyURL(url) {\n  return !url || url === \"/\";\n}\nfunction isNonEmptyURL(url) {\n  return url && url !== \"/\";\n}\nfunction joinURL(base, ...input) {\n  let url = base || \"\";\n  for (const i of input.filter(isNonEmptyURL)) {\n    url = url ? withTrailingSlash(url) + withoutLeadingSlash(i) : i;\n  }\n  return url;\n}\nfunction withHttp(input) {\n  return withProtocol(input, \"http://\");\n}\nfunction withHttps(input) {\n  return withProtocol(input, \"https://\");\n}\nfunction withoutProtocol(input) {\n  return withProtocol(input, \"\");\n}\nfunction withProtocol(input, protocol) {\n  const match = input.match(PROTOCOL_REGEX);\n  if (!match) {\n    return protocol + input;\n  }\n  return protocol + input.substring(match[0].length);\n}\nfunction createURL(input) {\n  return new $URL(input);\n}\nfunction normalizeURL(input) {\n  return createURL(input).toString();\n}\nfunction resolveURL(base, ...input) {\n  const url = createURL(base);\n  for (const i of input.filter(isNonEmptyURL)) {\n    url.append(createURL(i));\n  }\n  return url.toString();\n}\nfunction isSamePath(p1, p2) {\n  return decode(withoutTrailingSlash(p1)) === decode(withoutTrailingSlash(p2));\n}\nfunction isEqual(a, b, opts = {}) {\n  if (!opts.trailingSlash) {\n    a = withTrailingSlash(a);\n    b = withTrailingSlash(b);\n  }\n  if (!opts.leadingSlash) {\n    a = withLeadingSlash(a);\n    b = withLeadingSlash(b);\n  }\n  if (!opts.encoding) {\n    a = decode(a);\n    b = decode(b);\n  }\n  return a === b;\n}\n\nfunction parseURL(input = \"\", defaultProto) {\n  if (!hasProtocol(input, true)) {\n    return defaultProto ? parseURL(defaultProto + input) : parsePath(input);\n  }\n  const [protocol = \"\", auth, hostAndPath = \"\"] = (input.replace(/\\\\/g, \"/\").match(/([^:/]+:)?\\/\\/([^/@]+@)?(.*)/) || []).splice(1);\n  const [host = \"\", path = \"\"] = (hostAndPath.match(/([^/?#]*)(.*)?/) || []).splice(1);\n  const { pathname, search, hash } = parsePath(path);\n  return {\n    protocol,\n    auth: auth ? auth.substr(0, auth.length - 1) : \"\",\n    host,\n    pathname,\n    search,\n    hash\n  };\n}\nfunction parsePath(input = \"\") {\n  const [pathname = \"\", search = \"\", hash = \"\"] = (input.match(/([^#?]*)(\\?[^#]*)?(#.*)?/) || []).splice(1);\n  return {\n    pathname,\n    search,\n    hash\n  };\n}\nfunction parseAuth(input = \"\") {\n  const [username, password] = input.split(\":\");\n  return {\n    username: decode(username),\n    password: decode(password)\n  };\n}\nfunction parseHost(input = \"\") {\n  const [hostname, port] = (input.match(/([^/]*)(:0-9+)?/) || []).splice(1);\n  return {\n    hostname: decode(hostname),\n    port\n  };\n}\nfunction stringifyParsedURL(parsed) {\n  const fullpath = parsed.pathname + (parsed.search ? (parsed.search.startsWith(\"?\") ? \"\" : \"?\") + parsed.search : \"\") + parsed.hash;\n  if (!parsed.protocol) {\n    return fullpath;\n  }\n  return parsed.protocol + \"//\" + (parsed.auth ? parsed.auth + \"@\" : \"\") + parsed.host + fullpath;\n}\n\nexport { $URL, cleanDoubleSlashes, createURL, decode, decodePath, decodeQueryValue, encode, encodeHash, encodeHost, encodeParam, encodePath, encodeQueryItem, encodeQueryKey, encodeQueryValue, getQuery, hasLeadingSlash, hasProtocol, hasTrailingSlash, isEmptyURL, isEqual, isNonEmptyURL, isRelative, isSamePath, joinURL, normalizeURL, parseAuth, parseHost, parsePath, parseQuery, parseURL, resolveURL, stringifyParsedURL, stringifyQuery, withBase, withHttp, withHttps, withLeadingSlash, withProtocol, withQuery, withTrailingSlash, withoutBase, withoutLeadingSlash, withoutProtocol, withoutTrailingSlash };\n","import destr from 'destr';\nimport { withBase, withQuery } from 'ufo';\n\nclass FetchError extends Error {\n  constructor() {\n    super(...arguments);\n    this.name = \"FetchError\";\n  }\n}\nfunction createFetchError(request, error, response) {\n  let message = \"\";\n  if (request && response) {\n    message = `${response.status} ${response.statusText} (${request.toString()})`;\n  }\n  if (error) {\n    message = `${error.message} (${message})`;\n  }\n  const fetchError = new FetchError(message);\n  Object.defineProperty(fetchError, \"request\", { get() {\n    return request;\n  } });\n  Object.defineProperty(fetchError, \"response\", { get() {\n    return response;\n  } });\n  Object.defineProperty(fetchError, \"data\", { get() {\n    return response && response._data;\n  } });\n  Object.defineProperty(fetchError, \"status\", { get() {\n    return response && response.status;\n  } });\n  Object.defineProperty(fetchError, \"statusText\", { get() {\n    return response && response.statusText;\n  } });\n  Object.defineProperty(fetchError, \"statusCode\", { get() {\n    return response && response.status;\n  } });\n  Object.defineProperty(fetchError, \"statusMessage\", { get() {\n    return response && response.statusText;\n  } });\n  return fetchError;\n}\n\nconst payloadMethods = new Set(Object.freeze([\"PATCH\", \"POST\", \"PUT\", \"DELETE\"]));\nfunction isPayloadMethod(method = \"GET\") {\n  return payloadMethods.has(method.toUpperCase());\n}\nfunction isJSONSerializable(val) {\n  if (val === void 0) {\n    return false;\n  }\n  const t = typeof val;\n  if (t === \"string\" || t === \"number\" || t === \"boolean\" || t === null) {\n    return true;\n  }\n  if (t !== \"object\") {\n    return false;\n  }\n  if (Array.isArray(val)) {\n    return true;\n  }\n  return val.constructor && val.constructor.name === \"Object\" || typeof val.toJSON === \"function\";\n}\nconst textTypes = /* @__PURE__ */ new Set([\n  \"image/svg\",\n  \"application/xml\",\n  \"application/xhtml\",\n  \"application/html\"\n]);\nconst JSON_RE = /^application\\/(?:[\\w!#$%&*`\\-.^~]*\\+)?json(;.+)?$/i;\nfunction detectResponseType(_contentType = \"\") {\n  if (!_contentType) {\n    return \"json\";\n  }\n  const contentType = _contentType.split(\";\").shift();\n  if (JSON_RE.test(contentType)) {\n    return \"json\";\n  }\n  if (textTypes.has(contentType) || contentType.startsWith(\"text/\")) {\n    return \"text\";\n  }\n  return \"blob\";\n}\n\nconst retryStatusCodes = /* @__PURE__ */ new Set([\n  408,\n  409,\n  425,\n  429,\n  500,\n  502,\n  503,\n  504\n]);\nfunction createFetch(globalOptions) {\n  const { fetch, Headers } = globalOptions;\n  function onError(ctx) {\n    const isAbort = ctx.error && ctx.error.name === \"AbortError\" || false;\n    if (ctx.options.retry !== false && !isAbort) {\n      const retries = typeof ctx.options.retry === \"number\" ? ctx.options.retry : isPayloadMethod(ctx.options.method) ? 0 : 1;\n      const responseCode = ctx.response && ctx.response.status || 500;\n      if (retries > 0 && retryStatusCodes.has(responseCode)) {\n        return $fetchRaw(ctx.request, {\n          ...ctx.options,\n          retry: retries - 1\n        });\n      }\n    }\n    const err = createFetchError(ctx.request, ctx.error, ctx.response);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(err, $fetchRaw);\n    }\n    throw err;\n  }\n  const $fetchRaw = async function $fetchRaw2(_request, _opts = {}) {\n    const ctx = {\n      request: _request,\n      options: { ...globalOptions.defaults, ..._opts },\n      response: void 0,\n      error: void 0\n    };\n    if (ctx.options.onRequest) {\n      await ctx.options.onRequest(ctx);\n    }\n    if (typeof ctx.request === \"string\") {\n      if (ctx.options.baseURL) {\n        ctx.request = withBase(ctx.request, ctx.options.baseURL);\n      }\n      if (ctx.options.query || ctx.options.params) {\n        ctx.request = withQuery(ctx.request, { ...ctx.options.params, ...ctx.options.query });\n      }\n      if (ctx.options.body && isPayloadMethod(ctx.options.method)) {\n        if (isJSONSerializable(ctx.options.body)) {\n          ctx.options.body = typeof ctx.options.body === \"string\" ? ctx.options.body : JSON.stringify(ctx.options.body);\n          ctx.options.headers = new Headers(ctx.options.headers);\n          if (!ctx.options.headers.has(\"content-type\")) {\n            ctx.options.headers.set(\"content-type\", \"application/json\");\n          }\n          if (!ctx.options.headers.has(\"accept\")) {\n            ctx.options.headers.set(\"accept\", \"application/json\");\n          }\n        }\n      }\n    }\n    ctx.response = await fetch(ctx.request, ctx.options).catch(async (error) => {\n      ctx.error = error;\n      if (ctx.options.onRequestError) {\n        await ctx.options.onRequestError(ctx);\n      }\n      return onError(ctx);\n    });\n    const responseType = (ctx.options.parseResponse ? \"json\" : ctx.options.responseType) || detectResponseType(ctx.response.headers.get(\"content-type\") || \"\");\n    if (responseType === \"json\") {\n      const data = await ctx.response.text();\n      const parseFn = ctx.options.parseResponse || destr;\n      ctx.response._data = parseFn(data);\n    } else if (responseType === \"stream\") {\n      ctx.response._data = ctx.response.body;\n    } else {\n      ctx.response._data = await ctx.response[responseType]();\n    }\n    if (ctx.options.onResponse) {\n      await ctx.options.onResponse(ctx);\n    }\n    if (ctx.response.status >= 400 && ctx.response.status < 600) {\n      if (ctx.options.onResponseError) {\n        await ctx.options.onResponseError(ctx);\n      }\n      return onError(ctx);\n    }\n    return ctx.response;\n  };\n  const $fetch = function $fetch2(request, opts) {\n    return $fetchRaw(request, opts).then((r) => r._data);\n  };\n  $fetch.raw = $fetchRaw;\n  $fetch.create = (defaultOptions = {}) => createFetch({\n    ...globalOptions,\n    defaults: {\n      ...globalOptions.defaults,\n      ...defaultOptions\n    }\n  });\n  return $fetch;\n}\n\nexport { FetchError as F, createFetchError as a, createFetch as c };\n","import http from 'http';\nimport https from 'https';\nimport nodeFetch, { Headers as Headers$1 } from 'node-fetch-native';\nimport { c as createFetch } from './shared/ohmyfetch.d1948a88.mjs';\nexport { F as FetchError, c as createFetch, a as createFetchError } from './shared/ohmyfetch.d1948a88.mjs';\nimport 'destr';\nimport 'ufo';\n\nfunction createNodeFetch() {\n  const useKeepAlive = JSON.parse(process.env.FETCH_KEEP_ALIVE || \"false\");\n  if (!useKeepAlive) {\n    return nodeFetch;\n  }\n  const agentOpts = { keepAlive: true };\n  const httpAgent = new http.Agent(agentOpts);\n  const httpsAgent = new https.Agent(agentOpts);\n  const nodeFetchOptions = {\n    agent(parsedURL) {\n      return parsedURL.protocol === \"http:\" ? httpAgent : httpsAgent;\n    }\n  };\n  return function nodeFetchWithKeepAlive(input, init) {\n    return nodeFetch(input, { ...nodeFetchOptions, ...init });\n  };\n}\nconst fetch = globalThis.fetch || createNodeFetch();\nconst Headers = globalThis.Headers || Headers$1;\nconst $fetch = createFetch({ fetch, Headers });\n\nexport { $fetch, Headers, createNodeFetch, fetch };\n"],"names":[],"sourceRoot":""}